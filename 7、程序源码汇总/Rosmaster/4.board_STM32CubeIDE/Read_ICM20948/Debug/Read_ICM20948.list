
Read_ICM20948.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008138  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08008320  08008320  00018320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087c4  080087c4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080087c4  080087c4  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080087c4  080087c4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087c4  080087c4  000187c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087c8  080087c8  000187c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080087cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  200001e4  080089b0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  080089b0  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf40  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e7  00000000  00000000  0002c14d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0002e838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  0002f400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb0a  00000000  00000000  0002fe90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010072  00000000  00000000  0004b99a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094cd5  00000000  00000000  0005ba0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f06e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e1c  00000000  00000000  000f0734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e4 	.word	0x200001e4
 8000204:	00000000 	.word	0x00000000
 8000208:	08008308 	.word	0x08008308

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e8 	.word	0x200001e8
 8000224:	08008308 	.word	0x08008308

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_frsub>:
 8000c00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c04:	e002      	b.n	8000c0c <__addsf3>
 8000c06:	bf00      	nop

08000c08 <__aeabi_fsub>:
 8000c08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c0c <__addsf3>:
 8000c0c:	0042      	lsls	r2, r0, #1
 8000c0e:	bf1f      	itttt	ne
 8000c10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c14:	ea92 0f03 	teqne	r2, r3
 8000c18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c20:	d06a      	beq.n	8000cf8 <__addsf3+0xec>
 8000c22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c2a:	bfc1      	itttt	gt
 8000c2c:	18d2      	addgt	r2, r2, r3
 8000c2e:	4041      	eorgt	r1, r0
 8000c30:	4048      	eorgt	r0, r1
 8000c32:	4041      	eorgt	r1, r0
 8000c34:	bfb8      	it	lt
 8000c36:	425b      	neglt	r3, r3
 8000c38:	2b19      	cmp	r3, #25
 8000c3a:	bf88      	it	hi
 8000c3c:	4770      	bxhi	lr
 8000c3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4240      	negne	r0, r0
 8000c4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c5a:	bf18      	it	ne
 8000c5c:	4249      	negne	r1, r1
 8000c5e:	ea92 0f03 	teq	r2, r3
 8000c62:	d03f      	beq.n	8000ce4 <__addsf3+0xd8>
 8000c64:	f1a2 0201 	sub.w	r2, r2, #1
 8000c68:	fa41 fc03 	asr.w	ip, r1, r3
 8000c6c:	eb10 000c 	adds.w	r0, r0, ip
 8000c70:	f1c3 0320 	rsb	r3, r3, #32
 8000c74:	fa01 f103 	lsl.w	r1, r1, r3
 8000c78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7c:	d502      	bpl.n	8000c84 <__addsf3+0x78>
 8000c7e:	4249      	negs	r1, r1
 8000c80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c88:	d313      	bcc.n	8000cb2 <__addsf3+0xa6>
 8000c8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c8e:	d306      	bcc.n	8000c9e <__addsf3+0x92>
 8000c90:	0840      	lsrs	r0, r0, #1
 8000c92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c96:	f102 0201 	add.w	r2, r2, #1
 8000c9a:	2afe      	cmp	r2, #254	; 0xfe
 8000c9c:	d251      	bcs.n	8000d42 <__addsf3+0x136>
 8000c9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ca2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca6:	bf08      	it	eq
 8000ca8:	f020 0001 	biceq.w	r0, r0, #1
 8000cac:	ea40 0003 	orr.w	r0, r0, r3
 8000cb0:	4770      	bx	lr
 8000cb2:	0049      	lsls	r1, r1, #1
 8000cb4:	eb40 0000 	adc.w	r0, r0, r0
 8000cb8:	3a01      	subs	r2, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cc0:	d2ed      	bcs.n	8000c9e <__addsf3+0x92>
 8000cc2:	fab0 fc80 	clz	ip, r0
 8000cc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cca:	ebb2 020c 	subs.w	r2, r2, ip
 8000cce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cd2:	bfaa      	itet	ge
 8000cd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd8:	4252      	neglt	r2, r2
 8000cda:	4318      	orrge	r0, r3
 8000cdc:	bfbc      	itt	lt
 8000cde:	40d0      	lsrlt	r0, r2
 8000ce0:	4318      	orrlt	r0, r3
 8000ce2:	4770      	bx	lr
 8000ce4:	f092 0f00 	teq	r2, #0
 8000ce8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cec:	bf06      	itte	eq
 8000cee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cf2:	3201      	addeq	r2, #1
 8000cf4:	3b01      	subne	r3, #1
 8000cf6:	e7b5      	b.n	8000c64 <__addsf3+0x58>
 8000cf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d00:	bf18      	it	ne
 8000d02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d06:	d021      	beq.n	8000d4c <__addsf3+0x140>
 8000d08:	ea92 0f03 	teq	r2, r3
 8000d0c:	d004      	beq.n	8000d18 <__addsf3+0x10c>
 8000d0e:	f092 0f00 	teq	r2, #0
 8000d12:	bf08      	it	eq
 8000d14:	4608      	moveq	r0, r1
 8000d16:	4770      	bx	lr
 8000d18:	ea90 0f01 	teq	r0, r1
 8000d1c:	bf1c      	itt	ne
 8000d1e:	2000      	movne	r0, #0
 8000d20:	4770      	bxne	lr
 8000d22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d26:	d104      	bne.n	8000d32 <__addsf3+0x126>
 8000d28:	0040      	lsls	r0, r0, #1
 8000d2a:	bf28      	it	cs
 8000d2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d30:	4770      	bx	lr
 8000d32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d36:	bf3c      	itt	cc
 8000d38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d3c:	4770      	bxcc	lr
 8000d3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d4a:	4770      	bx	lr
 8000d4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d50:	bf16      	itet	ne
 8000d52:	4608      	movne	r0, r1
 8000d54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d58:	4601      	movne	r1, r0
 8000d5a:	0242      	lsls	r2, r0, #9
 8000d5c:	bf06      	itte	eq
 8000d5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d62:	ea90 0f01 	teqeq	r0, r1
 8000d66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_ui2f>:
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	e004      	b.n	8000d7c <__aeabi_i2f+0x8>
 8000d72:	bf00      	nop

08000d74 <__aeabi_i2f>:
 8000d74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d78:	bf48      	it	mi
 8000d7a:	4240      	negmi	r0, r0
 8000d7c:	ea5f 0c00 	movs.w	ip, r0
 8000d80:	bf08      	it	eq
 8000d82:	4770      	bxeq	lr
 8000d84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d88:	4601      	mov	r1, r0
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	e01c      	b.n	8000dca <__aeabi_l2f+0x2a>

08000d90 <__aeabi_ul2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e00a      	b.n	8000db4 <__aeabi_l2f+0x14>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_l2f>:
 8000da0:	ea50 0201 	orrs.w	r2, r0, r1
 8000da4:	bf08      	it	eq
 8000da6:	4770      	bxeq	lr
 8000da8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dac:	d502      	bpl.n	8000db4 <__aeabi_l2f+0x14>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	ea5f 0c01 	movs.w	ip, r1
 8000db8:	bf02      	ittt	eq
 8000dba:	4684      	moveq	ip, r0
 8000dbc:	4601      	moveq	r1, r0
 8000dbe:	2000      	moveq	r0, #0
 8000dc0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dc4:	bf08      	it	eq
 8000dc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dce:	fabc f28c 	clz	r2, ip
 8000dd2:	3a08      	subs	r2, #8
 8000dd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd8:	db10      	blt.n	8000dfc <__aeabi_l2f+0x5c>
 8000dda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dde:	4463      	add	r3, ip
 8000de0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dec:	fa20 f202 	lsr.w	r2, r0, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	f020 0001 	biceq.w	r0, r0, #1
 8000dfa:	4770      	bx	lr
 8000dfc:	f102 0220 	add.w	r2, r2, #32
 8000e00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e04:	f1c2 0220 	rsb	r2, r2, #32
 8000e08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e10:	eb43 0002 	adc.w	r0, r3, r2
 8000e14:	bf08      	it	eq
 8000e16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1a:	4770      	bx	lr

08000e1c <__aeabi_fmul>:
 8000e1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e24:	bf1e      	ittt	ne
 8000e26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2a:	ea92 0f0c 	teqne	r2, ip
 8000e2e:	ea93 0f0c 	teqne	r3, ip
 8000e32:	d06f      	beq.n	8000f14 <__aeabi_fmul+0xf8>
 8000e34:	441a      	add	r2, r3
 8000e36:	ea80 0c01 	eor.w	ip, r0, r1
 8000e3a:	0240      	lsls	r0, r0, #9
 8000e3c:	bf18      	it	ne
 8000e3e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e42:	d01e      	beq.n	8000e82 <__aeabi_fmul+0x66>
 8000e44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e48:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e4c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e50:	fba0 3101 	umull	r3, r1, r0, r1
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e5c:	bf3e      	ittt	cc
 8000e5e:	0049      	lslcc	r1, r1, #1
 8000e60:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e64:	005b      	lslcc	r3, r3, #1
 8000e66:	ea40 0001 	orr.w	r0, r0, r1
 8000e6a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e6e:	2afd      	cmp	r2, #253	; 0xfd
 8000e70:	d81d      	bhi.n	8000eae <__aeabi_fmul+0x92>
 8000e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7a:	bf08      	it	eq
 8000e7c:	f020 0001 	biceq.w	r0, r0, #1
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e8a:	bf08      	it	eq
 8000e8c:	0249      	lsleq	r1, r1, #9
 8000e8e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e92:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e96:	3a7f      	subs	r2, #127	; 0x7f
 8000e98:	bfc2      	ittt	gt
 8000e9a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e9e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea2:	4770      	bxgt	lr
 8000ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	3a01      	subs	r2, #1
 8000eae:	dc5d      	bgt.n	8000f6c <__aeabi_fmul+0x150>
 8000eb0:	f112 0f19 	cmn.w	r2, #25
 8000eb4:	bfdc      	itt	le
 8000eb6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eba:	4770      	bxle	lr
 8000ebc:	f1c2 0200 	rsb	r2, r2, #0
 8000ec0:	0041      	lsls	r1, r0, #1
 8000ec2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ec6:	f1c2 0220 	rsb	r2, r2, #32
 8000eca:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ece:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ed2:	f140 0000 	adc.w	r0, r0, #0
 8000ed6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eda:	bf08      	it	eq
 8000edc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee0:	4770      	bx	lr
 8000ee2:	f092 0f00 	teq	r2, #0
 8000ee6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0040      	lsleq	r0, r0, #1
 8000eee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ef2:	3a01      	subeq	r2, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fmul+0xce>
 8000ef6:	ea40 000c 	orr.w	r0, r0, ip
 8000efa:	f093 0f00 	teq	r3, #0
 8000efe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f02:	bf02      	ittt	eq
 8000f04:	0049      	lsleq	r1, r1, #1
 8000f06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f0a:	3b01      	subeq	r3, #1
 8000f0c:	d0f9      	beq.n	8000f02 <__aeabi_fmul+0xe6>
 8000f0e:	ea41 010c 	orr.w	r1, r1, ip
 8000f12:	e78f      	b.n	8000e34 <__aeabi_fmul+0x18>
 8000f14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f18:	ea92 0f0c 	teq	r2, ip
 8000f1c:	bf18      	it	ne
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d00a      	beq.n	8000f3a <__aeabi_fmul+0x11e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1d8      	bne.n	8000ee2 <__aeabi_fmul+0xc6>
 8000f30:	ea80 0001 	eor.w	r0, r0, r1
 8000f34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f38:	4770      	bx	lr
 8000f3a:	f090 0f00 	teq	r0, #0
 8000f3e:	bf17      	itett	ne
 8000f40:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f44:	4608      	moveq	r0, r1
 8000f46:	f091 0f00 	teqne	r1, #0
 8000f4a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f4e:	d014      	beq.n	8000f7a <__aeabi_fmul+0x15e>
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d101      	bne.n	8000f5a <__aeabi_fmul+0x13e>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	d10f      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f5a:	ea93 0f0c 	teq	r3, ip
 8000f5e:	d103      	bne.n	8000f68 <__aeabi_fmul+0x14c>
 8000f60:	024b      	lsls	r3, r1, #9
 8000f62:	bf18      	it	ne
 8000f64:	4608      	movne	r0, r1
 8000f66:	d108      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f78:	4770      	bx	lr
 8000f7a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f7e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_fdiv>:
 8000f84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f8c:	bf1e      	ittt	ne
 8000f8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f92:	ea92 0f0c 	teqne	r2, ip
 8000f96:	ea93 0f0c 	teqne	r3, ip
 8000f9a:	d069      	beq.n	8001070 <__aeabi_fdiv+0xec>
 8000f9c:	eba2 0203 	sub.w	r2, r2, r3
 8000fa0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fa4:	0249      	lsls	r1, r1, #9
 8000fa6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000faa:	d037      	beq.n	800101c <__aeabi_fdiv+0x98>
 8000fac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fb0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fb4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fbc:	428b      	cmp	r3, r1
 8000fbe:	bf38      	it	cc
 8000fc0:	005b      	lslcc	r3, r3, #1
 8000fc2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fc6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	bf24      	itt	cs
 8000fce:	1a5b      	subcs	r3, r3, r1
 8000fd0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fd4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd8:	bf24      	itt	cs
 8000fda:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fde:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fe2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fe6:	bf24      	itt	cs
 8000fe8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ff0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ff4:	bf24      	itt	cs
 8000ff6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ffa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	bf18      	it	ne
 8001002:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001006:	d1e0      	bne.n	8000fca <__aeabi_fdiv+0x46>
 8001008:	2afd      	cmp	r2, #253	; 0xfd
 800100a:	f63f af50 	bhi.w	8000eae <__aeabi_fmul+0x92>
 800100e:	428b      	cmp	r3, r1
 8001010:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001014:	bf08      	it	eq
 8001016:	f020 0001 	biceq.w	r0, r0, #1
 800101a:	4770      	bx	lr
 800101c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001020:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001024:	327f      	adds	r2, #127	; 0x7f
 8001026:	bfc2      	ittt	gt
 8001028:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800102c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001030:	4770      	bxgt	lr
 8001032:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	3a01      	subs	r2, #1
 800103c:	e737      	b.n	8000eae <__aeabi_fmul+0x92>
 800103e:	f092 0f00 	teq	r2, #0
 8001042:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001046:	bf02      	ittt	eq
 8001048:	0040      	lsleq	r0, r0, #1
 800104a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800104e:	3a01      	subeq	r2, #1
 8001050:	d0f9      	beq.n	8001046 <__aeabi_fdiv+0xc2>
 8001052:	ea40 000c 	orr.w	r0, r0, ip
 8001056:	f093 0f00 	teq	r3, #0
 800105a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800105e:	bf02      	ittt	eq
 8001060:	0049      	lsleq	r1, r1, #1
 8001062:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001066:	3b01      	subeq	r3, #1
 8001068:	d0f9      	beq.n	800105e <__aeabi_fdiv+0xda>
 800106a:	ea41 010c 	orr.w	r1, r1, ip
 800106e:	e795      	b.n	8000f9c <__aeabi_fdiv+0x18>
 8001070:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001074:	ea92 0f0c 	teq	r2, ip
 8001078:	d108      	bne.n	800108c <__aeabi_fdiv+0x108>
 800107a:	0242      	lsls	r2, r0, #9
 800107c:	f47f af7d 	bne.w	8000f7a <__aeabi_fmul+0x15e>
 8001080:	ea93 0f0c 	teq	r3, ip
 8001084:	f47f af70 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 8001088:	4608      	mov	r0, r1
 800108a:	e776      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800108c:	ea93 0f0c 	teq	r3, ip
 8001090:	d104      	bne.n	800109c <__aeabi_fdiv+0x118>
 8001092:	024b      	lsls	r3, r1, #9
 8001094:	f43f af4c 	beq.w	8000f30 <__aeabi_fmul+0x114>
 8001098:	4608      	mov	r0, r1
 800109a:	e76e      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800109c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010a0:	bf18      	it	ne
 80010a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010a6:	d1ca      	bne.n	800103e <__aeabi_fdiv+0xba>
 80010a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ac:	f47f af5c 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 80010b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010b4:	f47f af3c 	bne.w	8000f30 <__aeabi_fmul+0x114>
 80010b8:	e75f      	b.n	8000f7a <__aeabi_fmul+0x15e>
 80010ba:	bf00      	nop

080010bc <__aeabi_f2iz>:
 80010bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c4:	d30f      	bcc.n	80010e6 <__aeabi_f2iz+0x2a>
 80010c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ce:	d90d      	bls.n	80010ec <__aeabi_f2iz+0x30>
 80010d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010dc:	fa23 f002 	lsr.w	r0, r3, r2
 80010e0:	bf18      	it	ne
 80010e2:	4240      	negne	r0, r0
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0000 	mov.w	r0, #0
 80010ea:	4770      	bx	lr
 80010ec:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f0:	d101      	bne.n	80010f6 <__aeabi_f2iz+0x3a>
 80010f2:	0242      	lsls	r2, r0, #9
 80010f4:	d105      	bne.n	8001102 <__aeabi_f2iz+0x46>
 80010f6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fa:	bf08      	it	eq
 80010fc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001100:	4770      	bx	lr
 8001102:	f04f 0000 	mov.w	r0, #0
 8001106:	4770      	bx	lr

08001108 <Bsp_Led_Show_State_Handle>:


// LED显示当前运行状态，每10毫秒调用一次，LED灯每200毫秒闪烁一次。
// The LED displays the current operating status, which is invoked every 10 milliseconds, and the LED blinks every 200 milliseconds.  
void Bsp_Led_Show_State_Handle(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	static uint8_t led_count = 0;
	led_count++;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <Bsp_Led_Show_State_Handle+0x2c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	b2da      	uxtb	r2, r3
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <Bsp_Led_Show_State_Handle+0x2c>)
 8001116:	701a      	strb	r2, [r3, #0]
	if (led_count > 20)
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <Bsp_Led_Show_State_Handle+0x2c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b14      	cmp	r3, #20
 800111e:	d907      	bls.n	8001130 <Bsp_Led_Show_State_Handle+0x28>
	{
		led_count = 0;
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <Bsp_Led_Show_State_Handle+0x2c>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
		LED_TOGGLE();
 8001126:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800112a:	4803      	ldr	r0, [pc, #12]	; (8001138 <Bsp_Led_Show_State_Handle+0x30>)
 800112c:	f002 fb6b 	bl	8003806 <HAL_GPIO_TogglePin>
	}
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000200 	.word	0x20000200
 8001138:	40011000 	.word	0x40011000

0800113c <Bsp_Init>:


// The peripheral device is initialized  外设设备初始化
void Bsp_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	USART1_Init();
 8001140:	f001 f850 	bl	80021e4 <USART1_Init>
	ICM20948_init();
 8001144:	f000 fd44 	bl	8001bd0 <ICM20948_init>
	AK09916_init();
 8001148:	f000 fd70 	bl	8001c2c <AK09916_init>
	Beep_On_Time(50);
 800114c:	2032      	movs	r0, #50	; 0x32
 800114e:	f000 f85d 	bl	800120c <Beep_On_Time>
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <Bsp_Loop>:


// main.c中循环调用此函数，避免多次修改main.c文件。
// This function is called in a loop in main.c to avoid multiple modifications to the main.c file
void Bsp_Loop(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	// Detect button down events   检测按键按下事件
	if (Key1_State(KEY_MODE_ONE_TIME))
 800115c:	2001      	movs	r0, #1
 800115e:	f001 f817 	bl	8002190 <Key1_State>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d00d      	beq.n	8001184 <Bsp_Loop+0x2c>
	{
		Beep_On_Time(50);
 8001168:	2032      	movs	r0, #50	; 0x32
 800116a:	f000 f84f 	bl	800120c <Beep_On_Time>
		static int press = 0;
		press++;
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <Bsp_Loop+0x44>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	4a09      	ldr	r2, [pc, #36]	; (800119c <Bsp_Loop+0x44>)
 8001176:	6013      	str	r3, [r2, #0]
		printf("press:%d\n", press);
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <Bsp_Loop+0x44>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4619      	mov	r1, r3
 800117e:	4808      	ldr	r0, [pc, #32]	; (80011a0 <Bsp_Loop+0x48>)
 8001180:	f004 fffc 	bl	800617c <iprintf>
	}
	ICM20948_Read_Data_Handle();
 8001184:	f000 ff36 	bl	8001ff4 <ICM20948_Read_Data_Handle>

	Bsp_Led_Show_State_Handle();
 8001188:	f7ff ffbe 	bl	8001108 <Bsp_Led_Show_State_Handle>
	// The buzzer automatically shuts down when times out   蜂鸣器超时自动关闭
	Beep_Timeout_Close_Handle();
 800118c:	f000 f87e 	bl	800128c <Beep_Timeout_Close_Handle>
	HAL_Delay(10);
 8001190:	200a      	movs	r0, #10
 8001192:	f001 fc4d 	bl	8002a30 <HAL_Delay>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000204 	.word	0x20000204
 80011a0:	08008320 	.word	0x08008320

080011a4 <Beep_Set_Time>:
uint8_t beep_state = 0;

// 刷新蜂鸣器打开的时间
// Refreshes the buzzer time
static void Beep_Set_Time(uint16_t time)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	80fb      	strh	r3, [r7, #6]
	beep_on_time = time;
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <Beep_Set_Time+0x1c>)
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	8013      	strh	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000208 	.word	0x20000208

080011c4 <Beep_Get_Time>:

// 获取当前蜂鸣器打开的剩余时间
// Gets the remaining time of the current buzzer on
static uint16_t Beep_Get_Time(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
	return beep_on_time;
 80011c8:	4b02      	ldr	r3, [pc, #8]	; (80011d4 <Beep_Get_Time+0x10>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	20000208 	.word	0x20000208

080011d8 <Beep_Set_State>:

// 刷新蜂鸣器的状态
// Refreshes the buzzer status
static void Beep_Set_State(uint8_t state)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
	beep_state = state;
 80011e2:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <Beep_Set_State+0x1c>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	7013      	strb	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	2000020a 	.word	0x2000020a

080011f8 <Beep_Get_State>:

// 获取蜂鸣器的状态
// Gets the status of the buzzer
static uint8_t Beep_Get_State(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
	return beep_state;
 80011fc:	4b02      	ldr	r3, [pc, #8]	; (8001208 <Beep_Get_State+0x10>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	2000020a 	.word	0x2000020a

0800120c <Beep_On_Time>:

// 设置蜂鸣器开启时间，time=0时关闭，time=1时一直响，time>=10，延迟xx毫秒后自动关闭
// Set the buzzer start time. The buzzer is disabled when time is 0, keeps ringing when time is 1, and automatically shuts down after time>=10  
void Beep_On_Time(uint16_t time)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	80fb      	strh	r3, [r7, #6]
	if (time == BEEP_STATE_ON_ALWAYS)
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d10b      	bne.n	8001234 <Beep_On_Time+0x28>
	{
		Beep_Set_State(BEEP_STATE_ON_ALWAYS);
 800121c:	2001      	movs	r0, #1
 800121e:	f7ff ffdb 	bl	80011d8 <Beep_Set_State>
		Beep_Set_Time(0);
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff ffbe 	bl	80011a4 <Beep_Set_Time>
		BEEP_ON();
 8001228:	2201      	movs	r2, #1
 800122a:	2120      	movs	r1, #32
 800122c:	4815      	ldr	r0, [pc, #84]	; (8001284 <Beep_On_Time+0x78>)
 800122e:	f002 fad2 	bl	80037d6 <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
			Beep_Set_Time(time / 10);
			BEEP_ON();
		}
	}
}
 8001232:	e022      	b.n	800127a <Beep_On_Time+0x6e>
	else if (time == BEEP_STATE_OFF)
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10b      	bne.n	8001252 <Beep_On_Time+0x46>
		Beep_Set_State(BEEP_STATE_OFF);
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff ffcc 	bl	80011d8 <Beep_Set_State>
		Beep_Set_Time(0);
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff ffaf 	bl	80011a4 <Beep_Set_Time>
		BEEP_OFF();
 8001246:	2200      	movs	r2, #0
 8001248:	2120      	movs	r1, #32
 800124a:	480e      	ldr	r0, [pc, #56]	; (8001284 <Beep_On_Time+0x78>)
 800124c:	f002 fac3 	bl	80037d6 <HAL_GPIO_WritePin>
}
 8001250:	e013      	b.n	800127a <Beep_On_Time+0x6e>
		if (time >= 10)
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	2b09      	cmp	r3, #9
 8001256:	d910      	bls.n	800127a <Beep_On_Time+0x6e>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
 8001258:	2002      	movs	r0, #2
 800125a:	f7ff ffbd 	bl	80011d8 <Beep_Set_State>
			Beep_Set_Time(time / 10);
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	4a09      	ldr	r2, [pc, #36]	; (8001288 <Beep_On_Time+0x7c>)
 8001262:	fba2 2303 	umull	r2, r3, r2, r3
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	b29b      	uxth	r3, r3
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ff9a 	bl	80011a4 <Beep_Set_Time>
			BEEP_ON();
 8001270:	2201      	movs	r2, #1
 8001272:	2120      	movs	r1, #32
 8001274:	4803      	ldr	r0, [pc, #12]	; (8001284 <Beep_On_Time+0x78>)
 8001276:	f002 faae 	bl	80037d6 <HAL_GPIO_WritePin>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40011000 	.word	0x40011000
 8001288:	cccccccd 	.word	0xcccccccd

0800128c <Beep_Timeout_Close_Handle>:

// 蜂鸣器超时自动关闭程序, 10毫秒调用一次 
// Buzzer timeout automatically shut down the program, 10 milliseconds to call once
void Beep_Timeout_Close_Handle(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	if (Beep_Get_State() == BEEP_STATE_ON_DELAY)
 8001290:	f7ff ffb2 	bl	80011f8 <Beep_Get_State>
 8001294:	4603      	mov	r3, r0
 8001296:	2b02      	cmp	r3, #2
 8001298:	d113      	bne.n	80012c2 <Beep_Timeout_Close_Handle+0x36>
	{
		if (Beep_Get_Time())
 800129a:	f7ff ff93 	bl	80011c4 <Beep_Get_Time>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d006      	beq.n	80012b2 <Beep_Timeout_Close_Handle+0x26>
		{
			beep_on_time--;
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <Beep_Timeout_Close_Handle+0x3c>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	3b01      	subs	r3, #1
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <Beep_Timeout_Close_Handle+0x3c>)
 80012ae:	801a      	strh	r2, [r3, #0]
		{
			BEEP_OFF();
			Beep_Set_State(BEEP_STATE_OFF);
		}
	}
}
 80012b0:	e007      	b.n	80012c2 <Beep_Timeout_Close_Handle+0x36>
			BEEP_OFF();
 80012b2:	2200      	movs	r2, #0
 80012b4:	2120      	movs	r1, #32
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <Beep_Timeout_Close_Handle+0x40>)
 80012b8:	f002 fa8d 	bl	80037d6 <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_OFF);
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff ff8b 	bl	80011d8 <Beep_Set_State>
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000208 	.word	0x20000208
 80012cc:	40011000 	.word	0x40011000

080012d0 <ICM20948_NoActive>:
raw_data_t g_raw_mag;
uint16_t print_count = 0;


static void ICM20948_NoActive()
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012da:	4802      	ldr	r0, [pc, #8]	; (80012e4 <ICM20948_NoActive+0x14>)
 80012dc:	f002 fa7b 	bl	80037d6 <HAL_GPIO_WritePin>
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40010c00 	.word	0x40010c00

080012e8 <ICM20948_Active>:

static void ICM20948_Active()
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f2:	4802      	ldr	r0, [pc, #8]	; (80012fc <ICM20948_Active+0x14>)
 80012f4:	f002 fa6f 	bl	80037d6 <HAL_GPIO_WritePin>
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40010c00 	.word	0x40010c00

08001300 <select_user_bank>:

static void select_user_bank(userbank_t ub)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 800130a:	237f      	movs	r3, #127	; 0x7f
 800130c:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	737b      	strb	r3, [r7, #13]

	ICM20948_Active();
 8001312:	f7ff ffe9 	bl	80012e8 <ICM20948_Active>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 8001316:	f107 010c 	add.w	r1, r7, #12
 800131a:	230a      	movs	r3, #10
 800131c:	2202      	movs	r2, #2
 800131e:	4804      	ldr	r0, [pc, #16]	; (8001330 <select_user_bank+0x30>)
 8001320:	f002 ff1e 	bl	8004160 <HAL_SPI_Transmit>
	ICM20948_NoActive();
 8001324:	f7ff ffd4 	bl	80012d0 <ICM20948_NoActive>
}
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000254 	.word	0x20000254

08001334 <read_single_reg>:

static uint8_t read_single_reg(userbank_t ub, uint8_t reg)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	460a      	mov	r2, r1
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	4613      	mov	r3, r2
 8001342:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 8001344:	79bb      	ldrb	r3, [r7, #6]
 8001346:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800134a:	b2db      	uxtb	r3, r3
 800134c:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ffd5 	bl	8001300 <select_user_bank>

	ICM20948_Active();
 8001356:	f7ff ffc7 	bl	80012e8 <ICM20948_Active>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 800135a:	f107 010f 	add.w	r1, r7, #15
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	2201      	movs	r2, #1
 8001364:	4808      	ldr	r0, [pc, #32]	; (8001388 <read_single_reg+0x54>)
 8001366:	f002 fefb 	bl	8004160 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 800136a:	f107 010e 	add.w	r1, r7, #14
 800136e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001372:	2201      	movs	r2, #1
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <read_single_reg+0x54>)
 8001376:	f003 f836 	bl	80043e6 <HAL_SPI_Receive>
	ICM20948_NoActive();
 800137a:	f7ff ffa9 	bl	80012d0 <ICM20948_NoActive>
	return reg_val;
 800137e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000254 	.word	0x20000254

0800138c <write_single_reg>:

static void write_single_reg(userbank_t ub, uint8_t reg, uint8_t val)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
 8001396:	460b      	mov	r3, r1
 8001398:	71bb      	strb	r3, [r7, #6]
 800139a:	4613      	mov	r3, r2
 800139c:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 800139e:	79bb      	ldrb	r3, [r7, #6]
 80013a0:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 80013a2:	797b      	ldrb	r3, [r7, #5]
 80013a4:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ffa9 	bl	8001300 <select_user_bank>

	ICM20948_Active();
 80013ae:	f7ff ff9b 	bl	80012e8 <ICM20948_Active>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 80013b2:	f107 010c 	add.w	r1, r7, #12
 80013b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ba:	2202      	movs	r2, #2
 80013bc:	4804      	ldr	r0, [pc, #16]	; (80013d0 <write_single_reg+0x44>)
 80013be:	f002 fecf 	bl	8004160 <HAL_SPI_Transmit>
	ICM20948_NoActive();
 80013c2:	f7ff ff85 	bl	80012d0 <ICM20948_NoActive>
}
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000254 	.word	0x20000254

080013d4 <read_multiple_reg>:

static uint8_t* read_multiple_reg(userbank_t ub, uint8_t reg, uint8_t len)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
 80013de:	460b      	mov	r3, r1
 80013e0:	71bb      	strb	r3, [r7, #6]
 80013e2:	4613      	mov	r3, r2
 80013e4:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 80013e6:	79bb      	ldrb	r3, [r7, #6]
 80013e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff84 	bl	8001300 <select_user_bank>

	ICM20948_Active();
 80013f8:	f7ff ff76 	bl	80012e8 <ICM20948_Active>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 80013fc:	f107 010f 	add.w	r1, r7, #15
 8001400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001404:	2201      	movs	r2, #1
 8001406:	4809      	ldr	r0, [pc, #36]	; (800142c <read_multiple_reg+0x58>)
 8001408:	f002 feaa 	bl	8004160 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 800140c:	797b      	ldrb	r3, [r7, #5]
 800140e:	b29a      	uxth	r2, r3
 8001410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001414:	4906      	ldr	r1, [pc, #24]	; (8001430 <read_multiple_reg+0x5c>)
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <read_multiple_reg+0x58>)
 8001418:	f002 ffe5 	bl	80043e6 <HAL_SPI_Receive>
	ICM20948_NoActive();
 800141c:	f7ff ff58 	bl	80012d0 <ICM20948_NoActive>

	return reg_val;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <read_multiple_reg+0x5c>)
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000254 	.word	0x20000254
 8001430:	20000248 	.word	0x20000248

08001434 <write_multiple_reg>:

static void write_multiple_reg(userbank_t ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	603a      	str	r2, [r7, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
 8001442:	460b      	mov	r3, r1
 8001444:	71bb      	strb	r3, [r7, #6]
 8001446:	4613      	mov	r3, r2
 8001448:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg = WRITE | reg;
 800144a:	79bb      	ldrb	r3, [r7, #6]
 800144c:	73fb      	strb	r3, [r7, #15]
	select_user_bank(ub);
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff55 	bl	8001300 <select_user_bank>

	ICM20948_Active();
 8001456:	f7ff ff47 	bl	80012e8 <ICM20948_Active>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 800145a:	f107 010f 	add.w	r1, r7, #15
 800145e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001462:	2201      	movs	r2, #1
 8001464:	4808      	ldr	r0, [pc, #32]	; (8001488 <write_multiple_reg+0x54>)
 8001466:	f002 fe7b 	bl	8004160 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 800146a:	797b      	ldrb	r3, [r7, #5]
 800146c:	b29a      	uxth	r2, r3
 800146e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001472:	6839      	ldr	r1, [r7, #0]
 8001474:	4804      	ldr	r0, [pc, #16]	; (8001488 <write_multiple_reg+0x54>)
 8001476:	f002 fe73 	bl	8004160 <HAL_SPI_Transmit>
	ICM20948_NoActive();
 800147a:	f7ff ff29 	bl	80012d0 <ICM20948_NoActive>
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000254 	.word	0x20000254

0800148c <read_single_mag_reg>:

static uint8_t read_single_mag_reg(uint8_t reg)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
	write_single_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8001496:	228c      	movs	r2, #140	; 0x8c
 8001498:	2103      	movs	r1, #3
 800149a:	2030      	movs	r0, #48	; 0x30
 800149c:	f7ff ff76 	bl	800138c <write_single_reg>
	write_single_reg(ub_3, B3_I2C_SLV0_REG, reg);
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	461a      	mov	r2, r3
 80014a4:	2104      	movs	r1, #4
 80014a6:	2030      	movs	r0, #48	; 0x30
 80014a8:	f7ff ff70 	bl	800138c <write_single_reg>
	write_single_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 80014ac:	2281      	movs	r2, #129	; 0x81
 80014ae:	2105      	movs	r1, #5
 80014b0:	2030      	movs	r0, #48	; 0x30
 80014b2:	f7ff ff6b 	bl	800138c <write_single_reg>

	HAL_Delay(1);
 80014b6:	2001      	movs	r0, #1
 80014b8:	f001 faba 	bl	8002a30 <HAL_Delay>
	return read_single_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 80014bc:	213b      	movs	r1, #59	; 0x3b
 80014be:	2000      	movs	r0, #0
 80014c0:	f7ff ff38 	bl	8001334 <read_single_reg>
 80014c4:	4603      	mov	r3, r0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <write_single_mag_reg>:

static void write_single_mag_reg(uint8_t reg, uint8_t val)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	460a      	mov	r2, r1
 80014d8:	71fb      	strb	r3, [r7, #7]
 80014da:	4613      	mov	r3, r2
 80014dc:	71bb      	strb	r3, [r7, #6]
	write_single_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 80014de:	220c      	movs	r2, #12
 80014e0:	2103      	movs	r1, #3
 80014e2:	2030      	movs	r0, #48	; 0x30
 80014e4:	f7ff ff52 	bl	800138c <write_single_reg>
	write_single_reg(ub_3, B3_I2C_SLV0_REG, reg);
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	461a      	mov	r2, r3
 80014ec:	2104      	movs	r1, #4
 80014ee:	2030      	movs	r0, #48	; 0x30
 80014f0:	f7ff ff4c 	bl	800138c <write_single_reg>
	write_single_reg(ub_3, B3_I2C_SLV0_DO, val);
 80014f4:	79bb      	ldrb	r3, [r7, #6]
 80014f6:	461a      	mov	r2, r3
 80014f8:	2106      	movs	r1, #6
 80014fa:	2030      	movs	r0, #48	; 0x30
 80014fc:	f7ff ff46 	bl	800138c <write_single_reg>
	write_single_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8001500:	2281      	movs	r2, #129	; 0x81
 8001502:	2105      	movs	r1, #5
 8001504:	2030      	movs	r0, #48	; 0x30
 8001506:	f7ff ff41 	bl	800138c <write_single_reg>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <read_multiple_mag_reg>:

static uint8_t* read_multiple_mag_reg(uint8_t reg, uint8_t len)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	460a      	mov	r2, r1
 800151c:	71fb      	strb	r3, [r7, #7]
 800151e:	4613      	mov	r3, r2
 8001520:	71bb      	strb	r3, [r7, #6]
	write_single_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8001522:	228c      	movs	r2, #140	; 0x8c
 8001524:	2103      	movs	r1, #3
 8001526:	2030      	movs	r0, #48	; 0x30
 8001528:	f7ff ff30 	bl	800138c <write_single_reg>
	write_single_reg(ub_3, B3_I2C_SLV0_REG, reg);
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	461a      	mov	r2, r3
 8001530:	2104      	movs	r1, #4
 8001532:	2030      	movs	r0, #48	; 0x30
 8001534:	f7ff ff2a 	bl	800138c <write_single_reg>
	write_single_reg(ub_3, B3_I2C_SLV0_CTRL, 0x80 | len);
 8001538:	79bb      	ldrb	r3, [r7, #6]
 800153a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800153e:	b2db      	uxtb	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	2105      	movs	r1, #5
 8001544:	2030      	movs	r0, #48	; 0x30
 8001546:	f7ff ff21 	bl	800138c <write_single_reg>

	HAL_Delay(1);
 800154a:	2001      	movs	r0, #1
 800154c:	f001 fa70 	bl	8002a30 <HAL_Delay>
	return read_multiple_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
 8001550:	79bb      	ldrb	r3, [r7, #6]
 8001552:	461a      	mov	r2, r3
 8001554:	213b      	movs	r1, #59	; 0x3b
 8001556:	2000      	movs	r0, #0
 8001558:	f7ff ff3c 	bl	80013d4 <read_multiple_reg>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <ICM20948_device_reset>:


static void ICM20948_device_reset()
{
 8001566:	b580      	push	{r7, lr}
 8001568:	af00      	add	r7, sp, #0
	write_single_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 800156a:	22c1      	movs	r2, #193	; 0xc1
 800156c:	2106      	movs	r1, #6
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff ff0c 	bl	800138c <write_single_reg>
	HAL_Delay(100);
 8001574:	2064      	movs	r0, #100	; 0x64
 8001576:	f001 fa5b 	bl	8002a30 <HAL_Delay>
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}

0800157e <AK09916_soft_reset>:

static void AK09916_soft_reset()
{
 800157e:	b580      	push	{r7, lr}
 8001580:	af00      	add	r7, sp, #0
	write_single_mag_reg(MAG_CNTL3, 0x01);
 8001582:	2101      	movs	r1, #1
 8001584:	2032      	movs	r0, #50	; 0x32
 8001586:	f7ff ffa2 	bl	80014ce <write_single_mag_reg>
	HAL_Delay(100);
 800158a:	2064      	movs	r0, #100	; 0x64
 800158c:	f001 fa50 	bl	8002a30 <HAL_Delay>
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}

08001594 <ICM20948_wakeup>:

static void ICM20948_wakeup()
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_reg(ub_0, B0_PWR_MGMT_1);
 800159a:	2106      	movs	r1, #6
 800159c:	2000      	movs	r0, #0
 800159e:	f7ff fec9 	bl	8001334 <read_single_reg>
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015ac:	71fb      	strb	r3, [r7, #7]

	write_single_reg(ub_0, B0_PWR_MGMT_1, new_val);
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	461a      	mov	r2, r3
 80015b2:	2106      	movs	r1, #6
 80015b4:	2000      	movs	r0, #0
 80015b6:	f7ff fee9 	bl	800138c <write_single_reg>
	HAL_Delay(100);
 80015ba:	2064      	movs	r0, #100	; 0x64
 80015bc:	f001 fa38 	bl	8002a30 <HAL_Delay>
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <ICM20948_spi_slave_enable>:

static void ICM20948_spi_slave_enable()
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_reg(ub_0, B0_USER_CTRL);
 80015ce:	2103      	movs	r1, #3
 80015d0:	2000      	movs	r0, #0
 80015d2:	f7ff feaf 	bl	8001334 <read_single_reg>
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	f043 0310 	orr.w	r3, r3, #16
 80015e0:	71fb      	strb	r3, [r7, #7]

	write_single_reg(ub_0, B0_USER_CTRL, new_val);
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	461a      	mov	r2, r3
 80015e6:	2103      	movs	r1, #3
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff fecf 	bl	800138c <write_single_reg>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <ICM20948_i2c_master_reset>:

static void ICM20948_i2c_master_reset()
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_reg(ub_0, B0_USER_CTRL);
 80015fc:	2103      	movs	r1, #3
 80015fe:	2000      	movs	r0, #0
 8001600:	f7ff fe98 	bl	8001334 <read_single_reg>
 8001604:	4603      	mov	r3, r0
 8001606:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	f043 0302 	orr.w	r3, r3, #2
 800160e:	71fb      	strb	r3, [r7, #7]

	write_single_reg(ub_0, B0_USER_CTRL, new_val);
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	461a      	mov	r2, r3
 8001614:	2103      	movs	r1, #3
 8001616:	2000      	movs	r0, #0
 8001618:	f7ff feb8 	bl	800138c <write_single_reg>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <ICM20948_i2c_master_enable>:

static void ICM20948_i2c_master_enable()
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_reg(ub_0, B0_USER_CTRL);
 800162a:	2103      	movs	r1, #3
 800162c:	2000      	movs	r0, #0
 800162e:	f7ff fe81 	bl	8001334 <read_single_reg>
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	f043 0320 	orr.w	r3, r3, #32
 800163c:	71fb      	strb	r3, [r7, #7]

	write_single_reg(ub_0, B0_USER_CTRL, new_val);
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	461a      	mov	r2, r3
 8001642:	2103      	movs	r1, #3
 8001644:	2000      	movs	r0, #0
 8001646:	f7ff fea1 	bl	800138c <write_single_reg>
	HAL_Delay(100);
 800164a:	2064      	movs	r0, #100	; 0x64
 800164c:	f001 f9f0 	bl	8002a30 <HAL_Delay>
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <ICM20948_i2c_master_clk_frq>:

static void ICM20948_i2c_master_clk_frq(uint8_t config)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_reg(ub_3, B3_I2C_MST_CTRL);
 8001662:	2101      	movs	r1, #1
 8001664:	2030      	movs	r0, #48	; 0x30
 8001666:	f7ff fe65 	bl	8001334 <read_single_reg>
 800166a:	4603      	mov	r3, r0
 800166c:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	4313      	orrs	r3, r2
 8001674:	73fb      	strb	r3, [r7, #15]

	write_single_reg(ub_3, B3_I2C_MST_CTRL, new_val);
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	461a      	mov	r2, r3
 800167a:	2101      	movs	r1, #1
 800167c:	2030      	movs	r0, #48	; 0x30
 800167e:	f7ff fe85 	bl	800138c <write_single_reg>
}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <ICM20948_clock_source>:

static void ICM20948_clock_source(uint8_t source)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b084      	sub	sp, #16
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_reg(ub_0, B0_PWR_MGMT_1);
 8001694:	2106      	movs	r1, #6
 8001696:	2000      	movs	r0, #0
 8001698:	f7ff fe4c 	bl	8001334 <read_single_reg>
 800169c:	4603      	mov	r3, r0
 800169e:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 80016a0:	7bfa      	ldrb	r2, [r7, #15]
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	73fb      	strb	r3, [r7, #15]

	write_single_reg(ub_0, B0_PWR_MGMT_1, new_val);
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	461a      	mov	r2, r3
 80016ac:	2106      	movs	r1, #6
 80016ae:	2000      	movs	r0, #0
 80016b0:	f7ff fe6c 	bl	800138c <write_single_reg>
}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <ICM20948_odr_align_enable>:

static void ICM20948_odr_align_enable()
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	write_single_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2109      	movs	r1, #9
 80016c4:	2020      	movs	r0, #32
 80016c6:	f7ff fe61 	bl	800138c <write_single_reg>
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}

080016ce <ICM20948_gyro_low_pass_filter>:

static void ICM20948_gyro_low_pass_filter(uint8_t config)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b084      	sub	sp, #16
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_reg(ub_2, B2_GYRO_CONFIG_1);
 80016d8:	2101      	movs	r1, #1
 80016da:	2020      	movs	r0, #32
 80016dc:	f7ff fe2a 	bl	8001334 <read_single_reg>
 80016e0:	4603      	mov	r3, r0
 80016e2:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	b25a      	sxtb	r2, r3
 80016ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	73fb      	strb	r3, [r7, #15]

	write_single_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	461a      	mov	r2, r3
 80016f8:	2101      	movs	r1, #1
 80016fa:	2020      	movs	r0, #32
 80016fc:	f7ff fe46 	bl	800138c <write_single_reg>
}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <ICM20948_accel_low_pass_filter>:

static void ICM20948_accel_low_pass_filter(uint8_t config)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_reg(ub_2, B2_ACCEL_CONFIG);
 8001712:	2114      	movs	r1, #20
 8001714:	2020      	movs	r0, #32
 8001716:	f7ff fe0d 	bl	8001334 <read_single_reg>
 800171a:	4603      	mov	r3, r0
 800171c:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	b25a      	sxtb	r2, r3
 8001724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001728:	4313      	orrs	r3, r2
 800172a:	b25b      	sxtb	r3, r3
 800172c:	73fb      	strb	r3, [r7, #15]

	write_single_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	461a      	mov	r2, r3
 8001732:	2101      	movs	r1, #1
 8001734:	2020      	movs	r0, #32
 8001736:	f7ff fe29 	bl	800138c <write_single_reg>
}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <ICM20948_gyro_sample_rate_divider>:

static void ICM20948_gyro_sample_rate_divider(uint8_t divider)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	4603      	mov	r3, r0
 800174a:	71fb      	strb	r3, [r7, #7]
	write_single_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	461a      	mov	r2, r3
 8001750:	2100      	movs	r1, #0
 8001752:	2020      	movs	r0, #32
 8001754:	f7ff fe1a 	bl	800138c <write_single_reg>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <ICM20948_accel_sample_rate_divider>:

static void ICM20948_accel_sample_rate_divider(uint16_t divider)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	b29b      	uxth	r3, r3
 8001770:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	73bb      	strb	r3, [r7, #14]

	write_single_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	461a      	mov	r2, r3
 8001780:	2110      	movs	r1, #16
 8001782:	2020      	movs	r0, #32
 8001784:	f7ff fe02 	bl	800138c <write_single_reg>
	write_single_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8001788:	7bbb      	ldrb	r3, [r7, #14]
 800178a:	461a      	mov	r2, r3
 800178c:	2111      	movs	r1, #17
 800178e:	2020      	movs	r0, #32
 8001790:	f7ff fdfc 	bl	800138c <write_single_reg>
}
 8001794:	bf00      	nop
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <AK09916_operation_mode_setting>:

static void AK09916_operation_mode_setting(operation_mode_t mode)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
	write_single_mag_reg(MAG_CNTL2, mode);
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	4619      	mov	r1, r3
 80017aa:	2031      	movs	r0, #49	; 0x31
 80017ac:	f7ff fe8f 	bl	80014ce <write_single_mag_reg>
	HAL_Delay(100);
 80017b0:	2064      	movs	r0, #100	; 0x64
 80017b2:	f001 f93d 	bl	8002a30 <HAL_Delay>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <ICM20948_gyro_calibration>:

static void ICM20948_gyro_calibration()
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
	raw_data_t temp;
	int32_t gyro_bias[3] = {0};
 80017c6:	f107 0308 	add.w	r3, r7, #8
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 80017d2:	2300      	movs	r3, #0
 80017d4:	603b      	str	r3, [r7, #0]
 80017d6:	2300      	movs	r3, #0
 80017d8:	80bb      	strh	r3, [r7, #4]

	for(int i = 0; i < 100; i++)
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
 80017de:	e016      	b.n	800180e <ICM20948_gyro_calibration+0x4e>
	{
		ICM20948_gyro_read(&temp);
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 fa5f 	bl	8001ca8 <ICM20948_gyro_read>
		gyro_bias[0] += temp.x;
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80017f0:	4413      	add	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
		gyro_bias[1] += temp.y;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017fa:	4413      	add	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]
		gyro_bias[2] += temp.z;
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001804:	4413      	add	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 100; i++)
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	3301      	adds	r3, #1
 800180c:	61fb      	str	r3, [r7, #28]
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	2b63      	cmp	r3, #99	; 0x63
 8001812:	dde5      	ble.n	80017e0 <ICM20948_gyro_calibration+0x20>
	}

	gyro_bias[0] /= 100;
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4a2a      	ldr	r2, [pc, #168]	; (80018c0 <ICM20948_gyro_calibration+0x100>)
 8001818:	fb82 1203 	smull	r1, r2, r2, r3
 800181c:	1152      	asrs	r2, r2, #5
 800181e:	17db      	asrs	r3, r3, #31
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	60bb      	str	r3, [r7, #8]
	gyro_bias[1] /= 100;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4a26      	ldr	r2, [pc, #152]	; (80018c0 <ICM20948_gyro_calibration+0x100>)
 8001828:	fb82 1203 	smull	r1, r2, r2, r3
 800182c:	1152      	asrs	r2, r2, #5
 800182e:	17db      	asrs	r3, r3, #31
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	60fb      	str	r3, [r7, #12]
	gyro_bias[2] /= 100;
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4a22      	ldr	r2, [pc, #136]	; (80018c0 <ICM20948_gyro_calibration+0x100>)
 8001838:	fb82 1203 	smull	r1, r2, r2, r3
 800183c:	1152      	asrs	r2, r2, #5
 800183e:	17db      	asrs	r3, r3, #31
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	613b      	str	r3, [r7, #16]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF;
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	425b      	negs	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	da00      	bge.n	800184e <ICM20948_gyro_calibration+0x8e>
 800184c:	3303      	adds	r3, #3
 800184e:	109b      	asrs	r3, r3, #2
 8001850:	121b      	asrs	r3, r3, #8
 8001852:	b2db      	uxtb	r3, r3
 8001854:	703b      	strb	r3, [r7, #0]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	425b      	negs	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	da00      	bge.n	8001860 <ICM20948_gyro_calibration+0xa0>
 800185e:	3303      	adds	r3, #3
 8001860:	109b      	asrs	r3, r3, #2
 8001862:	b2db      	uxtb	r3, r3
 8001864:	707b      	strb	r3, [r7, #1]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	425b      	negs	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	da00      	bge.n	8001870 <ICM20948_gyro_calibration+0xb0>
 800186e:	3303      	adds	r3, #3
 8001870:	109b      	asrs	r3, r3, #2
 8001872:	121b      	asrs	r3, r3, #8
 8001874:	b2db      	uxtb	r3, r3
 8001876:	70bb      	strb	r3, [r7, #2]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	425b      	negs	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	da00      	bge.n	8001882 <ICM20948_gyro_calibration+0xc2>
 8001880:	3303      	adds	r3, #3
 8001882:	109b      	asrs	r3, r3, #2
 8001884:	b2db      	uxtb	r3, r3
 8001886:	70fb      	strb	r3, [r7, #3]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	425b      	negs	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	da00      	bge.n	8001892 <ICM20948_gyro_calibration+0xd2>
 8001890:	3303      	adds	r3, #3
 8001892:	109b      	asrs	r3, r3, #2
 8001894:	121b      	asrs	r3, r3, #8
 8001896:	b2db      	uxtb	r3, r3
 8001898:	713b      	strb	r3, [r7, #4]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	425b      	negs	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	da00      	bge.n	80018a4 <ICM20948_gyro_calibration+0xe4>
 80018a2:	3303      	adds	r3, #3
 80018a4:	109b      	asrs	r3, r3, #2
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	717b      	strb	r3, [r7, #5]

	write_multiple_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 80018aa:	463a      	mov	r2, r7
 80018ac:	2306      	movs	r3, #6
 80018ae:	2103      	movs	r1, #3
 80018b0:	2020      	movs	r0, #32
 80018b2:	f7ff fdbf 	bl	8001434 <write_multiple_reg>
}
 80018b6:	bf00      	nop
 80018b8:	3720      	adds	r7, #32
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	51eb851f 	.word	0x51eb851f

080018c4 <ICM20948_accel_calibration>:

static void ICM20948_accel_calibration()
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b090      	sub	sp, #64	; 0x40
 80018c8:	af00      	add	r7, sp, #0
	raw_data_t temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;

	int32_t accel_bias[3] = {0};
 80018ca:	f107 031c 	add.w	r3, r7, #28
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 80018d6:	f107 0310 	add.w	r3, r7, #16
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	2300      	movs	r3, #0
 80018e8:	81bb      	strh	r3, [r7, #12]

	for(int i = 0; i < 100; i++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018ee:	e016      	b.n	800191e <ICM20948_accel_calibration+0x5a>
	{
		ICM20948_accel_read(&temp);
 80018f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 fa0b 	bl	8001d10 <ICM20948_accel_read>
		accel_bias[0] += temp.x;
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8001900:	4413      	add	r3, r2
 8001902:	61fb      	str	r3, [r7, #28]
		accel_bias[1] += temp.y;
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800190a:	4413      	add	r3, r2
 800190c:	623b      	str	r3, [r7, #32]
		accel_bias[2] += temp.z;
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8001914:	4413      	add	r3, r2
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < 100; i++)
 8001918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800191a:	3301      	adds	r3, #1
 800191c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800191e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001920:	2b63      	cmp	r3, #99	; 0x63
 8001922:	dde5      	ble.n	80018f0 <ICM20948_accel_calibration+0x2c>
	}

	accel_bias[0] /= 100;
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	4a60      	ldr	r2, [pc, #384]	; (8001aa8 <ICM20948_accel_calibration+0x1e4>)
 8001928:	fb82 1203 	smull	r1, r2, r2, r3
 800192c:	1152      	asrs	r2, r2, #5
 800192e:	17db      	asrs	r3, r3, #31
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	61fb      	str	r3, [r7, #28]
	accel_bias[1] /= 100;
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	4a5c      	ldr	r2, [pc, #368]	; (8001aa8 <ICM20948_accel_calibration+0x1e4>)
 8001938:	fb82 1203 	smull	r1, r2, r2, r3
 800193c:	1152      	asrs	r2, r2, #5
 800193e:	17db      	asrs	r3, r3, #31
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	623b      	str	r3, [r7, #32]
	accel_bias[2] /= 100;
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	4a58      	ldr	r2, [pc, #352]	; (8001aa8 <ICM20948_accel_calibration+0x1e4>)
 8001948:	fb82 1203 	smull	r1, r2, r2, r3
 800194c:	1152      	asrs	r2, r2, #5
 800194e:	17db      	asrs	r3, r3, #31
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t mask_bit[3] = {0, 0, 0};
 8001954:	4a55      	ldr	r2, [pc, #340]	; (8001aac <ICM20948_accel_calibration+0x1e8>)
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	4611      	mov	r1, r2
 800195c:	8019      	strh	r1, [r3, #0]
 800195e:	3302      	adds	r3, #2
 8001960:	0c12      	lsrs	r2, r2, #16
 8001962:	701a      	strb	r2, [r3, #0]

	temp2 = read_multiple_reg(ub_1, B1_XA_OFFS_H, 2);
 8001964:	2202      	movs	r2, #2
 8001966:	2114      	movs	r1, #20
 8001968:	2010      	movs	r0, #16
 800196a:	f7ff fd33 	bl	80013d4 <read_multiple_reg>
 800196e:	63b8      	str	r0, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 8001970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	021b      	lsls	r3, r3, #8
 8001976:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001978:	3201      	adds	r2, #1
 800197a:	7812      	ldrb	r2, [r2, #0]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
	mask_bit[0] = temp2[1] & 0x01;
 8001980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001982:	3301      	adds	r3, #1
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	b2db      	uxtb	r3, r3
 800198c:	713b      	strb	r3, [r7, #4]

	temp3 = read_multiple_reg(ub_1, B1_YA_OFFS_H, 2);
 800198e:	2202      	movs	r2, #2
 8001990:	2117      	movs	r1, #23
 8001992:	2010      	movs	r0, #16
 8001994:	f7ff fd1e 	bl	80013d4 <read_multiple_reg>
 8001998:	6378      	str	r0, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 800199a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	021b      	lsls	r3, r3, #8
 80019a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019a2:	3201      	adds	r2, #1
 80019a4:	7812      	ldrb	r2, [r2, #0]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	617b      	str	r3, [r7, #20]
	mask_bit[1] = temp3[1] & 0x01;
 80019aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ac:	3301      	adds	r3, #1
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	717b      	strb	r3, [r7, #5]

	temp4 = read_multiple_reg(ub_1, B1_ZA_OFFS_H, 2);
 80019b8:	2202      	movs	r2, #2
 80019ba:	211a      	movs	r1, #26
 80019bc:	2010      	movs	r0, #16
 80019be:	f7ff fd09 	bl	80013d4 <read_multiple_reg>
 80019c2:	6338      	str	r0, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 80019c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019cc:	3201      	adds	r2, #1
 80019ce:	7812      	ldrb	r2, [r2, #0]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
	mask_bit[2] = temp4[1] & 0x01;
 80019d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d6:	3301      	adds	r3, #1
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	71bb      	strb	r3, [r7, #6]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	da00      	bge.n	80019ec <ICM20948_accel_calibration+0x128>
 80019ea:	3307      	adds	r3, #7
 80019ec:	10db      	asrs	r3, r3, #3
 80019ee:	425b      	negs	r3, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	da00      	bge.n	80019fe <ICM20948_accel_calibration+0x13a>
 80019fc:	3307      	adds	r3, #7
 80019fe:	10db      	asrs	r3, r3, #3
 8001a00:	425b      	negs	r3, r3
 8001a02:	4413      	add	r3, r2
 8001a04:	617b      	str	r3, [r7, #20]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	da00      	bge.n	8001a10 <ICM20948_accel_calibration+0x14c>
 8001a0e:	3307      	adds	r3, #7
 8001a10:	10db      	asrs	r3, r3, #3
 8001a12:	425b      	negs	r3, r3
 8001a14:	4413      	add	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	121b      	asrs	r3, r3, #8
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	723b      	strb	r3, [r7, #8]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	727b      	strb	r3, [r7, #9]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 8001a2c:	7a7a      	ldrb	r2, [r7, #9]
 8001a2e:	793b      	ldrb	r3, [r7, #4]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	727b      	strb	r3, [r7, #9]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	121b      	asrs	r3, r3, #8
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	72bb      	strb	r3, [r7, #10]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	f023 0301 	bic.w	r3, r3, #1
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	72fb      	strb	r3, [r7, #11]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 8001a4a:	7afa      	ldrb	r2, [r7, #11]
 8001a4c:	797b      	ldrb	r3, [r7, #5]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	72fb      	strb	r3, [r7, #11]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	121b      	asrs	r3, r3, #8
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	733b      	strb	r3, [r7, #12]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	f023 0301 	bic.w	r3, r3, #1
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	737b      	strb	r3, [r7, #13]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 8001a68:	7b7a      	ldrb	r2, [r7, #13]
 8001a6a:	79bb      	ldrb	r3, [r7, #6]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	737b      	strb	r3, [r7, #13]

	write_multiple_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 8001a72:	f107 0208 	add.w	r2, r7, #8
 8001a76:	2302      	movs	r3, #2
 8001a78:	2114      	movs	r1, #20
 8001a7a:	2010      	movs	r0, #16
 8001a7c:	f7ff fcda 	bl	8001434 <write_multiple_reg>
	write_multiple_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 8001a80:	f107 0308 	add.w	r3, r7, #8
 8001a84:	1c9a      	adds	r2, r3, #2
 8001a86:	2302      	movs	r3, #2
 8001a88:	2117      	movs	r1, #23
 8001a8a:	2010      	movs	r0, #16
 8001a8c:	f7ff fcd2 	bl	8001434 <write_multiple_reg>
	write_multiple_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	1d1a      	adds	r2, r3, #4
 8001a96:	2302      	movs	r3, #2
 8001a98:	211a      	movs	r1, #26
 8001a9a:	2010      	movs	r0, #16
 8001a9c:	f7ff fcca 	bl	8001434 <write_multiple_reg>
}
 8001aa0:	bf00      	nop
 8001aa2:	3740      	adds	r7, #64	; 0x40
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	51eb851f 	.word	0x51eb851f
 8001aac:	0800832c 	.word	0x0800832c

08001ab0 <ICM20948_gyro_full_scale_select>:

static void ICM20948_gyro_full_scale_select(gyro_scale_t full_scale)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_reg(ub_2, B2_GYRO_CONFIG_1);
 8001aba:	2101      	movs	r1, #1
 8001abc:	2020      	movs	r0, #32
 8001abe:	f7ff fc39 	bl	8001334 <read_single_reg>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	73fb      	strb	r3, [r7, #15]

	switch(full_scale)
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d827      	bhi.n	8001b1c <ICM20948_gyro_full_scale_select+0x6c>
 8001acc:	a201      	add	r2, pc, #4	; (adr r2, 8001ad4 <ICM20948_gyro_full_scale_select+0x24>)
 8001ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad2:	bf00      	nop
 8001ad4:	08001ae5 	.word	0x08001ae5
 8001ad8:	08001aed 	.word	0x08001aed
 8001adc:	08001afd 	.word	0x08001afd
 8001ae0:	08001b0d 	.word	0x08001b0d
	{
		case _250dps :
			new_val |= 0x00;
			g_scale_gyro = 131.0;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <ICM20948_gyro_full_scale_select+0x80>)
 8001ae6:	4a13      	ldr	r2, [pc, #76]	; (8001b34 <ICM20948_gyro_full_scale_select+0x84>)
 8001ae8:	601a      	str	r2, [r3, #0]
			break;
 8001aea:	e017      	b.n	8001b1c <ICM20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	f043 0302 	orr.w	r3, r3, #2
 8001af2:	73fb      	strb	r3, [r7, #15]
			g_scale_gyro = 65.5;
 8001af4:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <ICM20948_gyro_full_scale_select+0x80>)
 8001af6:	4a10      	ldr	r2, [pc, #64]	; (8001b38 <ICM20948_gyro_full_scale_select+0x88>)
 8001af8:	601a      	str	r2, [r3, #0]
			break;
 8001afa:	e00f      	b.n	8001b1c <ICM20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	73fb      	strb	r3, [r7, #15]
			g_scale_gyro = 32.8;
 8001b04:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <ICM20948_gyro_full_scale_select+0x80>)
 8001b06:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <ICM20948_gyro_full_scale_select+0x8c>)
 8001b08:	601a      	str	r2, [r3, #0]
			break;
 8001b0a:	e007      	b.n	8001b1c <ICM20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	f043 0306 	orr.w	r3, r3, #6
 8001b12:	73fb      	strb	r3, [r7, #15]
			g_scale_gyro = 16.4;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <ICM20948_gyro_full_scale_select+0x80>)
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <ICM20948_gyro_full_scale_select+0x90>)
 8001b18:	601a      	str	r2, [r3, #0]
			break;
 8001b1a:	bf00      	nop
	}

	write_single_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	2101      	movs	r1, #1
 8001b22:	2020      	movs	r0, #32
 8001b24:	f7ff fc32 	bl	800138c <write_single_reg>
}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000000 	.word	0x20000000
 8001b34:	43030000 	.word	0x43030000
 8001b38:	42830000 	.word	0x42830000
 8001b3c:	42033333 	.word	0x42033333
 8001b40:	41833333 	.word	0x41833333

08001b44 <ICM20948_accel_full_scale_select>:

static void ICM20948_accel_full_scale_select(accel_scale_t full_scale)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_reg(ub_2, B2_ACCEL_CONFIG);
 8001b4e:	2114      	movs	r1, #20
 8001b50:	2020      	movs	r0, #32
 8001b52:	f7ff fbef 	bl	8001334 <read_single_reg>
 8001b56:	4603      	mov	r3, r0
 8001b58:	73fb      	strb	r3, [r7, #15]

	switch(full_scale)
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d82b      	bhi.n	8001bb8 <ICM20948_accel_full_scale_select+0x74>
 8001b60:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <ICM20948_accel_full_scale_select+0x24>)
 8001b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b66:	bf00      	nop
 8001b68:	08001b79 	.word	0x08001b79
 8001b6c:	08001b83 	.word	0x08001b83
 8001b70:	08001b95 	.word	0x08001b95
 8001b74:	08001ba7 	.word	0x08001ba7
	{
		case _2g :
			new_val |= 0x00;
			g_scale_accel = 16384;
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <ICM20948_accel_full_scale_select+0x88>)
 8001b7a:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8001b7e:	601a      	str	r2, [r3, #0]
			break;
 8001b80:	e01a      	b.n	8001bb8 <ICM20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	73fb      	strb	r3, [r7, #15]
			g_scale_accel = 8192;
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <ICM20948_accel_full_scale_select+0x88>)
 8001b8c:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001b90:	601a      	str	r2, [r3, #0]
			break;
 8001b92:	e011      	b.n	8001bb8 <ICM20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	f043 0304 	orr.w	r3, r3, #4
 8001b9a:	73fb      	strb	r3, [r7, #15]
			g_scale_accel = 4096;
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <ICM20948_accel_full_scale_select+0x88>)
 8001b9e:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8001ba2:	601a      	str	r2, [r3, #0]
			break;
 8001ba4:	e008      	b.n	8001bb8 <ICM20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	f043 0306 	orr.w	r3, r3, #6
 8001bac:	73fb      	strb	r3, [r7, #15]
			g_scale_accel = 2048;
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <ICM20948_accel_full_scale_select+0x88>)
 8001bb0:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001bb4:	601a      	str	r2, [r3, #0]
			break;
 8001bb6:	bf00      	nop
	}

	write_single_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2114      	movs	r1, #20
 8001bbe:	2020      	movs	r0, #32
 8001bc0:	f7ff fbe4 	bl	800138c <write_single_reg>
}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000004 	.word	0x20000004

08001bd0 <ICM20948_init>:




void ICM20948_init()
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	while(!ICM20948_who_am_i());
 8001bd4:	bf00      	nop
 8001bd6:	f000 f842 	bl	8001c5e <ICM20948_who_am_i>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f083 0301 	eor.w	r3, r3, #1
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f7      	bne.n	8001bd6 <ICM20948_init+0x6>

	ICM20948_device_reset();
 8001be6:	f7ff fcbe 	bl	8001566 <ICM20948_device_reset>
	ICM20948_wakeup();
 8001bea:	f7ff fcd3 	bl	8001594 <ICM20948_wakeup>

	ICM20948_clock_source(1);
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f7ff fd4b 	bl	800168a <ICM20948_clock_source>
	ICM20948_odr_align_enable();
 8001bf4:	f7ff fd62 	bl	80016bc <ICM20948_odr_align_enable>

	ICM20948_spi_slave_enable();
 8001bf8:	f7ff fce6 	bl	80015c8 <ICM20948_spi_slave_enable>

	ICM20948_gyro_low_pass_filter(0);
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f7ff fd66 	bl	80016ce <ICM20948_gyro_low_pass_filter>
	ICM20948_accel_low_pass_filter(0);
 8001c02:	2000      	movs	r0, #0
 8001c04:	f7ff fd80 	bl	8001708 <ICM20948_accel_low_pass_filter>

	ICM20948_gyro_sample_rate_divider(0);
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f7ff fd9a 	bl	8001742 <ICM20948_gyro_sample_rate_divider>
	ICM20948_accel_sample_rate_divider(0);
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f7ff fda6 	bl	8001760 <ICM20948_accel_sample_rate_divider>

	ICM20948_gyro_calibration();
 8001c14:	f7ff fdd4 	bl	80017c0 <ICM20948_gyro_calibration>
	ICM20948_accel_calibration();
 8001c18:	f7ff fe54 	bl	80018c4 <ICM20948_accel_calibration>

	ICM20948_gyro_full_scale_select(_2000dps);
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f7ff ff47 	bl	8001ab0 <ICM20948_gyro_full_scale_select>
	ICM20948_accel_full_scale_select(_16g);
 8001c22:	2003      	movs	r0, #3
 8001c24:	f7ff ff8e 	bl	8001b44 <ICM20948_accel_full_scale_select>
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <AK09916_init>:

void AK09916_init()
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
	ICM20948_i2c_master_reset();
 8001c30:	f7ff fce1 	bl	80015f6 <ICM20948_i2c_master_reset>
	ICM20948_i2c_master_enable();
 8001c34:	f7ff fcf6 	bl	8001624 <ICM20948_i2c_master_enable>
	ICM20948_i2c_master_clk_frq(7);
 8001c38:	2007      	movs	r0, #7
 8001c3a:	f7ff fd0d 	bl	8001658 <ICM20948_i2c_master_clk_frq>

	while(!AK09916_who_am_i());
 8001c3e:	bf00      	nop
 8001c40:	f000 f820 	bl	8001c84 <AK09916_who_am_i>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f083 0301 	eor.w	r3, r3, #1
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f7      	bne.n	8001c40 <AK09916_init+0x14>

	AK09916_soft_reset();
 8001c50:	f7ff fc95 	bl	800157e <AK09916_soft_reset>
	AK09916_operation_mode_setting(continuous_measurement_100hz);
 8001c54:	2008      	movs	r0, #8
 8001c56:	f7ff fda1 	bl	800179c <AK09916_operation_mode_setting>
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <ICM20948_who_am_i>:

bool ICM20948_who_am_i()
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
	uint8_t ICM20948_id = read_single_reg(ub_0, B0_WHO_AM_I);
 8001c64:	2100      	movs	r1, #0
 8001c66:	2000      	movs	r0, #0
 8001c68:	f7ff fb64 	bl	8001334 <read_single_reg>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	71fb      	strb	r3, [r7, #7]

	if(ICM20948_id == ICM20948_ID)
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	2bea      	cmp	r3, #234	; 0xea
 8001c74:	d101      	bne.n	8001c7a <ICM20948_who_am_i+0x1c>
		return true;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <ICM20948_who_am_i+0x1e>
	else
		return false;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <AK09916_who_am_i>:

bool AK09916_who_am_i()
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
	uint8_t AK09916_id = read_single_mag_reg(MAG_WIA2);
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f7ff fbfe 	bl	800148c <read_single_mag_reg>
 8001c90:	4603      	mov	r3, r0
 8001c92:	71fb      	strb	r3, [r7, #7]

	if(AK09916_id == AK09916_ID)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	2b09      	cmp	r3, #9
 8001c98:	d101      	bne.n	8001c9e <AK09916_who_am_i+0x1a>
		return true;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <AK09916_who_am_i+0x1c>
	else
		return false;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <ICM20948_gyro_read>:

void ICM20948_gyro_read(raw_data_t* data)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8001cb0:	2206      	movs	r2, #6
 8001cb2:	2133      	movs	r1, #51	; 0x33
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7ff fb8d 	bl	80013d4 <read_multiple_reg>
 8001cba:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	b21a      	sxth	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	b21a      	sxth	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	801a      	strh	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	021b      	lsls	r3, r3, #8
 8001cdc:	b21a      	sxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3303      	adds	r3, #3
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	b21a      	sxth	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	805a      	strh	r2, [r3, #2]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	b21a      	sxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	3305      	adds	r3, #5
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	4313      	orrs	r3, r2
 8001d02:	b21a      	sxth	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	809a      	strh	r2, [r3, #4]
}
 8001d08:	bf00      	nop
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <ICM20948_accel_read>:

void ICM20948_accel_read(raw_data_t* data)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8001d18:	2206      	movs	r2, #6
 8001d1a:	212d      	movs	r1, #45	; 0x2d
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f7ff fb59 	bl	80013d4 <read_multiple_reg>
 8001d22:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	021b      	lsls	r3, r3, #8
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	4313      	orrs	r3, r2
 8001d36:	b21a      	sxth	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	801a      	strh	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	3302      	adds	r3, #2
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	b21a      	sxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3303      	adds	r3, #3
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	b21b      	sxth	r3, r3
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	b21a      	sxth	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	805a      	strh	r2, [r3, #2]
	// data->z = (int16_t)(temp[4] << 8 | temp[5]);
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + g_scale_accel;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	b21a      	sxth	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3305      	adds	r3, #5
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff f801 	bl	8000d74 <__aeabi_i2f>
 8001d72:	4602      	mov	r2, r0
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <ICM20948_accel_read+0x88>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	f7fe ff46 	bl	8000c0c <__addsf3>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff f99a 	bl	80010bc <__aeabi_f2iz>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	b21a      	sxth	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	809a      	strh	r2, [r3, #4]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000004 	.word	0x20000004

08001d9c <AK09916_mag_read>:

bool AK09916_mag_read(raw_data_t* data)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	uint8_t* temp;
	uint8_t drdy, hofl;

	drdy = read_single_mag_reg(MAG_ST1) & 0x01;
 8001da4:	2010      	movs	r0, #16
 8001da6:	f7ff fb71 	bl	800148c <read_single_mag_reg>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	75fb      	strb	r3, [r7, #23]
	if(!drdy)	return false;
 8001db2:	7dfb      	ldrb	r3, [r7, #23]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <AK09916_mag_read+0x20>
 8001db8:	2300      	movs	r3, #0
 8001dba:	e037      	b.n	8001e2c <AK09916_mag_read+0x90>

	temp = read_multiple_mag_reg(MAG_HXL, 6);
 8001dbc:	2106      	movs	r1, #6
 8001dbe:	2011      	movs	r0, #17
 8001dc0:	f7ff fba7 	bl	8001512 <read_multiple_mag_reg>
 8001dc4:	6138      	str	r0, [r7, #16]

	hofl = read_single_mag_reg(MAG_ST2) & 0x08;
 8001dc6:	2018      	movs	r0, #24
 8001dc8:	f7ff fb60 	bl	800148c <read_single_mag_reg>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	73fb      	strb	r3, [r7, #15]
	if(hofl)	return false;
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <AK09916_mag_read+0x42>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e026      	b.n	8001e2c <AK09916_mag_read+0x90>

	data->x = (int16_t)(temp[1] << 8 | temp[0]);
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	3301      	adds	r3, #1
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	b21a      	sxth	r2, r3
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	b21b      	sxth	r3, r3
 8001dee:	4313      	orrs	r3, r2
 8001df0:	b21a      	sxth	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	801a      	strh	r2, [r3, #0]
	data->y = (int16_t)(temp[3] << 8 | temp[2]);
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	3303      	adds	r3, #3
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	b21a      	sxth	r2, r3
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	3302      	adds	r3, #2
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	b21b      	sxth	r3, r3
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	b21a      	sxth	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	805a      	strh	r2, [r3, #2]
	data->z = (int16_t)(temp[5] << 8 | temp[4]);
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	3305      	adds	r3, #5
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	b21a      	sxth	r2, r3
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	4313      	orrs	r3, r2
 8001e24:	b21a      	sxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	809a      	strh	r2, [r3, #4]

	return true;
 8001e2a:	2301      	movs	r3, #1
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <ICM20948_gyro_read_dps>:

void ICM20948_gyro_read_dps(axises_t* data)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	ICM20948_gyro_read(&g_raw_gyro);
 8001e3c:	481c      	ldr	r0, [pc, #112]	; (8001eb0 <ICM20948_gyro_read_dps+0x7c>)
 8001e3e:	f7ff ff33 	bl	8001ca8 <ICM20948_gyro_read>

	data->x = (float)(g_raw_gyro.x / g_scale_gyro);
 8001e42:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <ICM20948_gyro_read_dps+0x7c>)
 8001e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe ff93 	bl	8000d74 <__aeabi_i2f>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <ICM20948_gyro_read_dps+0x80>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	4610      	mov	r0, r2
 8001e58:	f7ff f894 	bl	8000f84 <__aeabi_fdiv>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	461a      	mov	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	601a      	str	r2, [r3, #0]
	data->y = (float)(g_raw_gyro.y / g_scale_gyro);
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <ICM20948_gyro_read_dps+0x7c>)
 8001e66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe ff82 	bl	8000d74 <__aeabi_i2f>
 8001e70:	4602      	mov	r2, r0
 8001e72:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <ICM20948_gyro_read_dps+0x80>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4619      	mov	r1, r3
 8001e78:	4610      	mov	r0, r2
 8001e7a:	f7ff f883 	bl	8000f84 <__aeabi_fdiv>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461a      	mov	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	605a      	str	r2, [r3, #4]
	data->z = (float)(g_raw_gyro.z / g_scale_gyro);
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <ICM20948_gyro_read_dps+0x7c>)
 8001e88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe ff71 	bl	8000d74 <__aeabi_i2f>
 8001e92:	4602      	mov	r2, r0
 8001e94:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <ICM20948_gyro_read_dps+0x80>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	f7ff f872 	bl	8000f84 <__aeabi_fdiv>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000230 	.word	0x20000230
 8001eb4:	20000000 	.word	0x20000000

08001eb8 <ICM20948_accel_read_g>:

void ICM20948_accel_read_g(axises_t* data)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	ICM20948_accel_read(&g_raw_accel);
 8001ec0:	481c      	ldr	r0, [pc, #112]	; (8001f34 <ICM20948_accel_read_g+0x7c>)
 8001ec2:	f7ff ff25 	bl	8001d10 <ICM20948_accel_read>

	data->x = (float)(g_raw_accel.x / g_scale_accel);
 8001ec6:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <ICM20948_accel_read_g+0x7c>)
 8001ec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe ff51 	bl	8000d74 <__aeabi_i2f>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <ICM20948_accel_read_g+0x80>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4610      	mov	r0, r2
 8001edc:	f7ff f852 	bl	8000f84 <__aeabi_fdiv>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	601a      	str	r2, [r3, #0]
	data->y = (float)(g_raw_accel.y / g_scale_accel);
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <ICM20948_accel_read_g+0x7c>)
 8001eea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe ff40 	bl	8000d74 <__aeabi_i2f>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <ICM20948_accel_read_g+0x80>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4619      	mov	r1, r3
 8001efc:	4610      	mov	r0, r2
 8001efe:	f7ff f841 	bl	8000f84 <__aeabi_fdiv>
 8001f02:	4603      	mov	r3, r0
 8001f04:	461a      	mov	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	605a      	str	r2, [r3, #4]
	data->z = (float)(g_raw_accel.z / g_scale_accel);
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <ICM20948_accel_read_g+0x7c>)
 8001f0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe ff2f 	bl	8000d74 <__aeabi_i2f>
 8001f16:	4602      	mov	r2, r0
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <ICM20948_accel_read_g+0x80>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4610      	mov	r0, r2
 8001f20:	f7ff f830 	bl	8000f84 <__aeabi_fdiv>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461a      	mov	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000238 	.word	0x20000238
 8001f38:	20000004 	.word	0x20000004
 8001f3c:	00000000 	.word	0x00000000

08001f40 <AK09916_mag_read_uT>:

bool AK09916_mag_read_uT(axises_t* data)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	bool new_data = AK09916_mag_read(&g_raw_mag);
 8001f48:	4829      	ldr	r0, [pc, #164]	; (8001ff0 <AK09916_mag_read_uT+0xb0>)
 8001f4a:	f7ff ff27 	bl	8001d9c <AK09916_mag_read>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	73fb      	strb	r3, [r7, #15]
	if(!new_data)	return false;
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	f083 0301 	eor.w	r3, r3, #1
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <AK09916_mag_read_uT+0x22>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e03c      	b.n	8001fdc <AK09916_mag_read_uT+0x9c>

	data->x = (float)(g_raw_mag.x * 0.15);
 8001f62:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <AK09916_mag_read_uT+0xb0>)
 8001f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fab7 	bl	80004dc <__aeabi_i2d>
 8001f6e:	a31e      	add	r3, pc, #120	; (adr r3, 8001fe8 <AK09916_mag_read_uT+0xa8>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	f7fe fb1c 	bl	80005b0 <__aeabi_dmul>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7fe fdee 	bl	8000b60 <__aeabi_d2f>
 8001f84:	4602      	mov	r2, r0
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	601a      	str	r2, [r3, #0]
	data->y = (float)(g_raw_mag.y * 0.15);
 8001f8a:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <AK09916_mag_read_uT+0xb0>)
 8001f8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe faa3 	bl	80004dc <__aeabi_i2d>
 8001f96:	a314      	add	r3, pc, #80	; (adr r3, 8001fe8 <AK09916_mag_read_uT+0xa8>)
 8001f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9c:	f7fe fb08 	bl	80005b0 <__aeabi_dmul>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f7fe fdda 	bl	8000b60 <__aeabi_d2f>
 8001fac:	4602      	mov	r2, r0
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	605a      	str	r2, [r3, #4]
	data->z = (float)(g_raw_mag.z * 0.15);
 8001fb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <AK09916_mag_read_uT+0xb0>)
 8001fb4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fa8f 	bl	80004dc <__aeabi_i2d>
 8001fbe:	a30a      	add	r3, pc, #40	; (adr r3, 8001fe8 <AK09916_mag_read_uT+0xa8>)
 8001fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc4:	f7fe faf4 	bl	80005b0 <__aeabi_dmul>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f7fe fdc6 	bl	8000b60 <__aeabi_d2f>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
	return true;
 8001fda:	2301      	movs	r3, #1
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	f3af 8000 	nop.w
 8001fe8:	33333333 	.word	0x33333333
 8001fec:	3fc33333 	.word	0x3fc33333
 8001ff0:	20000240 	.word	0x20000240

08001ff4 <ICM20948_Read_Data_Handle>:


void ICM20948_Read_Data_Handle(void)
{
 8001ff4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ff8:	b084      	sub	sp, #16
 8001ffa:	af04      	add	r7, sp, #16
	print_count++;
 8001ffc:	4b4f      	ldr	r3, [pc, #316]	; (800213c <ICM20948_Read_Data_Handle+0x148>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	3301      	adds	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	4b4d      	ldr	r3, [pc, #308]	; (800213c <ICM20948_Read_Data_Handle+0x148>)
 8002006:	801a      	strh	r2, [r3, #0]
	ICM20948_gyro_read_dps(&g_axises_gyro);
 8002008:	484d      	ldr	r0, [pc, #308]	; (8002140 <ICM20948_Read_Data_Handle+0x14c>)
 800200a:	f7ff ff13 	bl	8001e34 <ICM20948_gyro_read_dps>
	ICM20948_accel_read_g(&g_axises_accel);
 800200e:	484d      	ldr	r0, [pc, #308]	; (8002144 <ICM20948_Read_Data_Handle+0x150>)
 8002010:	f7ff ff52 	bl	8001eb8 <ICM20948_accel_read_g>
	AK09916_mag_read_uT(&g_axises_mag);
 8002014:	484c      	ldr	r0, [pc, #304]	; (8002148 <ICM20948_Read_Data_Handle+0x154>)
 8002016:	f7ff ff93 	bl	8001f40 <AK09916_mag_read_uT>

	if (print_count > 5)
 800201a:	4b48      	ldr	r3, [pc, #288]	; (800213c <ICM20948_Read_Data_Handle+0x148>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	2b05      	cmp	r3, #5
 8002020:	f240 8087 	bls.w	8002132 <ICM20948_Read_Data_Handle+0x13e>
	{
		print_count = 0;
 8002024:	4b45      	ldr	r3, [pc, #276]	; (800213c <ICM20948_Read_Data_Handle+0x148>)
 8002026:	2200      	movs	r2, #0
 8002028:	801a      	strh	r2, [r3, #0]

		printf("RAW Accel:%d,\t%d,\t%d\n", g_raw_accel.x, g_raw_accel.y, g_raw_accel.z);
 800202a:	4b48      	ldr	r3, [pc, #288]	; (800214c <ICM20948_Read_Data_Handle+0x158>)
 800202c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002030:	4619      	mov	r1, r3
 8002032:	4b46      	ldr	r3, [pc, #280]	; (800214c <ICM20948_Read_Data_Handle+0x158>)
 8002034:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002038:	461a      	mov	r2, r3
 800203a:	4b44      	ldr	r3, [pc, #272]	; (800214c <ICM20948_Read_Data_Handle+0x158>)
 800203c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002040:	4843      	ldr	r0, [pc, #268]	; (8002150 <ICM20948_Read_Data_Handle+0x15c>)
 8002042:	f004 f89b 	bl	800617c <iprintf>
		printf("RAW Gyro:%d,\t%d,\t%d\n", g_raw_gyro.x, g_raw_gyro.y, g_raw_gyro.z);
 8002046:	4b43      	ldr	r3, [pc, #268]	; (8002154 <ICM20948_Read_Data_Handle+0x160>)
 8002048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800204c:	4619      	mov	r1, r3
 800204e:	4b41      	ldr	r3, [pc, #260]	; (8002154 <ICM20948_Read_Data_Handle+0x160>)
 8002050:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002054:	461a      	mov	r2, r3
 8002056:	4b3f      	ldr	r3, [pc, #252]	; (8002154 <ICM20948_Read_Data_Handle+0x160>)
 8002058:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800205c:	483e      	ldr	r0, [pc, #248]	; (8002158 <ICM20948_Read_Data_Handle+0x164>)
 800205e:	f004 f88d 	bl	800617c <iprintf>
		printf("RAW Mag:%d,\t%d,\t%d\n", g_raw_mag.x, g_raw_mag.y, g_raw_mag.z);
 8002062:	4b3e      	ldr	r3, [pc, #248]	; (800215c <ICM20948_Read_Data_Handle+0x168>)
 8002064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002068:	4619      	mov	r1, r3
 800206a:	4b3c      	ldr	r3, [pc, #240]	; (800215c <ICM20948_Read_Data_Handle+0x168>)
 800206c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002070:	461a      	mov	r2, r3
 8002072:	4b3a      	ldr	r3, [pc, #232]	; (800215c <ICM20948_Read_Data_Handle+0x168>)
 8002074:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002078:	4839      	ldr	r0, [pc, #228]	; (8002160 <ICM20948_Read_Data_Handle+0x16c>)
 800207a:	f004 f87f 	bl	800617c <iprintf>

		printf("Axises Accel:%f,\t%f,\t%f\n", g_axises_accel.x, g_axises_accel.y, g_axises_accel.z);
 800207e:	4b31      	ldr	r3, [pc, #196]	; (8002144 <ICM20948_Read_Data_Handle+0x150>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fa3c 	bl	8000500 <__aeabi_f2d>
 8002088:	4680      	mov	r8, r0
 800208a:	4689      	mov	r9, r1
 800208c:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <ICM20948_Read_Data_Handle+0x150>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fa35 	bl	8000500 <__aeabi_f2d>
 8002096:	4604      	mov	r4, r0
 8002098:	460d      	mov	r5, r1
 800209a:	4b2a      	ldr	r3, [pc, #168]	; (8002144 <ICM20948_Read_Data_Handle+0x150>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fa2e 	bl	8000500 <__aeabi_f2d>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80020ac:	e9cd 4500 	strd	r4, r5, [sp]
 80020b0:	4642      	mov	r2, r8
 80020b2:	464b      	mov	r3, r9
 80020b4:	482b      	ldr	r0, [pc, #172]	; (8002164 <ICM20948_Read_Data_Handle+0x170>)
 80020b6:	f004 f861 	bl	800617c <iprintf>
		printf("Axises Gyro:%f,\t%f,\t%f\n", g_axises_gyro.x, g_axises_gyro.y, g_axises_gyro.z);
 80020ba:	4b21      	ldr	r3, [pc, #132]	; (8002140 <ICM20948_Read_Data_Handle+0x14c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fa1e 	bl	8000500 <__aeabi_f2d>
 80020c4:	4680      	mov	r8, r0
 80020c6:	4689      	mov	r9, r1
 80020c8:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <ICM20948_Read_Data_Handle+0x14c>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe fa17 	bl	8000500 <__aeabi_f2d>
 80020d2:	4604      	mov	r4, r0
 80020d4:	460d      	mov	r5, r1
 80020d6:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <ICM20948_Read_Data_Handle+0x14c>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fa10 	bl	8000500 <__aeabi_f2d>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80020e8:	e9cd 4500 	strd	r4, r5, [sp]
 80020ec:	4642      	mov	r2, r8
 80020ee:	464b      	mov	r3, r9
 80020f0:	481d      	ldr	r0, [pc, #116]	; (8002168 <ICM20948_Read_Data_Handle+0x174>)
 80020f2:	f004 f843 	bl	800617c <iprintf>
		printf("Axises Mag:%f,\t%f,\t%f\n", g_axises_mag.x, g_axises_mag.y, g_axises_mag.z);
 80020f6:	4b14      	ldr	r3, [pc, #80]	; (8002148 <ICM20948_Read_Data_Handle+0x154>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fa00 	bl	8000500 <__aeabi_f2d>
 8002100:	4680      	mov	r8, r0
 8002102:	4689      	mov	r9, r1
 8002104:	4b10      	ldr	r3, [pc, #64]	; (8002148 <ICM20948_Read_Data_Handle+0x154>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe f9f9 	bl	8000500 <__aeabi_f2d>
 800210e:	4604      	mov	r4, r0
 8002110:	460d      	mov	r5, r1
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <ICM20948_Read_Data_Handle+0x154>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe f9f2 	bl	8000500 <__aeabi_f2d>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002124:	e9cd 4500 	strd	r4, r5, [sp]
 8002128:	4642      	mov	r2, r8
 800212a:	464b      	mov	r3, r9
 800212c:	480f      	ldr	r0, [pc, #60]	; (800216c <ICM20948_Read_Data_Handle+0x178>)
 800212e:	f004 f825 	bl	800617c <iprintf>
	}
}
 8002132:	bf00      	nop
 8002134:	46bd      	mov	sp, r7
 8002136:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800213a:	bf00      	nop
 800213c:	20000246 	.word	0x20000246
 8002140:	2000020c 	.word	0x2000020c
 8002144:	20000218 	.word	0x20000218
 8002148:	20000224 	.word	0x20000224
 800214c:	20000238 	.word	0x20000238
 8002150:	08008330 	.word	0x08008330
 8002154:	20000230 	.word	0x20000230
 8002158:	08008348 	.word	0x08008348
 800215c:	20000240 	.word	0x20000240
 8002160:	08008360 	.word	0x08008360
 8002164:	08008374 	.word	0x08008374
 8002168:	08008390 	.word	0x08008390
 800216c:	080083a8 	.word	0x080083a8

08002170 <Key1_is_Press>:


// 判断按键是否被按下，按下返回KEY_PRESS，松开返回KEY_RELEASE
// Determine if the key is pressed, press to return KEY_PRESS, release to return KEY_RELEASE  
static uint8_t Key1_is_Press(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin))
 8002174:	2104      	movs	r1, #4
 8002176:	4805      	ldr	r0, [pc, #20]	; (800218c <Key1_is_Press+0x1c>)
 8002178:	f001 fb16 	bl	80037a8 <HAL_GPIO_ReadPin>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <Key1_is_Press+0x16>
	{
		return KEY_PRESS; // 如果按键被按下，则返回KEY_PRESS
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <Key1_is_Press+0x18>
	}
	return KEY_RELEASE;   // 如果按键是松开状态，则返回KEY_RELEASE
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40011400 	.word	0x40011400

08002190 <Key1_State>:
// 读取按键K1的状态，按下返回KEY_PRESS，松开返回KEY_RELEASE. 
// mode:设置模式，0：按下一直返回KEY_PRESS；1：按下只返回一次KEY_PRESS
// Read the state of key K1, press down to return KEY_PRESS, release to return key_release. 
// mode: setting mode, 0: press down to return KEY_PRESS;  1: KEY_PRESS is returned only once  
uint8_t Key1_State(uint8_t mode)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
	static uint16_t key1_state = 0;

	if (Key1_is_Press() == KEY_PRESS)
 800219a:	f7ff ffe9 	bl	8002170 <Key1_is_Press>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d10e      	bne.n	80021c2 <Key1_State+0x32>
	{
		if (key1_state < (mode + 1) * 2)
 80021a4:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <Key1_State+0x50>)
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	3301      	adds	r3, #1
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	429a      	cmp	r2, r3
 80021b2:	da09      	bge.n	80021c8 <Key1_State+0x38>
		{
			key1_state++;
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <Key1_State+0x50>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	3301      	adds	r3, #1
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <Key1_State+0x50>)
 80021be:	801a      	strh	r2, [r3, #0]
 80021c0:	e002      	b.n	80021c8 <Key1_State+0x38>
		}
	}
	else
	{
		key1_state = 0;
 80021c2:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <Key1_State+0x50>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	801a      	strh	r2, [r3, #0]
	}
	if (key1_state == 2)
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <Key1_State+0x50>)
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d101      	bne.n	80021d4 <Key1_State+0x44>
	{
		return KEY_PRESS;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <Key1_State+0x46>
	}
	return KEY_RELEASE;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	2000024e 	.word	0x2000024e

080021e4 <USART1_Init>:

uint8_t RxTemp = 0;

// Initialize USART1  初始化串口1
void USART1_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 80021e8:	2201      	movs	r2, #1
 80021ea:	4903      	ldr	r1, [pc, #12]	; (80021f8 <USART1_Init+0x14>)
 80021ec:	4803      	ldr	r0, [pc, #12]	; (80021fc <USART1_Init+0x18>)
 80021ee:	f002 fd8e 	bl	8004d0e <HAL_UART_Receive_IT>
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000250 	.word	0x20000250
 80021fc:	200002b0 	.word	0x200002b0

08002200 <USART1_Send_U8>:

// The serial port sends one byte  串口发送一个字节
void USART1_Send_U8(uint8_t ch)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800220a:	1df9      	adds	r1, r7, #7
 800220c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002210:	2201      	movs	r2, #1
 8002212:	4803      	ldr	r0, [pc, #12]	; (8002220 <USART1_Send_U8+0x20>)
 8002214:	f002 fcf8 	bl	8004c08 <HAL_UART_Transmit>
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	200002b0 	.word	0x200002b0

08002224 <HAL_UART_RxCpltCallback>:
    #endif
}

// The serial port receiving is interrupted. Procedure  串口接收完成中断
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_UART_RxCpltCallback can be implemented in the user file
     */
    // 测试发送数据，实际应用中不应该在中断中发送数据
    // Test sending data. In practice, data should not be sent during interrupts  
    USART1_Send_U8(RxTemp);
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_UART_RxCpltCallback+0x24>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ffe5 	bl	8002200 <USART1_Send_U8>

    // Continue receiving data  继续接收数据
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 8002236:	2201      	movs	r2, #1
 8002238:	4903      	ldr	r1, [pc, #12]	; (8002248 <HAL_UART_RxCpltCallback+0x24>)
 800223a:	4804      	ldr	r0, [pc, #16]	; (800224c <HAL_UART_RxCpltCallback+0x28>)
 800223c:	f002 fd67 	bl	8004d0e <HAL_UART_Receive_IT>
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000250 	.word	0x20000250
 800224c:	200002b0 	.word	0x200002b0

08002250 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002258:	1d39      	adds	r1, r7, #4
 800225a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800225e:	2201      	movs	r2, #1
 8002260:	4803      	ldr	r0, [pc, #12]	; (8002270 <__io_putchar+0x20>)
 8002262:	f002 fcd1 	bl	8004c08 <HAL_UART_Transmit>
    return ch;
 8002266:	687b      	ldr	r3, [r7, #4]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	200002b0 	.word	0x200002b0

08002274 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <MX_DMA_Init+0x38>)
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <MX_DMA_Init+0x38>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6153      	str	r3, [r2, #20]
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <MX_DMA_Init+0x38>)
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	2100      	movs	r1, #0
 8002296:	200e      	movs	r0, #14
 8002298:	f000 fcc5 	bl	8002c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800229c:	200e      	movs	r0, #14
 800229e:	f000 fcde 	bl	8002c5e <HAL_NVIC_EnableIRQ>

}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000

080022b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b6:	f107 0310 	add.w	r3, r7, #16
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	605a      	str	r2, [r3, #4]
 80022c0:	609a      	str	r2, [r3, #8]
 80022c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c4:	4b34      	ldr	r3, [pc, #208]	; (8002398 <MX_GPIO_Init+0xe8>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	4a33      	ldr	r2, [pc, #204]	; (8002398 <MX_GPIO_Init+0xe8>)
 80022ca:	f043 0310 	orr.w	r3, r3, #16
 80022ce:	6193      	str	r3, [r2, #24]
 80022d0:	4b31      	ldr	r3, [pc, #196]	; (8002398 <MX_GPIO_Init+0xe8>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022dc:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <MX_GPIO_Init+0xe8>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	4a2d      	ldr	r2, [pc, #180]	; (8002398 <MX_GPIO_Init+0xe8>)
 80022e2:	f043 0320 	orr.w	r3, r3, #32
 80022e6:	6193      	str	r3, [r2, #24]
 80022e8:	4b2b      	ldr	r3, [pc, #172]	; (8002398 <MX_GPIO_Init+0xe8>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f4:	4b28      	ldr	r3, [pc, #160]	; (8002398 <MX_GPIO_Init+0xe8>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4a27      	ldr	r2, [pc, #156]	; (8002398 <MX_GPIO_Init+0xe8>)
 80022fa:	f043 0308 	orr.w	r3, r3, #8
 80022fe:	6193      	str	r3, [r2, #24]
 8002300:	4b25      	ldr	r3, [pc, #148]	; (8002398 <MX_GPIO_Init+0xe8>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800230c:	4b22      	ldr	r3, [pc, #136]	; (8002398 <MX_GPIO_Init+0xe8>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4a21      	ldr	r2, [pc, #132]	; (8002398 <MX_GPIO_Init+0xe8>)
 8002312:	f043 0304 	orr.w	r3, r3, #4
 8002316:	6193      	str	r3, [r2, #24]
 8002318:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <MX_GPIO_Init+0xe8>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	603b      	str	r3, [r7, #0]
 8002322:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|BEEP_Pin, GPIO_PIN_RESET);
 8002324:	2200      	movs	r2, #0
 8002326:	f242 0120 	movw	r1, #8224	; 0x2020
 800232a:	481c      	ldr	r0, [pc, #112]	; (800239c <MX_GPIO_Init+0xec>)
 800232c:	f001 fa53 	bl	80037d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_RESET);
 8002330:	2200      	movs	r2, #0
 8002332:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002336:	481a      	ldr	r0, [pc, #104]	; (80023a0 <MX_GPIO_Init+0xf0>)
 8002338:	f001 fa4d 	bl	80037d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|BEEP_Pin;
 800233c:	f242 0320 	movw	r3, #8224	; 0x2020
 8002340:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002342:	2301      	movs	r3, #1
 8002344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2302      	movs	r3, #2
 800234c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800234e:	f107 0310 	add.w	r3, r7, #16
 8002352:	4619      	mov	r1, r3
 8002354:	4811      	ldr	r0, [pc, #68]	; (800239c <MX_GPIO_Init+0xec>)
 8002356:	f001 f893 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ICM20948_CS_Pin;
 800235a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800235e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002360:	2301      	movs	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002368:	2302      	movs	r3, #2
 800236a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ICM20948_CS_GPIO_Port, &GPIO_InitStruct);
 800236c:	f107 0310 	add.w	r3, r7, #16
 8002370:	4619      	mov	r1, r3
 8002372:	480b      	ldr	r0, [pc, #44]	; (80023a0 <MX_GPIO_Init+0xf0>)
 8002374:	f001 f884 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8002378:	2304      	movs	r3, #4
 800237a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002380:	2301      	movs	r3, #1
 8002382:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8002384:	f107 0310 	add.w	r3, r7, #16
 8002388:	4619      	mov	r1, r3
 800238a:	4806      	ldr	r0, [pc, #24]	; (80023a4 <MX_GPIO_Init+0xf4>)
 800238c:	f001 f878 	bl	8003480 <HAL_GPIO_Init>

}
 8002390:	bf00      	nop
 8002392:	3720      	adds	r7, #32
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40021000 	.word	0x40021000
 800239c:	40011000 	.word	0x40011000
 80023a0:	40010c00 	.word	0x40010c00
 80023a4:	40011400 	.word	0x40011400

080023a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023ac:	f000 fade 	bl	800296c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023b0:	f000 f80d 	bl	80023ce <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023b4:	f7ff ff7c 	bl	80022b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80023b8:	f7ff ff5c 	bl	8002274 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80023bc:	f000 fa08 	bl	80027d0 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80023c0:	f000 f850 	bl	8002464 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  Bsp_Init();
 80023c4:	f7fe feba 	bl	800113c <Bsp_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	Bsp_Loop();
 80023c8:	f7fe fec6 	bl	8001158 <Bsp_Loop>
 80023cc:	e7fc      	b.n	80023c8 <main+0x20>

080023ce <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b090      	sub	sp, #64	; 0x40
 80023d2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023d4:	f107 0318 	add.w	r3, r7, #24
 80023d8:	2228      	movs	r2, #40	; 0x28
 80023da:	2100      	movs	r1, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f003 fa65 	bl	80058ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023f0:	2301      	movs	r3, #1
 80023f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023f8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80023fa:	2300      	movs	r3, #0
 80023fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023fe:	2301      	movs	r3, #1
 8002400:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002402:	2302      	movs	r3, #2
 8002404:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002406:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800240a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800240c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002410:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002412:	f107 0318 	add.w	r3, r7, #24
 8002416:	4618      	mov	r0, r3
 8002418:	f001 fa0e 	bl	8003838 <HAL_RCC_OscConfig>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002422:	f000 f819 	bl	8002458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002426:	230f      	movs	r3, #15
 8002428:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800242a:	2302      	movs	r3, #2
 800242c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002436:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800243c:	1d3b      	adds	r3, r7, #4
 800243e:	2102      	movs	r1, #2
 8002440:	4618      	mov	r0, r3
 8002442:	f001 fc7b 	bl	8003d3c <HAL_RCC_ClockConfig>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800244c:	f000 f804 	bl	8002458 <Error_Handler>
  }
}
 8002450:	bf00      	nop
 8002452:	3740      	adds	r7, #64	; 0x40
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800245c:	b672      	cpsid	i
}
 800245e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002460:	e7fe      	b.n	8002460 <Error_Handler+0x8>
	...

08002464 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002468:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <MX_SPI2_Init+0x64>)
 800246a:	4a18      	ldr	r2, [pc, #96]	; (80024cc <MX_SPI2_Init+0x68>)
 800246c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800246e:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <MX_SPI2_Init+0x64>)
 8002470:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002474:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002476:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <MX_SPI2_Init+0x64>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <MX_SPI2_Init+0x64>)
 800247e:	2200      	movs	r2, #0
 8002480:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <MX_SPI2_Init+0x64>)
 8002484:	2200      	movs	r2, #0
 8002486:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <MX_SPI2_Init+0x64>)
 800248a:	2200      	movs	r2, #0
 800248c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800248e:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <MX_SPI2_Init+0x64>)
 8002490:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002494:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002496:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <MX_SPI2_Init+0x64>)
 8002498:	2200      	movs	r2, #0
 800249a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800249c:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <MX_SPI2_Init+0x64>)
 800249e:	2200      	movs	r2, #0
 80024a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <MX_SPI2_Init+0x64>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024a8:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <MX_SPI2_Init+0x64>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <MX_SPI2_Init+0x64>)
 80024b0:	220a      	movs	r2, #10
 80024b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024b4:	4804      	ldr	r0, [pc, #16]	; (80024c8 <MX_SPI2_Init+0x64>)
 80024b6:	f001 fdcf 	bl	8004058 <HAL_SPI_Init>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80024c0:	f7ff ffca 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000254 	.word	0x20000254
 80024cc:	40003800 	.word	0x40003800

080024d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 0310 	add.w	r3, r7, #16
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a1c      	ldr	r2, [pc, #112]	; (800255c <HAL_SPI_MspInit+0x8c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d131      	bne.n	8002554 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024f0:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <HAL_SPI_MspInit+0x90>)
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	4a1a      	ldr	r2, [pc, #104]	; (8002560 <HAL_SPI_MspInit+0x90>)
 80024f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024fa:	61d3      	str	r3, [r2, #28]
 80024fc:	4b18      	ldr	r3, [pc, #96]	; (8002560 <HAL_SPI_MspInit+0x90>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002508:	4b15      	ldr	r3, [pc, #84]	; (8002560 <HAL_SPI_MspInit+0x90>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	4a14      	ldr	r2, [pc, #80]	; (8002560 <HAL_SPI_MspInit+0x90>)
 800250e:	f043 0308 	orr.w	r3, r3, #8
 8002512:	6193      	str	r3, [r2, #24]
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_SPI_MspInit+0x90>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002520:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002524:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800252a:	2303      	movs	r3, #3
 800252c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252e:	f107 0310 	add.w	r3, r7, #16
 8002532:	4619      	mov	r1, r3
 8002534:	480b      	ldr	r0, [pc, #44]	; (8002564 <HAL_SPI_MspInit+0x94>)
 8002536:	f000 ffa3 	bl	8003480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800253a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800253e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002548:	f107 0310 	add.w	r3, r7, #16
 800254c:	4619      	mov	r1, r3
 800254e:	4805      	ldr	r0, [pc, #20]	; (8002564 <HAL_SPI_MspInit+0x94>)
 8002550:	f000 ff96 	bl	8003480 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002554:	bf00      	nop
 8002556:	3720      	adds	r7, #32
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40003800 	.word	0x40003800
 8002560:	40021000 	.word	0x40021000
 8002564:	40010c00 	.word	0x40010c00

08002568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <HAL_MspInit+0x5c>)
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	4a14      	ldr	r2, [pc, #80]	; (80025c4 <HAL_MspInit+0x5c>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	6193      	str	r3, [r2, #24]
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_MspInit+0x5c>)
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <HAL_MspInit+0x5c>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	4a0e      	ldr	r2, [pc, #56]	; (80025c4 <HAL_MspInit+0x5c>)
 800258c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002590:	61d3      	str	r3, [r2, #28]
 8002592:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <HAL_MspInit+0x5c>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <HAL_MspInit+0x60>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <HAL_MspInit+0x60>)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40010000 	.word	0x40010000

080025cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025d0:	e7fe      	b.n	80025d0 <NMI_Handler+0x4>

080025d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025d6:	e7fe      	b.n	80025d6 <HardFault_Handler+0x4>

080025d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025dc:	e7fe      	b.n	80025dc <MemManage_Handler+0x4>

080025de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025e2:	e7fe      	b.n	80025e2 <BusFault_Handler+0x4>

080025e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <UsageFault_Handler+0x4>

080025ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002612:	f000 f9f1 	bl	80029f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002620:	4802      	ldr	r0, [pc, #8]	; (800262c <DMA1_Channel4_IRQHandler+0x10>)
 8002622:	f000 fcf1 	bl	8003008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	200002f8 	.word	0x200002f8

08002630 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002634:	4802      	ldr	r0, [pc, #8]	; (8002640 <USART1_IRQHandler+0x10>)
 8002636:	f002 fb8f 	bl	8004d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	200002b0 	.word	0x200002b0

08002644 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
	return 1;
 8002648:	2301      	movs	r3, #1
}
 800264a:	4618      	mov	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <_kill>:

int _kill(int pid, int sig)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800265c:	f003 f8fc 	bl	8005858 <__errno>
 8002660:	4603      	mov	r3, r0
 8002662:	2216      	movs	r2, #22
 8002664:	601a      	str	r2, [r3, #0]
	return -1;
 8002666:	f04f 33ff 	mov.w	r3, #4294967295
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <_exit>:

void _exit (int status)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800267a:	f04f 31ff 	mov.w	r1, #4294967295
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ffe7 	bl	8002652 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002684:	e7fe      	b.n	8002684 <_exit+0x12>

08002686 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b086      	sub	sp, #24
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	e00a      	b.n	80026ae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002698:	f3af 8000 	nop.w
 800269c:	4601      	mov	r1, r0
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	60ba      	str	r2, [r7, #8]
 80026a4:	b2ca      	uxtb	r2, r1
 80026a6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	3301      	adds	r3, #1
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	dbf0      	blt.n	8002698 <_read+0x12>
	}

return len;
 80026b6:	687b      	ldr	r3, [r7, #4]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	e009      	b.n	80026e6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	60ba      	str	r2, [r7, #8]
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fdb8 	bl	8002250 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	3301      	adds	r3, #1
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	dbf1      	blt.n	80026d2 <_write+0x12>
	}
	return len;
 80026ee:	687b      	ldr	r3, [r7, #4]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <_close>:

int _close(int file)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	return -1;
 8002700:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr

0800270e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800271e:	605a      	str	r2, [r3, #4]
	return 0;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <_isatty>:

int _isatty(int file)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	return 1;
 8002734:	2301      	movs	r3, #1
}
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
	return 0;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002760:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <_sbrk+0x5c>)
 8002762:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <_sbrk+0x60>)
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800276c:	4b13      	ldr	r3, [pc, #76]	; (80027bc <_sbrk+0x64>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d102      	bne.n	800277a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <_sbrk+0x64>)
 8002776:	4a12      	ldr	r2, [pc, #72]	; (80027c0 <_sbrk+0x68>)
 8002778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <_sbrk+0x64>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	429a      	cmp	r2, r3
 8002786:	d207      	bcs.n	8002798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002788:	f003 f866 	bl	8005858 <__errno>
 800278c:	4603      	mov	r3, r0
 800278e:	220c      	movs	r2, #12
 8002790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
 8002796:	e009      	b.n	80027ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002798:	4b08      	ldr	r3, [pc, #32]	; (80027bc <_sbrk+0x64>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800279e:	4b07      	ldr	r3, [pc, #28]	; (80027bc <_sbrk+0x64>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	4a05      	ldr	r2, [pc, #20]	; (80027bc <_sbrk+0x64>)
 80027a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027aa:	68fb      	ldr	r3, [r7, #12]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	2000c000 	.word	0x2000c000
 80027b8:	00000400 	.word	0x00000400
 80027bc:	200002ac 	.word	0x200002ac
 80027c0:	20000350 	.word	0x20000350

080027c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027d4:	4b11      	ldr	r3, [pc, #68]	; (800281c <MX_USART1_UART_Init+0x4c>)
 80027d6:	4a12      	ldr	r2, [pc, #72]	; (8002820 <MX_USART1_UART_Init+0x50>)
 80027d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027da:	4b10      	ldr	r3, [pc, #64]	; (800281c <MX_USART1_UART_Init+0x4c>)
 80027dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <MX_USART1_UART_Init+0x4c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <MX_USART1_UART_Init+0x4c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027ee:	4b0b      	ldr	r3, [pc, #44]	; (800281c <MX_USART1_UART_Init+0x4c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027f4:	4b09      	ldr	r3, [pc, #36]	; (800281c <MX_USART1_UART_Init+0x4c>)
 80027f6:	220c      	movs	r2, #12
 80027f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <MX_USART1_UART_Init+0x4c>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <MX_USART1_UART_Init+0x4c>)
 8002802:	2200      	movs	r2, #0
 8002804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002806:	4805      	ldr	r0, [pc, #20]	; (800281c <MX_USART1_UART_Init+0x4c>)
 8002808:	f002 f9ae 	bl	8004b68 <HAL_UART_Init>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002812:	f7ff fe21 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	200002b0 	.word	0x200002b0
 8002820:	40013800 	.word	0x40013800

08002824 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282c:	f107 0310 	add.w	r3, r7, #16
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a33      	ldr	r2, [pc, #204]	; (800290c <HAL_UART_MspInit+0xe8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d15f      	bne.n	8002904 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002844:	4b32      	ldr	r3, [pc, #200]	; (8002910 <HAL_UART_MspInit+0xec>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	4a31      	ldr	r2, [pc, #196]	; (8002910 <HAL_UART_MspInit+0xec>)
 800284a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800284e:	6193      	str	r3, [r2, #24]
 8002850:	4b2f      	ldr	r3, [pc, #188]	; (8002910 <HAL_UART_MspInit+0xec>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285c:	4b2c      	ldr	r3, [pc, #176]	; (8002910 <HAL_UART_MspInit+0xec>)
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	4a2b      	ldr	r2, [pc, #172]	; (8002910 <HAL_UART_MspInit+0xec>)
 8002862:	f043 0304 	orr.w	r3, r3, #4
 8002866:	6193      	str	r3, [r2, #24]
 8002868:	4b29      	ldr	r3, [pc, #164]	; (8002910 <HAL_UART_MspInit+0xec>)
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002878:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287a:	2302      	movs	r3, #2
 800287c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800287e:	2303      	movs	r3, #3
 8002880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002882:	f107 0310 	add.w	r3, r7, #16
 8002886:	4619      	mov	r1, r3
 8002888:	4822      	ldr	r0, [pc, #136]	; (8002914 <HAL_UART_MspInit+0xf0>)
 800288a:	f000 fdf9 	bl	8003480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800288e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289c:	f107 0310 	add.w	r3, r7, #16
 80028a0:	4619      	mov	r1, r3
 80028a2:	481c      	ldr	r0, [pc, #112]	; (8002914 <HAL_UART_MspInit+0xf0>)
 80028a4:	f000 fdec 	bl	8003480 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80028a8:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <HAL_UART_MspInit+0xf4>)
 80028aa:	4a1c      	ldr	r2, [pc, #112]	; (800291c <HAL_UART_MspInit+0xf8>)
 80028ac:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028ae:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <HAL_UART_MspInit+0xf4>)
 80028b0:	2210      	movs	r2, #16
 80028b2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b4:	4b18      	ldr	r3, [pc, #96]	; (8002918 <HAL_UART_MspInit+0xf4>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028ba:	4b17      	ldr	r3, [pc, #92]	; (8002918 <HAL_UART_MspInit+0xf4>)
 80028bc:	2280      	movs	r2, #128	; 0x80
 80028be:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028c0:	4b15      	ldr	r3, [pc, #84]	; (8002918 <HAL_UART_MspInit+0xf4>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028c6:	4b14      	ldr	r3, [pc, #80]	; (8002918 <HAL_UART_MspInit+0xf4>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80028cc:	4b12      	ldr	r3, [pc, #72]	; (8002918 <HAL_UART_MspInit+0xf4>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028d2:	4b11      	ldr	r3, [pc, #68]	; (8002918 <HAL_UART_MspInit+0xf4>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80028d8:	480f      	ldr	r0, [pc, #60]	; (8002918 <HAL_UART_MspInit+0xf4>)
 80028da:	f000 f9db 	bl	8002c94 <HAL_DMA_Init>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80028e4:	f7ff fdb8 	bl	8002458 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a0b      	ldr	r2, [pc, #44]	; (8002918 <HAL_UART_MspInit+0xf4>)
 80028ec:	639a      	str	r2, [r3, #56]	; 0x38
 80028ee:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <HAL_UART_MspInit+0xf4>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028f4:	2200      	movs	r2, #0
 80028f6:	2100      	movs	r1, #0
 80028f8:	2025      	movs	r0, #37	; 0x25
 80028fa:	f000 f994 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028fe:	2025      	movs	r0, #37	; 0x25
 8002900:	f000 f9ad 	bl	8002c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002904:	bf00      	nop
 8002906:	3720      	adds	r7, #32
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40013800 	.word	0x40013800
 8002910:	40021000 	.word	0x40021000
 8002914:	40010800 	.word	0x40010800
 8002918:	200002f8 	.word	0x200002f8
 800291c:	40020044 	.word	0x40020044

08002920 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002920:	f7ff ff50 	bl	80027c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002924:	480b      	ldr	r0, [pc, #44]	; (8002954 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002926:	490c      	ldr	r1, [pc, #48]	; (8002958 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002928:	4a0c      	ldr	r2, [pc, #48]	; (800295c <LoopFillZerobss+0x16>)
  movs r3, #0
 800292a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800292c:	e002      	b.n	8002934 <LoopCopyDataInit>

0800292e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800292e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002932:	3304      	adds	r3, #4

08002934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002938:	d3f9      	bcc.n	800292e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800293a:	4a09      	ldr	r2, [pc, #36]	; (8002960 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800293c:	4c09      	ldr	r4, [pc, #36]	; (8002964 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800293e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002940:	e001      	b.n	8002946 <LoopFillZerobss>

08002942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002944:	3204      	adds	r2, #4

08002946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002948:	d3fb      	bcc.n	8002942 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800294a:	f002 ff8b 	bl	8005864 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800294e:	f7ff fd2b 	bl	80023a8 <main>
  bx lr
 8002952:	4770      	bx	lr
  ldr r0, =_sdata
 8002954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002958:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800295c:	080087cc 	.word	0x080087cc
  ldr r2, =_sbss
 8002960:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002964:	20000350 	.word	0x20000350

08002968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002968:	e7fe      	b.n	8002968 <ADC1_2_IRQHandler>
	...

0800296c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002970:	4b08      	ldr	r3, [pc, #32]	; (8002994 <HAL_Init+0x28>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a07      	ldr	r2, [pc, #28]	; (8002994 <HAL_Init+0x28>)
 8002976:	f043 0310 	orr.w	r3, r3, #16
 800297a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800297c:	2003      	movs	r0, #3
 800297e:	f000 f947 	bl	8002c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002982:	200f      	movs	r0, #15
 8002984:	f000 f808 	bl	8002998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002988:	f7ff fdee 	bl	8002568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40022000 	.word	0x40022000

08002998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <HAL_InitTick+0x54>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_InitTick+0x58>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80029b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 f95f 	bl	8002c7a <HAL_SYSTICK_Config>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00e      	b.n	80029e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b0f      	cmp	r3, #15
 80029ca:	d80a      	bhi.n	80029e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029cc:	2200      	movs	r2, #0
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295
 80029d4:	f000 f927 	bl	8002c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d8:	4a06      	ldr	r2, [pc, #24]	; (80029f4 <HAL_InitTick+0x5c>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20000008 	.word	0x20000008
 80029f0:	20000010 	.word	0x20000010
 80029f4:	2000000c 	.word	0x2000000c

080029f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_IncTick+0x1c>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <HAL_IncTick+0x20>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4413      	add	r3, r2
 8002a08:	4a03      	ldr	r2, [pc, #12]	; (8002a18 <HAL_IncTick+0x20>)
 8002a0a:	6013      	str	r3, [r2, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	20000010 	.word	0x20000010
 8002a18:	2000033c 	.word	0x2000033c

08002a1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a20:	4b02      	ldr	r3, [pc, #8]	; (8002a2c <HAL_GetTick+0x10>)
 8002a22:	681b      	ldr	r3, [r3, #0]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	2000033c 	.word	0x2000033c

08002a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a38:	f7ff fff0 	bl	8002a1c <HAL_GetTick>
 8002a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d005      	beq.n	8002a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <HAL_Delay+0x44>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4413      	add	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a56:	bf00      	nop
 8002a58:	f7ff ffe0 	bl	8002a1c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d8f7      	bhi.n	8002a58 <HAL_Delay+0x28>
  {
  }
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000010 	.word	0x20000010

08002a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <__NVIC_SetPriorityGrouping+0x44>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a94:	4013      	ands	r3, r2
 8002a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aaa:	4a04      	ldr	r2, [pc, #16]	; (8002abc <__NVIC_SetPriorityGrouping+0x44>)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	60d3      	str	r3, [r2, #12]
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac4:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	0a1b      	lsrs	r3, r3, #8
 8002aca:	f003 0307 	and.w	r3, r3, #7
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	db0b      	blt.n	8002b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	f003 021f 	and.w	r2, r3, #31
 8002af4:	4906      	ldr	r1, [pc, #24]	; (8002b10 <__NVIC_EnableIRQ+0x34>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	2001      	movs	r0, #1
 8002afe:	fa00 f202 	lsl.w	r2, r0, r2
 8002b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	e000e100 	.word	0xe000e100

08002b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	db0a      	blt.n	8002b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	490c      	ldr	r1, [pc, #48]	; (8002b60 <__NVIC_SetPriority+0x4c>)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	0112      	lsls	r2, r2, #4
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	440b      	add	r3, r1
 8002b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b3c:	e00a      	b.n	8002b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	4908      	ldr	r1, [pc, #32]	; (8002b64 <__NVIC_SetPriority+0x50>)
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	3b04      	subs	r3, #4
 8002b4c:	0112      	lsls	r2, r2, #4
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	440b      	add	r3, r1
 8002b52:	761a      	strb	r2, [r3, #24]
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	e000e100 	.word	0xe000e100
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b089      	sub	sp, #36	; 0x24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f1c3 0307 	rsb	r3, r3, #7
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	bf28      	it	cs
 8002b86:	2304      	movcs	r3, #4
 8002b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2b06      	cmp	r3, #6
 8002b90:	d902      	bls.n	8002b98 <NVIC_EncodePriority+0x30>
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3b03      	subs	r3, #3
 8002b96:	e000      	b.n	8002b9a <NVIC_EncodePriority+0x32>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	401a      	ands	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	43d9      	mvns	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc0:	4313      	orrs	r3, r2
         );
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3724      	adds	r7, #36	; 0x24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr

08002bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bdc:	d301      	bcc.n	8002be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bde:	2301      	movs	r3, #1
 8002be0:	e00f      	b.n	8002c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002be2:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <SysTick_Config+0x40>)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bea:	210f      	movs	r1, #15
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf0:	f7ff ff90 	bl	8002b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <SysTick_Config+0x40>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bfa:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <SysTick_Config+0x40>)
 8002bfc:	2207      	movs	r2, #7
 8002bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	e000e010 	.word	0xe000e010

08002c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff ff2d 	bl	8002a78 <__NVIC_SetPriorityGrouping>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b086      	sub	sp, #24
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	607a      	str	r2, [r7, #4]
 8002c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c38:	f7ff ff42 	bl	8002ac0 <__NVIC_GetPriorityGrouping>
 8002c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	6978      	ldr	r0, [r7, #20]
 8002c44:	f7ff ff90 	bl	8002b68 <NVIC_EncodePriority>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ff5f 	bl	8002b14 <__NVIC_SetPriority>
}
 8002c56:	bf00      	nop
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff35 	bl	8002adc <__NVIC_EnableIRQ>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff ffa2 	bl	8002bcc <SysTick_Config>
 8002c88:	4603      	mov	r3, r0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e059      	b.n	8002d5e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4b2d      	ldr	r3, [pc, #180]	; (8002d68 <HAL_DMA_Init+0xd4>)
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d80f      	bhi.n	8002cd6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4b2b      	ldr	r3, [pc, #172]	; (8002d6c <HAL_DMA_Init+0xd8>)
 8002cbe:	4413      	add	r3, r2
 8002cc0:	4a2b      	ldr	r2, [pc, #172]	; (8002d70 <HAL_DMA_Init+0xdc>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	091b      	lsrs	r3, r3, #4
 8002cc8:	009a      	lsls	r2, r3, #2
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a28      	ldr	r2, [pc, #160]	; (8002d74 <HAL_DMA_Init+0xe0>)
 8002cd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cd4:	e00e      	b.n	8002cf4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	4b26      	ldr	r3, [pc, #152]	; (8002d78 <HAL_DMA_Init+0xe4>)
 8002cde:	4413      	add	r3, r2
 8002ce0:	4a23      	ldr	r2, [pc, #140]	; (8002d70 <HAL_DMA_Init+0xdc>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	091b      	lsrs	r3, r3, #4
 8002ce8:	009a      	lsls	r2, r3, #2
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a22      	ldr	r2, [pc, #136]	; (8002d7c <HAL_DMA_Init+0xe8>)
 8002cf2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d0a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002d0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr
 8002d68:	40020407 	.word	0x40020407
 8002d6c:	bffdfff8 	.word	0xbffdfff8
 8002d70:	cccccccd 	.word	0xcccccccd
 8002d74:	40020000 	.word	0x40020000
 8002d78:	bffdfbf8 	.word	0xbffdfbf8
 8002d7c:	40020400 	.word	0x40020400

08002d80 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d008      	beq.n	8002daa <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e020      	b.n	8002dec <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 020e 	bic.w	r2, r2, #14
 8002db8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0201 	bic.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr
	...

08002df8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d005      	beq.n	8002e1c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2204      	movs	r2, #4
 8002e14:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	73fb      	strb	r3, [r7, #15]
 8002e1a:	e0d6      	b.n	8002fca <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 020e 	bic.w	r2, r2, #14
 8002e2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0201 	bic.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	4b64      	ldr	r3, [pc, #400]	; (8002fd4 <HAL_DMA_Abort_IT+0x1dc>)
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d958      	bls.n	8002efa <HAL_DMA_Abort_IT+0x102>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a62      	ldr	r2, [pc, #392]	; (8002fd8 <HAL_DMA_Abort_IT+0x1e0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d04f      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0xfa>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a61      	ldr	r2, [pc, #388]	; (8002fdc <HAL_DMA_Abort_IT+0x1e4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d048      	beq.n	8002eee <HAL_DMA_Abort_IT+0xf6>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a5f      	ldr	r2, [pc, #380]	; (8002fe0 <HAL_DMA_Abort_IT+0x1e8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d040      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0xf0>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a5e      	ldr	r2, [pc, #376]	; (8002fe4 <HAL_DMA_Abort_IT+0x1ec>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d038      	beq.n	8002ee2 <HAL_DMA_Abort_IT+0xea>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a5c      	ldr	r2, [pc, #368]	; (8002fe8 <HAL_DMA_Abort_IT+0x1f0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d030      	beq.n	8002edc <HAL_DMA_Abort_IT+0xe4>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a5b      	ldr	r2, [pc, #364]	; (8002fec <HAL_DMA_Abort_IT+0x1f4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d028      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0xde>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a52      	ldr	r2, [pc, #328]	; (8002fd4 <HAL_DMA_Abort_IT+0x1dc>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d020      	beq.n	8002ed0 <HAL_DMA_Abort_IT+0xd8>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a57      	ldr	r2, [pc, #348]	; (8002ff0 <HAL_DMA_Abort_IT+0x1f8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d019      	beq.n	8002ecc <HAL_DMA_Abort_IT+0xd4>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a55      	ldr	r2, [pc, #340]	; (8002ff4 <HAL_DMA_Abort_IT+0x1fc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d012      	beq.n	8002ec8 <HAL_DMA_Abort_IT+0xd0>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a54      	ldr	r2, [pc, #336]	; (8002ff8 <HAL_DMA_Abort_IT+0x200>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d00a      	beq.n	8002ec2 <HAL_DMA_Abort_IT+0xca>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a52      	ldr	r2, [pc, #328]	; (8002ffc <HAL_DMA_Abort_IT+0x204>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d102      	bne.n	8002ebc <HAL_DMA_Abort_IT+0xc4>
 8002eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eba:	e01b      	b.n	8002ef4 <HAL_DMA_Abort_IT+0xfc>
 8002ebc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ec0:	e018      	b.n	8002ef4 <HAL_DMA_Abort_IT+0xfc>
 8002ec2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ec6:	e015      	b.n	8002ef4 <HAL_DMA_Abort_IT+0xfc>
 8002ec8:	2310      	movs	r3, #16
 8002eca:	e013      	b.n	8002ef4 <HAL_DMA_Abort_IT+0xfc>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e011      	b.n	8002ef4 <HAL_DMA_Abort_IT+0xfc>
 8002ed0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ed4:	e00e      	b.n	8002ef4 <HAL_DMA_Abort_IT+0xfc>
 8002ed6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002eda:	e00b      	b.n	8002ef4 <HAL_DMA_Abort_IT+0xfc>
 8002edc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ee0:	e008      	b.n	8002ef4 <HAL_DMA_Abort_IT+0xfc>
 8002ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ee6:	e005      	b.n	8002ef4 <HAL_DMA_Abort_IT+0xfc>
 8002ee8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eec:	e002      	b.n	8002ef4 <HAL_DMA_Abort_IT+0xfc>
 8002eee:	2310      	movs	r3, #16
 8002ef0:	e000      	b.n	8002ef4 <HAL_DMA_Abort_IT+0xfc>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	4a42      	ldr	r2, [pc, #264]	; (8003000 <HAL_DMA_Abort_IT+0x208>)
 8002ef6:	6053      	str	r3, [r2, #4]
 8002ef8:	e057      	b.n	8002faa <HAL_DMA_Abort_IT+0x1b2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a36      	ldr	r2, [pc, #216]	; (8002fd8 <HAL_DMA_Abort_IT+0x1e0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d04f      	beq.n	8002fa4 <HAL_DMA_Abort_IT+0x1ac>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a34      	ldr	r2, [pc, #208]	; (8002fdc <HAL_DMA_Abort_IT+0x1e4>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d048      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0x1a8>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a33      	ldr	r2, [pc, #204]	; (8002fe0 <HAL_DMA_Abort_IT+0x1e8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d040      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x1a2>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a31      	ldr	r2, [pc, #196]	; (8002fe4 <HAL_DMA_Abort_IT+0x1ec>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d038      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x19c>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a30      	ldr	r2, [pc, #192]	; (8002fe8 <HAL_DMA_Abort_IT+0x1f0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d030      	beq.n	8002f8e <HAL_DMA_Abort_IT+0x196>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a2e      	ldr	r2, [pc, #184]	; (8002fec <HAL_DMA_Abort_IT+0x1f4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d028      	beq.n	8002f88 <HAL_DMA_Abort_IT+0x190>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a26      	ldr	r2, [pc, #152]	; (8002fd4 <HAL_DMA_Abort_IT+0x1dc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d020      	beq.n	8002f82 <HAL_DMA_Abort_IT+0x18a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a2a      	ldr	r2, [pc, #168]	; (8002ff0 <HAL_DMA_Abort_IT+0x1f8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d019      	beq.n	8002f7e <HAL_DMA_Abort_IT+0x186>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a29      	ldr	r2, [pc, #164]	; (8002ff4 <HAL_DMA_Abort_IT+0x1fc>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d012      	beq.n	8002f7a <HAL_DMA_Abort_IT+0x182>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a27      	ldr	r2, [pc, #156]	; (8002ff8 <HAL_DMA_Abort_IT+0x200>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00a      	beq.n	8002f74 <HAL_DMA_Abort_IT+0x17c>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a26      	ldr	r2, [pc, #152]	; (8002ffc <HAL_DMA_Abort_IT+0x204>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d102      	bne.n	8002f6e <HAL_DMA_Abort_IT+0x176>
 8002f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f6c:	e01b      	b.n	8002fa6 <HAL_DMA_Abort_IT+0x1ae>
 8002f6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f72:	e018      	b.n	8002fa6 <HAL_DMA_Abort_IT+0x1ae>
 8002f74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f78:	e015      	b.n	8002fa6 <HAL_DMA_Abort_IT+0x1ae>
 8002f7a:	2310      	movs	r3, #16
 8002f7c:	e013      	b.n	8002fa6 <HAL_DMA_Abort_IT+0x1ae>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e011      	b.n	8002fa6 <HAL_DMA_Abort_IT+0x1ae>
 8002f82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f86:	e00e      	b.n	8002fa6 <HAL_DMA_Abort_IT+0x1ae>
 8002f88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f8c:	e00b      	b.n	8002fa6 <HAL_DMA_Abort_IT+0x1ae>
 8002f8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f92:	e008      	b.n	8002fa6 <HAL_DMA_Abort_IT+0x1ae>
 8002f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f98:	e005      	b.n	8002fa6 <HAL_DMA_Abort_IT+0x1ae>
 8002f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f9e:	e002      	b.n	8002fa6 <HAL_DMA_Abort_IT+0x1ae>
 8002fa0:	2310      	movs	r3, #16
 8002fa2:	e000      	b.n	8002fa6 <HAL_DMA_Abort_IT+0x1ae>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	4a17      	ldr	r2, [pc, #92]	; (8003004 <HAL_DMA_Abort_IT+0x20c>)
 8002fa8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	4798      	blx	r3
    } 
  }
  return status;
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40020080 	.word	0x40020080
 8002fd8:	40020008 	.word	0x40020008
 8002fdc:	4002001c 	.word	0x4002001c
 8002fe0:	40020030 	.word	0x40020030
 8002fe4:	40020044 	.word	0x40020044
 8002fe8:	40020058 	.word	0x40020058
 8002fec:	4002006c 	.word	0x4002006c
 8002ff0:	40020408 	.word	0x40020408
 8002ff4:	4002041c 	.word	0x4002041c
 8002ff8:	40020430 	.word	0x40020430
 8002ffc:	40020444 	.word	0x40020444
 8003000:	40020400 	.word	0x40020400
 8003004:	40020000 	.word	0x40020000

08003008 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	2204      	movs	r2, #4
 8003026:	409a      	lsls	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 80f1 	beq.w	8003214 <HAL_DMA_IRQHandler+0x20c>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80eb 	beq.w	8003214 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b00      	cmp	r3, #0
 800304a:	d107      	bne.n	800305c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0204 	bic.w	r2, r2, #4
 800305a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	4b5f      	ldr	r3, [pc, #380]	; (80031e0 <HAL_DMA_IRQHandler+0x1d8>)
 8003064:	429a      	cmp	r2, r3
 8003066:	d958      	bls.n	800311a <HAL_DMA_IRQHandler+0x112>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a5d      	ldr	r2, [pc, #372]	; (80031e4 <HAL_DMA_IRQHandler+0x1dc>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d04f      	beq.n	8003112 <HAL_DMA_IRQHandler+0x10a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a5c      	ldr	r2, [pc, #368]	; (80031e8 <HAL_DMA_IRQHandler+0x1e0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d048      	beq.n	800310e <HAL_DMA_IRQHandler+0x106>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a5a      	ldr	r2, [pc, #360]	; (80031ec <HAL_DMA_IRQHandler+0x1e4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d040      	beq.n	8003108 <HAL_DMA_IRQHandler+0x100>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a59      	ldr	r2, [pc, #356]	; (80031f0 <HAL_DMA_IRQHandler+0x1e8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d038      	beq.n	8003102 <HAL_DMA_IRQHandler+0xfa>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a57      	ldr	r2, [pc, #348]	; (80031f4 <HAL_DMA_IRQHandler+0x1ec>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d030      	beq.n	80030fc <HAL_DMA_IRQHandler+0xf4>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a56      	ldr	r2, [pc, #344]	; (80031f8 <HAL_DMA_IRQHandler+0x1f0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d028      	beq.n	80030f6 <HAL_DMA_IRQHandler+0xee>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a4d      	ldr	r2, [pc, #308]	; (80031e0 <HAL_DMA_IRQHandler+0x1d8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d020      	beq.n	80030f0 <HAL_DMA_IRQHandler+0xe8>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a52      	ldr	r2, [pc, #328]	; (80031fc <HAL_DMA_IRQHandler+0x1f4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d019      	beq.n	80030ec <HAL_DMA_IRQHandler+0xe4>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a50      	ldr	r2, [pc, #320]	; (8003200 <HAL_DMA_IRQHandler+0x1f8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d012      	beq.n	80030e8 <HAL_DMA_IRQHandler+0xe0>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a4f      	ldr	r2, [pc, #316]	; (8003204 <HAL_DMA_IRQHandler+0x1fc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00a      	beq.n	80030e2 <HAL_DMA_IRQHandler+0xda>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a4d      	ldr	r2, [pc, #308]	; (8003208 <HAL_DMA_IRQHandler+0x200>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d102      	bne.n	80030dc <HAL_DMA_IRQHandler+0xd4>
 80030d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030da:	e01b      	b.n	8003114 <HAL_DMA_IRQHandler+0x10c>
 80030dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030e0:	e018      	b.n	8003114 <HAL_DMA_IRQHandler+0x10c>
 80030e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030e6:	e015      	b.n	8003114 <HAL_DMA_IRQHandler+0x10c>
 80030e8:	2340      	movs	r3, #64	; 0x40
 80030ea:	e013      	b.n	8003114 <HAL_DMA_IRQHandler+0x10c>
 80030ec:	2304      	movs	r3, #4
 80030ee:	e011      	b.n	8003114 <HAL_DMA_IRQHandler+0x10c>
 80030f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80030f4:	e00e      	b.n	8003114 <HAL_DMA_IRQHandler+0x10c>
 80030f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030fa:	e00b      	b.n	8003114 <HAL_DMA_IRQHandler+0x10c>
 80030fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003100:	e008      	b.n	8003114 <HAL_DMA_IRQHandler+0x10c>
 8003102:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003106:	e005      	b.n	8003114 <HAL_DMA_IRQHandler+0x10c>
 8003108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800310c:	e002      	b.n	8003114 <HAL_DMA_IRQHandler+0x10c>
 800310e:	2340      	movs	r3, #64	; 0x40
 8003110:	e000      	b.n	8003114 <HAL_DMA_IRQHandler+0x10c>
 8003112:	2304      	movs	r3, #4
 8003114:	4a3d      	ldr	r2, [pc, #244]	; (800320c <HAL_DMA_IRQHandler+0x204>)
 8003116:	6053      	str	r3, [r2, #4]
 8003118:	e057      	b.n	80031ca <HAL_DMA_IRQHandler+0x1c2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a31      	ldr	r2, [pc, #196]	; (80031e4 <HAL_DMA_IRQHandler+0x1dc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d04f      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x1bc>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a2f      	ldr	r2, [pc, #188]	; (80031e8 <HAL_DMA_IRQHandler+0x1e0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d048      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x1b8>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a2e      	ldr	r2, [pc, #184]	; (80031ec <HAL_DMA_IRQHandler+0x1e4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d040      	beq.n	80031ba <HAL_DMA_IRQHandler+0x1b2>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a2c      	ldr	r2, [pc, #176]	; (80031f0 <HAL_DMA_IRQHandler+0x1e8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d038      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x1ac>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a2b      	ldr	r2, [pc, #172]	; (80031f4 <HAL_DMA_IRQHandler+0x1ec>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d030      	beq.n	80031ae <HAL_DMA_IRQHandler+0x1a6>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a29      	ldr	r2, [pc, #164]	; (80031f8 <HAL_DMA_IRQHandler+0x1f0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d028      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x1a0>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a21      	ldr	r2, [pc, #132]	; (80031e0 <HAL_DMA_IRQHandler+0x1d8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d020      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x19a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a25      	ldr	r2, [pc, #148]	; (80031fc <HAL_DMA_IRQHandler+0x1f4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d019      	beq.n	800319e <HAL_DMA_IRQHandler+0x196>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a24      	ldr	r2, [pc, #144]	; (8003200 <HAL_DMA_IRQHandler+0x1f8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d012      	beq.n	800319a <HAL_DMA_IRQHandler+0x192>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a22      	ldr	r2, [pc, #136]	; (8003204 <HAL_DMA_IRQHandler+0x1fc>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d00a      	beq.n	8003194 <HAL_DMA_IRQHandler+0x18c>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a21      	ldr	r2, [pc, #132]	; (8003208 <HAL_DMA_IRQHandler+0x200>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d102      	bne.n	800318e <HAL_DMA_IRQHandler+0x186>
 8003188:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800318c:	e01b      	b.n	80031c6 <HAL_DMA_IRQHandler+0x1be>
 800318e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003192:	e018      	b.n	80031c6 <HAL_DMA_IRQHandler+0x1be>
 8003194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003198:	e015      	b.n	80031c6 <HAL_DMA_IRQHandler+0x1be>
 800319a:	2340      	movs	r3, #64	; 0x40
 800319c:	e013      	b.n	80031c6 <HAL_DMA_IRQHandler+0x1be>
 800319e:	2304      	movs	r3, #4
 80031a0:	e011      	b.n	80031c6 <HAL_DMA_IRQHandler+0x1be>
 80031a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80031a6:	e00e      	b.n	80031c6 <HAL_DMA_IRQHandler+0x1be>
 80031a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031ac:	e00b      	b.n	80031c6 <HAL_DMA_IRQHandler+0x1be>
 80031ae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031b2:	e008      	b.n	80031c6 <HAL_DMA_IRQHandler+0x1be>
 80031b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031b8:	e005      	b.n	80031c6 <HAL_DMA_IRQHandler+0x1be>
 80031ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031be:	e002      	b.n	80031c6 <HAL_DMA_IRQHandler+0x1be>
 80031c0:	2340      	movs	r3, #64	; 0x40
 80031c2:	e000      	b.n	80031c6 <HAL_DMA_IRQHandler+0x1be>
 80031c4:	2304      	movs	r3, #4
 80031c6:	4a12      	ldr	r2, [pc, #72]	; (8003210 <HAL_DMA_IRQHandler+0x208>)
 80031c8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8136 	beq.w	8003440 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80031dc:	e130      	b.n	8003440 <HAL_DMA_IRQHandler+0x438>
 80031de:	bf00      	nop
 80031e0:	40020080 	.word	0x40020080
 80031e4:	40020008 	.word	0x40020008
 80031e8:	4002001c 	.word	0x4002001c
 80031ec:	40020030 	.word	0x40020030
 80031f0:	40020044 	.word	0x40020044
 80031f4:	40020058 	.word	0x40020058
 80031f8:	4002006c 	.word	0x4002006c
 80031fc:	40020408 	.word	0x40020408
 8003200:	4002041c 	.word	0x4002041c
 8003204:	40020430 	.word	0x40020430
 8003208:	40020444 	.word	0x40020444
 800320c:	40020400 	.word	0x40020400
 8003210:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	2202      	movs	r2, #2
 800321a:	409a      	lsls	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80dd 	beq.w	80033e0 <HAL_DMA_IRQHandler+0x3d8>
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80d7 	beq.w	80033e0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10b      	bne.n	8003258 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 020a 	bic.w	r2, r2, #10
 800324e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	4b7b      	ldr	r3, [pc, #492]	; (800344c <HAL_DMA_IRQHandler+0x444>)
 8003260:	429a      	cmp	r2, r3
 8003262:	d958      	bls.n	8003316 <HAL_DMA_IRQHandler+0x30e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a79      	ldr	r2, [pc, #484]	; (8003450 <HAL_DMA_IRQHandler+0x448>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d04f      	beq.n	800330e <HAL_DMA_IRQHandler+0x306>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a78      	ldr	r2, [pc, #480]	; (8003454 <HAL_DMA_IRQHandler+0x44c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d048      	beq.n	800330a <HAL_DMA_IRQHandler+0x302>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a76      	ldr	r2, [pc, #472]	; (8003458 <HAL_DMA_IRQHandler+0x450>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d040      	beq.n	8003304 <HAL_DMA_IRQHandler+0x2fc>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a75      	ldr	r2, [pc, #468]	; (800345c <HAL_DMA_IRQHandler+0x454>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d038      	beq.n	80032fe <HAL_DMA_IRQHandler+0x2f6>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a73      	ldr	r2, [pc, #460]	; (8003460 <HAL_DMA_IRQHandler+0x458>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d030      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x2f0>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a72      	ldr	r2, [pc, #456]	; (8003464 <HAL_DMA_IRQHandler+0x45c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d028      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x2ea>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a69      	ldr	r2, [pc, #420]	; (800344c <HAL_DMA_IRQHandler+0x444>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d020      	beq.n	80032ec <HAL_DMA_IRQHandler+0x2e4>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a6e      	ldr	r2, [pc, #440]	; (8003468 <HAL_DMA_IRQHandler+0x460>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d019      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x2e0>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a6c      	ldr	r2, [pc, #432]	; (800346c <HAL_DMA_IRQHandler+0x464>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d012      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x2dc>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a6b      	ldr	r2, [pc, #428]	; (8003470 <HAL_DMA_IRQHandler+0x468>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d00a      	beq.n	80032de <HAL_DMA_IRQHandler+0x2d6>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a69      	ldr	r2, [pc, #420]	; (8003474 <HAL_DMA_IRQHandler+0x46c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d102      	bne.n	80032d8 <HAL_DMA_IRQHandler+0x2d0>
 80032d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032d6:	e01b      	b.n	8003310 <HAL_DMA_IRQHandler+0x308>
 80032d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032dc:	e018      	b.n	8003310 <HAL_DMA_IRQHandler+0x308>
 80032de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032e2:	e015      	b.n	8003310 <HAL_DMA_IRQHandler+0x308>
 80032e4:	2320      	movs	r3, #32
 80032e6:	e013      	b.n	8003310 <HAL_DMA_IRQHandler+0x308>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e011      	b.n	8003310 <HAL_DMA_IRQHandler+0x308>
 80032ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032f0:	e00e      	b.n	8003310 <HAL_DMA_IRQHandler+0x308>
 80032f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032f6:	e00b      	b.n	8003310 <HAL_DMA_IRQHandler+0x308>
 80032f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032fc:	e008      	b.n	8003310 <HAL_DMA_IRQHandler+0x308>
 80032fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003302:	e005      	b.n	8003310 <HAL_DMA_IRQHandler+0x308>
 8003304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003308:	e002      	b.n	8003310 <HAL_DMA_IRQHandler+0x308>
 800330a:	2320      	movs	r3, #32
 800330c:	e000      	b.n	8003310 <HAL_DMA_IRQHandler+0x308>
 800330e:	2302      	movs	r3, #2
 8003310:	4a59      	ldr	r2, [pc, #356]	; (8003478 <HAL_DMA_IRQHandler+0x470>)
 8003312:	6053      	str	r3, [r2, #4]
 8003314:	e057      	b.n	80033c6 <HAL_DMA_IRQHandler+0x3be>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a4d      	ldr	r2, [pc, #308]	; (8003450 <HAL_DMA_IRQHandler+0x448>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d04f      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x3b8>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a4b      	ldr	r2, [pc, #300]	; (8003454 <HAL_DMA_IRQHandler+0x44c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d048      	beq.n	80033bc <HAL_DMA_IRQHandler+0x3b4>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a4a      	ldr	r2, [pc, #296]	; (8003458 <HAL_DMA_IRQHandler+0x450>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d040      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x3ae>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a48      	ldr	r2, [pc, #288]	; (800345c <HAL_DMA_IRQHandler+0x454>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d038      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x3a8>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a47      	ldr	r2, [pc, #284]	; (8003460 <HAL_DMA_IRQHandler+0x458>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d030      	beq.n	80033aa <HAL_DMA_IRQHandler+0x3a2>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a45      	ldr	r2, [pc, #276]	; (8003464 <HAL_DMA_IRQHandler+0x45c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d028      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x39c>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a3d      	ldr	r2, [pc, #244]	; (800344c <HAL_DMA_IRQHandler+0x444>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d020      	beq.n	800339e <HAL_DMA_IRQHandler+0x396>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a41      	ldr	r2, [pc, #260]	; (8003468 <HAL_DMA_IRQHandler+0x460>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d019      	beq.n	800339a <HAL_DMA_IRQHandler+0x392>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a40      	ldr	r2, [pc, #256]	; (800346c <HAL_DMA_IRQHandler+0x464>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d012      	beq.n	8003396 <HAL_DMA_IRQHandler+0x38e>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a3e      	ldr	r2, [pc, #248]	; (8003470 <HAL_DMA_IRQHandler+0x468>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00a      	beq.n	8003390 <HAL_DMA_IRQHandler+0x388>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a3d      	ldr	r2, [pc, #244]	; (8003474 <HAL_DMA_IRQHandler+0x46c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d102      	bne.n	800338a <HAL_DMA_IRQHandler+0x382>
 8003384:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003388:	e01b      	b.n	80033c2 <HAL_DMA_IRQHandler+0x3ba>
 800338a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800338e:	e018      	b.n	80033c2 <HAL_DMA_IRQHandler+0x3ba>
 8003390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003394:	e015      	b.n	80033c2 <HAL_DMA_IRQHandler+0x3ba>
 8003396:	2320      	movs	r3, #32
 8003398:	e013      	b.n	80033c2 <HAL_DMA_IRQHandler+0x3ba>
 800339a:	2302      	movs	r3, #2
 800339c:	e011      	b.n	80033c2 <HAL_DMA_IRQHandler+0x3ba>
 800339e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033a2:	e00e      	b.n	80033c2 <HAL_DMA_IRQHandler+0x3ba>
 80033a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033a8:	e00b      	b.n	80033c2 <HAL_DMA_IRQHandler+0x3ba>
 80033aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033ae:	e008      	b.n	80033c2 <HAL_DMA_IRQHandler+0x3ba>
 80033b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033b4:	e005      	b.n	80033c2 <HAL_DMA_IRQHandler+0x3ba>
 80033b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033ba:	e002      	b.n	80033c2 <HAL_DMA_IRQHandler+0x3ba>
 80033bc:	2320      	movs	r3, #32
 80033be:	e000      	b.n	80033c2 <HAL_DMA_IRQHandler+0x3ba>
 80033c0:	2302      	movs	r3, #2
 80033c2:	4a2e      	ldr	r2, [pc, #184]	; (800347c <HAL_DMA_IRQHandler+0x474>)
 80033c4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d034      	beq.n	8003440 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033de:	e02f      	b.n	8003440 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	2208      	movs	r2, #8
 80033e6:	409a      	lsls	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d028      	beq.n	8003442 <HAL_DMA_IRQHandler+0x43a>
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d023      	beq.n	8003442 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 020e 	bic.w	r2, r2, #14
 8003408:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003412:	2101      	movs	r1, #1
 8003414:	fa01 f202 	lsl.w	r2, r1, r2
 8003418:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	2b00      	cmp	r3, #0
 8003436:	d004      	beq.n	8003442 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
    }
  }
  return;
 8003440:	bf00      	nop
 8003442:	bf00      	nop
}
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40020080 	.word	0x40020080
 8003450:	40020008 	.word	0x40020008
 8003454:	4002001c 	.word	0x4002001c
 8003458:	40020030 	.word	0x40020030
 800345c:	40020044 	.word	0x40020044
 8003460:	40020058 	.word	0x40020058
 8003464:	4002006c 	.word	0x4002006c
 8003468:	40020408 	.word	0x40020408
 800346c:	4002041c 	.word	0x4002041c
 8003470:	40020430 	.word	0x40020430
 8003474:	40020444 	.word	0x40020444
 8003478:	40020400 	.word	0x40020400
 800347c:	40020000 	.word	0x40020000

08003480 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003480:	b480      	push	{r7}
 8003482:	b08b      	sub	sp, #44	; 0x2c
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800348a:	2300      	movs	r3, #0
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800348e:	2300      	movs	r3, #0
 8003490:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003492:	e179      	b.n	8003788 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003494:	2201      	movs	r2, #1
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	f040 8168 	bne.w	8003782 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4a96      	ldr	r2, [pc, #600]	; (8003710 <HAL_GPIO_Init+0x290>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d05e      	beq.n	800357a <HAL_GPIO_Init+0xfa>
 80034bc:	4a94      	ldr	r2, [pc, #592]	; (8003710 <HAL_GPIO_Init+0x290>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d875      	bhi.n	80035ae <HAL_GPIO_Init+0x12e>
 80034c2:	4a94      	ldr	r2, [pc, #592]	; (8003714 <HAL_GPIO_Init+0x294>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d058      	beq.n	800357a <HAL_GPIO_Init+0xfa>
 80034c8:	4a92      	ldr	r2, [pc, #584]	; (8003714 <HAL_GPIO_Init+0x294>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d86f      	bhi.n	80035ae <HAL_GPIO_Init+0x12e>
 80034ce:	4a92      	ldr	r2, [pc, #584]	; (8003718 <HAL_GPIO_Init+0x298>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d052      	beq.n	800357a <HAL_GPIO_Init+0xfa>
 80034d4:	4a90      	ldr	r2, [pc, #576]	; (8003718 <HAL_GPIO_Init+0x298>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d869      	bhi.n	80035ae <HAL_GPIO_Init+0x12e>
 80034da:	4a90      	ldr	r2, [pc, #576]	; (800371c <HAL_GPIO_Init+0x29c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d04c      	beq.n	800357a <HAL_GPIO_Init+0xfa>
 80034e0:	4a8e      	ldr	r2, [pc, #568]	; (800371c <HAL_GPIO_Init+0x29c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d863      	bhi.n	80035ae <HAL_GPIO_Init+0x12e>
 80034e6:	4a8e      	ldr	r2, [pc, #568]	; (8003720 <HAL_GPIO_Init+0x2a0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d046      	beq.n	800357a <HAL_GPIO_Init+0xfa>
 80034ec:	4a8c      	ldr	r2, [pc, #560]	; (8003720 <HAL_GPIO_Init+0x2a0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d85d      	bhi.n	80035ae <HAL_GPIO_Init+0x12e>
 80034f2:	2b12      	cmp	r3, #18
 80034f4:	d82a      	bhi.n	800354c <HAL_GPIO_Init+0xcc>
 80034f6:	2b12      	cmp	r3, #18
 80034f8:	d859      	bhi.n	80035ae <HAL_GPIO_Init+0x12e>
 80034fa:	a201      	add	r2, pc, #4	; (adr r2, 8003500 <HAL_GPIO_Init+0x80>)
 80034fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003500:	0800357b 	.word	0x0800357b
 8003504:	08003555 	.word	0x08003555
 8003508:	08003567 	.word	0x08003567
 800350c:	080035a9 	.word	0x080035a9
 8003510:	080035af 	.word	0x080035af
 8003514:	080035af 	.word	0x080035af
 8003518:	080035af 	.word	0x080035af
 800351c:	080035af 	.word	0x080035af
 8003520:	080035af 	.word	0x080035af
 8003524:	080035af 	.word	0x080035af
 8003528:	080035af 	.word	0x080035af
 800352c:	080035af 	.word	0x080035af
 8003530:	080035af 	.word	0x080035af
 8003534:	080035af 	.word	0x080035af
 8003538:	080035af 	.word	0x080035af
 800353c:	080035af 	.word	0x080035af
 8003540:	080035af 	.word	0x080035af
 8003544:	0800355d 	.word	0x0800355d
 8003548:	08003571 	.word	0x08003571
 800354c:	4a75      	ldr	r2, [pc, #468]	; (8003724 <HAL_GPIO_Init+0x2a4>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d013      	beq.n	800357a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003552:	e02c      	b.n	80035ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	623b      	str	r3, [r7, #32]
          break;
 800355a:	e029      	b.n	80035b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	3304      	adds	r3, #4
 8003562:	623b      	str	r3, [r7, #32]
          break;
 8003564:	e024      	b.n	80035b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	3308      	adds	r3, #8
 800356c:	623b      	str	r3, [r7, #32]
          break;
 800356e:	e01f      	b.n	80035b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	330c      	adds	r3, #12
 8003576:	623b      	str	r3, [r7, #32]
          break;
 8003578:	e01a      	b.n	80035b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d102      	bne.n	8003588 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003582:	2304      	movs	r3, #4
 8003584:	623b      	str	r3, [r7, #32]
          break;
 8003586:	e013      	b.n	80035b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d105      	bne.n	800359c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003590:	2308      	movs	r3, #8
 8003592:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	611a      	str	r2, [r3, #16]
          break;
 800359a:	e009      	b.n	80035b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800359c:	2308      	movs	r3, #8
 800359e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	615a      	str	r2, [r3, #20]
          break;
 80035a6:	e003      	b.n	80035b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035a8:	2300      	movs	r3, #0
 80035aa:	623b      	str	r3, [r7, #32]
          break;
 80035ac:	e000      	b.n	80035b0 <HAL_GPIO_Init+0x130>
          break;
 80035ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	2bff      	cmp	r3, #255	; 0xff
 80035b4:	d801      	bhi.n	80035ba <HAL_GPIO_Init+0x13a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	e001      	b.n	80035be <HAL_GPIO_Init+0x13e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3304      	adds	r3, #4
 80035be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	2bff      	cmp	r3, #255	; 0xff
 80035c4:	d802      	bhi.n	80035cc <HAL_GPIO_Init+0x14c>
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	e002      	b.n	80035d2 <HAL_GPIO_Init+0x152>
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	3b08      	subs	r3, #8
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	210f      	movs	r1, #15
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	fa01 f303 	lsl.w	r3, r1, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	401a      	ands	r2, r3
 80035e4:	6a39      	ldr	r1, [r7, #32]
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	fa01 f303 	lsl.w	r3, r1, r3
 80035ec:	431a      	orrs	r2, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 80c1 	beq.w	8003782 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003600:	4b49      	ldr	r3, [pc, #292]	; (8003728 <HAL_GPIO_Init+0x2a8>)
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	4a48      	ldr	r2, [pc, #288]	; (8003728 <HAL_GPIO_Init+0x2a8>)
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	6193      	str	r3, [r2, #24]
 800360c:	4b46      	ldr	r3, [pc, #280]	; (8003728 <HAL_GPIO_Init+0x2a8>)
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003618:	4a44      	ldr	r2, [pc, #272]	; (800372c <HAL_GPIO_Init+0x2ac>)
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	089b      	lsrs	r3, r3, #2
 800361e:	3302      	adds	r3, #2
 8003620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003624:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	220f      	movs	r2, #15
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4013      	ands	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a3c      	ldr	r2, [pc, #240]	; (8003730 <HAL_GPIO_Init+0x2b0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d01f      	beq.n	8003684 <HAL_GPIO_Init+0x204>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a3b      	ldr	r2, [pc, #236]	; (8003734 <HAL_GPIO_Init+0x2b4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d019      	beq.n	8003680 <HAL_GPIO_Init+0x200>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a3a      	ldr	r2, [pc, #232]	; (8003738 <HAL_GPIO_Init+0x2b8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d013      	beq.n	800367c <HAL_GPIO_Init+0x1fc>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a39      	ldr	r2, [pc, #228]	; (800373c <HAL_GPIO_Init+0x2bc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d00d      	beq.n	8003678 <HAL_GPIO_Init+0x1f8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a38      	ldr	r2, [pc, #224]	; (8003740 <HAL_GPIO_Init+0x2c0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d007      	beq.n	8003674 <HAL_GPIO_Init+0x1f4>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a37      	ldr	r2, [pc, #220]	; (8003744 <HAL_GPIO_Init+0x2c4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d101      	bne.n	8003670 <HAL_GPIO_Init+0x1f0>
 800366c:	2305      	movs	r3, #5
 800366e:	e00a      	b.n	8003686 <HAL_GPIO_Init+0x206>
 8003670:	2306      	movs	r3, #6
 8003672:	e008      	b.n	8003686 <HAL_GPIO_Init+0x206>
 8003674:	2304      	movs	r3, #4
 8003676:	e006      	b.n	8003686 <HAL_GPIO_Init+0x206>
 8003678:	2303      	movs	r3, #3
 800367a:	e004      	b.n	8003686 <HAL_GPIO_Init+0x206>
 800367c:	2302      	movs	r3, #2
 800367e:	e002      	b.n	8003686 <HAL_GPIO_Init+0x206>
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <HAL_GPIO_Init+0x206>
 8003684:	2300      	movs	r3, #0
 8003686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003688:	f002 0203 	and.w	r2, r2, #3
 800368c:	0092      	lsls	r2, r2, #2
 800368e:	4093      	lsls	r3, r2
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003696:	4925      	ldr	r1, [pc, #148]	; (800372c <HAL_GPIO_Init+0x2ac>)
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	089b      	lsrs	r3, r3, #2
 800369c:	3302      	adds	r3, #2
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d006      	beq.n	80036be <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036b0:	4b25      	ldr	r3, [pc, #148]	; (8003748 <HAL_GPIO_Init+0x2c8>)
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	4924      	ldr	r1, [pc, #144]	; (8003748 <HAL_GPIO_Init+0x2c8>)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	608b      	str	r3, [r1, #8]
 80036bc:	e006      	b.n	80036cc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036be:	4b22      	ldr	r3, [pc, #136]	; (8003748 <HAL_GPIO_Init+0x2c8>)
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	43db      	mvns	r3, r3
 80036c6:	4920      	ldr	r1, [pc, #128]	; (8003748 <HAL_GPIO_Init+0x2c8>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d006      	beq.n	80036e6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HAL_GPIO_Init+0x2c8>)
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	491a      	ldr	r1, [pc, #104]	; (8003748 <HAL_GPIO_Init+0x2c8>)
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60cb      	str	r3, [r1, #12]
 80036e4:	e006      	b.n	80036f4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036e6:	4b18      	ldr	r3, [pc, #96]	; (8003748 <HAL_GPIO_Init+0x2c8>)
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	43db      	mvns	r3, r3
 80036ee:	4916      	ldr	r1, [pc, #88]	; (8003748 <HAL_GPIO_Init+0x2c8>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d025      	beq.n	800374c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003700:	4b11      	ldr	r3, [pc, #68]	; (8003748 <HAL_GPIO_Init+0x2c8>)
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	4910      	ldr	r1, [pc, #64]	; (8003748 <HAL_GPIO_Init+0x2c8>)
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]
 800370c:	e025      	b.n	800375a <HAL_GPIO_Init+0x2da>
 800370e:	bf00      	nop
 8003710:	10320000 	.word	0x10320000
 8003714:	10310000 	.word	0x10310000
 8003718:	10220000 	.word	0x10220000
 800371c:	10210000 	.word	0x10210000
 8003720:	10120000 	.word	0x10120000
 8003724:	10110000 	.word	0x10110000
 8003728:	40021000 	.word	0x40021000
 800372c:	40010000 	.word	0x40010000
 8003730:	40010800 	.word	0x40010800
 8003734:	40010c00 	.word	0x40010c00
 8003738:	40011000 	.word	0x40011000
 800373c:	40011400 	.word	0x40011400
 8003740:	40011800 	.word	0x40011800
 8003744:	40011c00 	.word	0x40011c00
 8003748:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800374c:	4b15      	ldr	r3, [pc, #84]	; (80037a4 <HAL_GPIO_Init+0x324>)
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	43db      	mvns	r3, r3
 8003754:	4913      	ldr	r1, [pc, #76]	; (80037a4 <HAL_GPIO_Init+0x324>)
 8003756:	4013      	ands	r3, r2
 8003758:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d006      	beq.n	8003774 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003766:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <HAL_GPIO_Init+0x324>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	490e      	ldr	r1, [pc, #56]	; (80037a4 <HAL_GPIO_Init+0x324>)
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	4313      	orrs	r3, r2
 8003770:	600b      	str	r3, [r1, #0]
 8003772:	e006      	b.n	8003782 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003774:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <HAL_GPIO_Init+0x324>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	43db      	mvns	r3, r3
 800377c:	4909      	ldr	r1, [pc, #36]	; (80037a4 <HAL_GPIO_Init+0x324>)
 800377e:	4013      	ands	r3, r2
 8003780:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	3301      	adds	r3, #1
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	fa22 f303 	lsr.w	r3, r2, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	f47f ae7e 	bne.w	8003494 <HAL_GPIO_Init+0x14>
  }
}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	372c      	adds	r7, #44	; 0x2c
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	40010400 	.word	0x40010400

080037a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	887b      	ldrh	r3, [r7, #2]
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
 80037c4:	e001      	b.n	80037ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037c6:	2300      	movs	r3, #0
 80037c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr

080037d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	460b      	mov	r3, r1
 80037e0:	807b      	strh	r3, [r7, #2]
 80037e2:	4613      	mov	r3, r2
 80037e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037e6:	787b      	ldrb	r3, [r7, #1]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ec:	887a      	ldrh	r2, [r7, #2]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037f2:	e003      	b.n	80037fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037f4:	887b      	ldrh	r3, [r7, #2]
 80037f6:	041a      	lsls	r2, r3, #16
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	611a      	str	r2, [r3, #16]
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr

08003806 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003806:	b480      	push	{r7}
 8003808:	b085      	sub	sp, #20
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	460b      	mov	r3, r1
 8003810:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003818:	887a      	ldrh	r2, [r7, #2]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4013      	ands	r3, r2
 800381e:	041a      	lsls	r2, r3, #16
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	43d9      	mvns	r1, r3
 8003824:	887b      	ldrh	r3, [r7, #2]
 8003826:	400b      	ands	r3, r1
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	611a      	str	r2, [r3, #16]
}
 800382e:	bf00      	nop
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr

08003838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e272      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 8087 	beq.w	8003966 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003858:	4b92      	ldr	r3, [pc, #584]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 030c 	and.w	r3, r3, #12
 8003860:	2b04      	cmp	r3, #4
 8003862:	d00c      	beq.n	800387e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003864:	4b8f      	ldr	r3, [pc, #572]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 030c 	and.w	r3, r3, #12
 800386c:	2b08      	cmp	r3, #8
 800386e:	d112      	bne.n	8003896 <HAL_RCC_OscConfig+0x5e>
 8003870:	4b8c      	ldr	r3, [pc, #560]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387c:	d10b      	bne.n	8003896 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800387e:	4b89      	ldr	r3, [pc, #548]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d06c      	beq.n	8003964 <HAL_RCC_OscConfig+0x12c>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d168      	bne.n	8003964 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e24c      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800389e:	d106      	bne.n	80038ae <HAL_RCC_OscConfig+0x76>
 80038a0:	4b80      	ldr	r3, [pc, #512]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a7f      	ldr	r2, [pc, #508]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	e02e      	b.n	800390c <HAL_RCC_OscConfig+0xd4>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x98>
 80038b6:	4b7b      	ldr	r3, [pc, #492]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a7a      	ldr	r2, [pc, #488]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	4b78      	ldr	r3, [pc, #480]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a77      	ldr	r2, [pc, #476]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	e01d      	b.n	800390c <HAL_RCC_OscConfig+0xd4>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038d8:	d10c      	bne.n	80038f4 <HAL_RCC_OscConfig+0xbc>
 80038da:	4b72      	ldr	r3, [pc, #456]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a71      	ldr	r2, [pc, #452]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	4b6f      	ldr	r3, [pc, #444]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a6e      	ldr	r2, [pc, #440]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	e00b      	b.n	800390c <HAL_RCC_OscConfig+0xd4>
 80038f4:	4b6b      	ldr	r3, [pc, #428]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a6a      	ldr	r2, [pc, #424]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	4b68      	ldr	r3, [pc, #416]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a67      	ldr	r2, [pc, #412]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800390a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d013      	beq.n	800393c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7ff f882 	bl	8002a1c <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800391c:	f7ff f87e 	bl	8002a1c <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	; 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e200      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392e:	4b5d      	ldr	r3, [pc, #372]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0xe4>
 800393a:	e014      	b.n	8003966 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393c:	f7ff f86e 	bl	8002a1c <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003944:	f7ff f86a 	bl	8002a1c <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b64      	cmp	r3, #100	; 0x64
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e1ec      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003956:	4b53      	ldr	r3, [pc, #332]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x10c>
 8003962:	e000      	b.n	8003966 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d063      	beq.n	8003a3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003972:	4b4c      	ldr	r3, [pc, #304]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00b      	beq.n	8003996 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800397e:	4b49      	ldr	r3, [pc, #292]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b08      	cmp	r3, #8
 8003988:	d11c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x18c>
 800398a:	4b46      	ldr	r3, [pc, #280]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d116      	bne.n	80039c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003996:	4b43      	ldr	r3, [pc, #268]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d005      	beq.n	80039ae <HAL_RCC_OscConfig+0x176>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d001      	beq.n	80039ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e1c0      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ae:	4b3d      	ldr	r3, [pc, #244]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4939      	ldr	r1, [pc, #228]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c2:	e03a      	b.n	8003a3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d020      	beq.n	8003a0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039cc:	4b36      	ldr	r3, [pc, #216]	; (8003aa8 <HAL_RCC_OscConfig+0x270>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d2:	f7ff f823 	bl	8002a1c <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039da:	f7ff f81f 	bl	8002a1c <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e1a1      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ec:	4b2d      	ldr	r3, [pc, #180]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0f0      	beq.n	80039da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f8:	4b2a      	ldr	r3, [pc, #168]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4927      	ldr	r1, [pc, #156]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	600b      	str	r3, [r1, #0]
 8003a0c:	e015      	b.n	8003a3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a0e:	4b26      	ldr	r3, [pc, #152]	; (8003aa8 <HAL_RCC_OscConfig+0x270>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7ff f802 	bl	8002a1c <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a1c:	f7fe fffe 	bl	8002a1c <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e180      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a2e:	4b1d      	ldr	r3, [pc, #116]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d03a      	beq.n	8003abc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d019      	beq.n	8003a82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a4e:	4b17      	ldr	r3, [pc, #92]	; (8003aac <HAL_RCC_OscConfig+0x274>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a54:	f7fe ffe2 	bl	8002a1c <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a5c:	f7fe ffde 	bl	8002a1c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e160      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	f000 face 	bl	800401c <RCC_Delay>
 8003a80:	e01c      	b.n	8003abc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a82:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <HAL_RCC_OscConfig+0x274>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a88:	f7fe ffc8 	bl	8002a1c <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8e:	e00f      	b.n	8003ab0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a90:	f7fe ffc4 	bl	8002a1c <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d908      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e146      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	42420000 	.word	0x42420000
 8003aac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab0:	4b92      	ldr	r3, [pc, #584]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e9      	bne.n	8003a90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80a6 	beq.w	8003c16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aca:	2300      	movs	r3, #0
 8003acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ace:	4b8b      	ldr	r3, [pc, #556]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10d      	bne.n	8003af6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ada:	4b88      	ldr	r3, [pc, #544]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	4a87      	ldr	r2, [pc, #540]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	61d3      	str	r3, [r2, #28]
 8003ae6:	4b85      	ldr	r3, [pc, #532]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aee:	60bb      	str	r3, [r7, #8]
 8003af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003af2:	2301      	movs	r3, #1
 8003af4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af6:	4b82      	ldr	r3, [pc, #520]	; (8003d00 <HAL_RCC_OscConfig+0x4c8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d118      	bne.n	8003b34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b02:	4b7f      	ldr	r3, [pc, #508]	; (8003d00 <HAL_RCC_OscConfig+0x4c8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a7e      	ldr	r2, [pc, #504]	; (8003d00 <HAL_RCC_OscConfig+0x4c8>)
 8003b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b0e:	f7fe ff85 	bl	8002a1c <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b16:	f7fe ff81 	bl	8002a1c <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b64      	cmp	r3, #100	; 0x64
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e103      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b28:	4b75      	ldr	r3, [pc, #468]	; (8003d00 <HAL_RCC_OscConfig+0x4c8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d106      	bne.n	8003b4a <HAL_RCC_OscConfig+0x312>
 8003b3c:	4b6f      	ldr	r3, [pc, #444]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	4a6e      	ldr	r2, [pc, #440]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	6213      	str	r3, [r2, #32]
 8003b48:	e02d      	b.n	8003ba6 <HAL_RCC_OscConfig+0x36e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x334>
 8003b52:	4b6a      	ldr	r3, [pc, #424]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	4a69      	ldr	r2, [pc, #420]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b58:	f023 0301 	bic.w	r3, r3, #1
 8003b5c:	6213      	str	r3, [r2, #32]
 8003b5e:	4b67      	ldr	r3, [pc, #412]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	4a66      	ldr	r2, [pc, #408]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	f023 0304 	bic.w	r3, r3, #4
 8003b68:	6213      	str	r3, [r2, #32]
 8003b6a:	e01c      	b.n	8003ba6 <HAL_RCC_OscConfig+0x36e>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	2b05      	cmp	r3, #5
 8003b72:	d10c      	bne.n	8003b8e <HAL_RCC_OscConfig+0x356>
 8003b74:	4b61      	ldr	r3, [pc, #388]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	4a60      	ldr	r2, [pc, #384]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b7a:	f043 0304 	orr.w	r3, r3, #4
 8003b7e:	6213      	str	r3, [r2, #32]
 8003b80:	4b5e      	ldr	r3, [pc, #376]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	4a5d      	ldr	r2, [pc, #372]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	6213      	str	r3, [r2, #32]
 8003b8c:	e00b      	b.n	8003ba6 <HAL_RCC_OscConfig+0x36e>
 8003b8e:	4b5b      	ldr	r3, [pc, #364]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	4a5a      	ldr	r2, [pc, #360]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	6213      	str	r3, [r2, #32]
 8003b9a:	4b58      	ldr	r3, [pc, #352]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	4a57      	ldr	r2, [pc, #348]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003ba0:	f023 0304 	bic.w	r3, r3, #4
 8003ba4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d015      	beq.n	8003bda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bae:	f7fe ff35 	bl	8002a1c <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb4:	e00a      	b.n	8003bcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb6:	f7fe ff31 	bl	8002a1c <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e0b1      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bcc:	4b4b      	ldr	r3, [pc, #300]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0ee      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x37e>
 8003bd8:	e014      	b.n	8003c04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bda:	f7fe ff1f 	bl	8002a1c <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be0:	e00a      	b.n	8003bf8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be2:	f7fe ff1b 	bl	8002a1c <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e09b      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf8:	4b40      	ldr	r3, [pc, #256]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1ee      	bne.n	8003be2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d105      	bne.n	8003c16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c0a:	4b3c      	ldr	r3, [pc, #240]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	4a3b      	ldr	r2, [pc, #236]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 8087 	beq.w	8003d2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c20:	4b36      	ldr	r3, [pc, #216]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 030c 	and.w	r3, r3, #12
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d061      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d146      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c34:	4b33      	ldr	r3, [pc, #204]	; (8003d04 <HAL_RCC_OscConfig+0x4cc>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3a:	f7fe feef 	bl	8002a1c <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c42:	f7fe feeb 	bl	8002a1c <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e06d      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c54:	4b29      	ldr	r3, [pc, #164]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1f0      	bne.n	8003c42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c68:	d108      	bne.n	8003c7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c6a:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	4921      	ldr	r1, [pc, #132]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c7c:	4b1f      	ldr	r3, [pc, #124]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a19      	ldr	r1, [r3, #32]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	491b      	ldr	r1, [pc, #108]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c94:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <HAL_RCC_OscConfig+0x4cc>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9a:	f7fe febf 	bl	8002a1c <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca2:	f7fe febb 	bl	8002a1c <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e03d      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cb4:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0f0      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x46a>
 8003cc0:	e035      	b.n	8003d2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc2:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <HAL_RCC_OscConfig+0x4cc>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7fe fea8 	bl	8002a1c <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd0:	f7fe fea4 	bl	8002a1c <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e026      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce2:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x498>
 8003cee:	e01e      	b.n	8003d2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d107      	bne.n	8003d08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e019      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40007000 	.word	0x40007000
 8003d04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d08:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <HAL_RCC_OscConfig+0x500>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d106      	bne.n	8003d2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d001      	beq.n	8003d2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40021000 	.word	0x40021000

08003d3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0d0      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d50:	4b6a      	ldr	r3, [pc, #424]	; (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d910      	bls.n	8003d80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5e:	4b67      	ldr	r3, [pc, #412]	; (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 0207 	bic.w	r2, r3, #7
 8003d66:	4965      	ldr	r1, [pc, #404]	; (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6e:	4b63      	ldr	r3, [pc, #396]	; (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0b8      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d020      	beq.n	8003dce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d98:	4b59      	ldr	r3, [pc, #356]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	4a58      	ldr	r2, [pc, #352]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003da2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0308 	and.w	r3, r3, #8
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d005      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003db0:	4b53      	ldr	r3, [pc, #332]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	4a52      	ldr	r2, [pc, #328]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003db6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003dba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dbc:	4b50      	ldr	r3, [pc, #320]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	494d      	ldr	r1, [pc, #308]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d040      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d107      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de2:	4b47      	ldr	r3, [pc, #284]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d115      	bne.n	8003e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e07f      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d107      	bne.n	8003e0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dfa:	4b41      	ldr	r3, [pc, #260]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d109      	bne.n	8003e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e073      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0a:	4b3d      	ldr	r3, [pc, #244]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e06b      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e1a:	4b39      	ldr	r3, [pc, #228]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f023 0203 	bic.w	r2, r3, #3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	4936      	ldr	r1, [pc, #216]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e2c:	f7fe fdf6 	bl	8002a1c <HAL_GetTick>
 8003e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e32:	e00a      	b.n	8003e4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e34:	f7fe fdf2 	bl	8002a1c <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e053      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4a:	4b2d      	ldr	r3, [pc, #180]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f003 020c 	and.w	r2, r3, #12
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d1eb      	bne.n	8003e34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e5c:	4b27      	ldr	r3, [pc, #156]	; (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d210      	bcs.n	8003e8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6a:	4b24      	ldr	r3, [pc, #144]	; (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f023 0207 	bic.w	r2, r3, #7
 8003e72:	4922      	ldr	r1, [pc, #136]	; (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7a:	4b20      	ldr	r3, [pc, #128]	; (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e032      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d008      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e98:	4b19      	ldr	r3, [pc, #100]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	4916      	ldr	r1, [pc, #88]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d009      	beq.n	8003eca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003eb6:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	490e      	ldr	r1, [pc, #56]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eca:	f000 f821 	bl	8003f10 <HAL_RCC_GetSysClockFreq>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	091b      	lsrs	r3, r3, #4
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	490a      	ldr	r1, [pc, #40]	; (8003f04 <HAL_RCC_ClockConfig+0x1c8>)
 8003edc:	5ccb      	ldrb	r3, [r1, r3]
 8003ede:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee2:	4a09      	ldr	r2, [pc, #36]	; (8003f08 <HAL_RCC_ClockConfig+0x1cc>)
 8003ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ee6:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <HAL_RCC_ClockConfig+0x1d0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fe fd54 	bl	8002998 <HAL_InitTick>

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40022000 	.word	0x40022000
 8003f00:	40021000 	.word	0x40021000
 8003f04:	080083c0 	.word	0x080083c0
 8003f08:	20000008 	.word	0x20000008
 8003f0c:	2000000c 	.word	0x2000000c

08003f10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	2300      	movs	r3, #0
 8003f24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f2a:	4b1e      	ldr	r3, [pc, #120]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d002      	beq.n	8003f40 <HAL_RCC_GetSysClockFreq+0x30>
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d003      	beq.n	8003f46 <HAL_RCC_GetSysClockFreq+0x36>
 8003f3e:	e027      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f40:	4b19      	ldr	r3, [pc, #100]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f42:	613b      	str	r3, [r7, #16]
      break;
 8003f44:	e027      	b.n	8003f96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	0c9b      	lsrs	r3, r3, #18
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	4a17      	ldr	r2, [pc, #92]	; (8003fac <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f50:	5cd3      	ldrb	r3, [r2, r3]
 8003f52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d010      	beq.n	8003f80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f5e:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	0c5b      	lsrs	r3, r3, #17
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	4a11      	ldr	r2, [pc, #68]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f6a:	5cd3      	ldrb	r3, [r2, r3]
 8003f6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a0d      	ldr	r2, [pc, #52]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f72:	fb03 f202 	mul.w	r2, r3, r2
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	e004      	b.n	8003f8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a0c      	ldr	r2, [pc, #48]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f84:	fb02 f303 	mul.w	r3, r2, r3
 8003f88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	613b      	str	r3, [r7, #16]
      break;
 8003f8e:	e002      	b.n	8003f96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f90:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f92:	613b      	str	r3, [r7, #16]
      break;
 8003f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f96:	693b      	ldr	r3, [r7, #16]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	007a1200 	.word	0x007a1200
 8003fac:	080083d8 	.word	0x080083d8
 8003fb0:	080083e8 	.word	0x080083e8
 8003fb4:	003d0900 	.word	0x003d0900

08003fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fbc:	4b02      	ldr	r3, [pc, #8]	; (8003fc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr
 8003fc8:	20000008 	.word	0x20000008

08003fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fd0:	f7ff fff2 	bl	8003fb8 <HAL_RCC_GetHCLKFreq>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	4b05      	ldr	r3, [pc, #20]	; (8003fec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	0a1b      	lsrs	r3, r3, #8
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	4903      	ldr	r1, [pc, #12]	; (8003ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fe2:	5ccb      	ldrb	r3, [r1, r3]
 8003fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	080083d0 	.word	0x080083d0

08003ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ff8:	f7ff ffde 	bl	8003fb8 <HAL_RCC_GetHCLKFreq>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	4b05      	ldr	r3, [pc, #20]	; (8004014 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	0adb      	lsrs	r3, r3, #11
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	4903      	ldr	r1, [pc, #12]	; (8004018 <HAL_RCC_GetPCLK2Freq+0x24>)
 800400a:	5ccb      	ldrb	r3, [r1, r3]
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004010:	4618      	mov	r0, r3
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40021000 	.word	0x40021000
 8004018:	080083d0 	.word	0x080083d0

0800401c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004024:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <RCC_Delay+0x34>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a0a      	ldr	r2, [pc, #40]	; (8004054 <RCC_Delay+0x38>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	0a5b      	lsrs	r3, r3, #9
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	fb02 f303 	mul.w	r3, r2, r3
 8004036:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004038:	bf00      	nop
  }
  while (Delay --);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	1e5a      	subs	r2, r3, #1
 800403e:	60fa      	str	r2, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1f9      	bne.n	8004038 <RCC_Delay+0x1c>
}
 8004044:	bf00      	nop
 8004046:	bf00      	nop
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr
 8004050:	20000008 	.word	0x20000008
 8004054:	10624dd3 	.word	0x10624dd3

08004058 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e076      	b.n	8004158 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	2b00      	cmp	r3, #0
 8004070:	d108      	bne.n	8004084 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800407a:	d009      	beq.n	8004090 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	61da      	str	r2, [r3, #28]
 8004082:	e005      	b.n	8004090 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fe fa10 	bl	80024d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040d8:	431a      	orrs	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004114:	ea42 0103 	orr.w	r1, r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	0c1a      	lsrs	r2, r3, #16
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f002 0204 	and.w	r2, r2, #4
 8004136:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69da      	ldr	r2, [r3, #28]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004146:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <HAL_SPI_Transmit+0x22>
 800417e:	2302      	movs	r3, #2
 8004180:	e12d      	b.n	80043de <HAL_SPI_Transmit+0x27e>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800418a:	f7fe fc47 	bl	8002a1c <HAL_GetTick>
 800418e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004190:	88fb      	ldrh	r3, [r7, #6]
 8004192:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	d002      	beq.n	80041a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041a0:	2302      	movs	r3, #2
 80041a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041a4:	e116      	b.n	80043d4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d002      	beq.n	80041b2 <HAL_SPI_Transmit+0x52>
 80041ac:	88fb      	ldrh	r3, [r7, #6]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d102      	bne.n	80041b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041b6:	e10d      	b.n	80043d4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2203      	movs	r2, #3
 80041bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	88fa      	ldrh	r2, [r7, #6]
 80041d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	88fa      	ldrh	r2, [r7, #6]
 80041d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041fe:	d10f      	bne.n	8004220 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800420e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800421e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422a:	2b40      	cmp	r3, #64	; 0x40
 800422c:	d007      	beq.n	800423e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800423c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004246:	d14f      	bne.n	80042e8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <HAL_SPI_Transmit+0xf6>
 8004250:	8afb      	ldrh	r3, [r7, #22]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d142      	bne.n	80042dc <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	881a      	ldrh	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	1c9a      	adds	r2, r3, #2
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800427a:	e02f      	b.n	80042dc <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b02      	cmp	r3, #2
 8004288:	d112      	bne.n	80042b0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	881a      	ldrh	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	1c9a      	adds	r2, r3, #2
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80042ae:	e015      	b.n	80042dc <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042b0:	f7fe fbb4 	bl	8002a1c <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d803      	bhi.n	80042c8 <HAL_SPI_Transmit+0x168>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c6:	d102      	bne.n	80042ce <HAL_SPI_Transmit+0x16e>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80042da:	e07b      	b.n	80043d4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1ca      	bne.n	800427c <HAL_SPI_Transmit+0x11c>
 80042e6:	e050      	b.n	800438a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <HAL_SPI_Transmit+0x196>
 80042f0:	8afb      	ldrh	r3, [r7, #22]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d144      	bne.n	8004380 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	330c      	adds	r3, #12
 8004300:	7812      	ldrb	r2, [r2, #0]
 8004302:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800431c:	e030      	b.n	8004380 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b02      	cmp	r3, #2
 800432a:	d113      	bne.n	8004354 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	330c      	adds	r3, #12
 8004336:	7812      	ldrb	r2, [r2, #0]
 8004338:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	86da      	strh	r2, [r3, #54]	; 0x36
 8004352:	e015      	b.n	8004380 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004354:	f7fe fb62 	bl	8002a1c <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d803      	bhi.n	800436c <HAL_SPI_Transmit+0x20c>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436a:	d102      	bne.n	8004372 <HAL_SPI_Transmit+0x212>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800437e:	e029      	b.n	80043d4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1c9      	bne.n	800431e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	6839      	ldr	r1, [r7, #0]
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 fbcc 	bl	8004b2c <SPI_EndRxTxTransaction>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2220      	movs	r2, #32
 800439e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10a      	bne.n	80043be <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043a8:	2300      	movs	r3, #0
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	613b      	str	r3, [r7, #16]
 80043bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	77fb      	strb	r3, [r7, #31]
 80043ca:	e003      	b.n	80043d4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3720      	adds	r7, #32
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b088      	sub	sp, #32
 80043ea:	af02      	add	r7, sp, #8
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	603b      	str	r3, [r7, #0]
 80043f2:	4613      	mov	r3, r2
 80043f4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b01      	cmp	r3, #1
 8004404:	d002      	beq.n	800440c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004406:	2302      	movs	r3, #2
 8004408:	75fb      	strb	r3, [r7, #23]
    goto error;
 800440a:	e0fb      	b.n	8004604 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004414:	d112      	bne.n	800443c <HAL_SPI_Receive+0x56>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10e      	bne.n	800443c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2204      	movs	r2, #4
 8004422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004426:	88fa      	ldrh	r2, [r7, #6]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	4613      	mov	r3, r2
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	68b9      	ldr	r1, [r7, #8]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 f8ef 	bl	8004616 <HAL_SPI_TransmitReceive>
 8004438:	4603      	mov	r3, r0
 800443a:	e0e8      	b.n	800460e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <HAL_SPI_Receive+0x64>
 8004446:	2302      	movs	r3, #2
 8004448:	e0e1      	b.n	800460e <HAL_SPI_Receive+0x228>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004452:	f7fe fae3 	bl	8002a1c <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <HAL_SPI_Receive+0x7e>
 800445e:	88fb      	ldrh	r3, [r7, #6]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d102      	bne.n	800446a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004468:	e0cc      	b.n	8004604 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2204      	movs	r2, #4
 800446e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	88fa      	ldrh	r2, [r7, #6]
 8004482:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	88fa      	ldrh	r2, [r7, #6]
 8004488:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b0:	d10f      	bne.n	80044d2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044dc:	2b40      	cmp	r3, #64	; 0x40
 80044de:	d007      	beq.n	80044f0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d16a      	bne.n	80045ce <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80044f8:	e032      	b.n	8004560 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b01      	cmp	r3, #1
 8004506:	d115      	bne.n	8004534 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f103 020c 	add.w	r2, r3, #12
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	7812      	ldrb	r2, [r2, #0]
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004528:	b29b      	uxth	r3, r3
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004532:	e015      	b.n	8004560 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004534:	f7fe fa72 	bl	8002a1c <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	429a      	cmp	r2, r3
 8004542:	d803      	bhi.n	800454c <HAL_SPI_Receive+0x166>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454a:	d102      	bne.n	8004552 <HAL_SPI_Receive+0x16c>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800455e:	e051      	b.n	8004604 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1c7      	bne.n	80044fa <HAL_SPI_Receive+0x114>
 800456a:	e035      	b.n	80045d8 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b01      	cmp	r3, #1
 8004578:	d113      	bne.n	80045a2 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004584:	b292      	uxth	r2, r2
 8004586:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	1c9a      	adds	r2, r3, #2
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045a0:	e015      	b.n	80045ce <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045a2:	f7fe fa3b 	bl	8002a1c <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d803      	bhi.n	80045ba <HAL_SPI_Receive+0x1d4>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d102      	bne.n	80045c0 <HAL_SPI_Receive+0x1da>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d106      	bne.n	80045ce <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80045cc:	e01a      	b.n	8004604 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1c9      	bne.n	800456c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	6839      	ldr	r1, [r7, #0]
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 fa53 	bl	8004a88 <SPI_EndRxTransaction>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	75fb      	strb	r3, [r7, #23]
 80045fa:	e003      	b.n	8004604 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800460c:	7dfb      	ldrb	r3, [r7, #23]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b08c      	sub	sp, #48	; 0x30
 800461a:	af00      	add	r7, sp, #0
 800461c:	60f8      	str	r0, [r7, #12]
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	607a      	str	r2, [r7, #4]
 8004622:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004624:	2301      	movs	r3, #1
 8004626:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004628:	2300      	movs	r3, #0
 800462a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_SPI_TransmitReceive+0x26>
 8004638:	2302      	movs	r3, #2
 800463a:	e198      	b.n	800496e <HAL_SPI_TransmitReceive+0x358>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004644:	f7fe f9ea 	bl	8002a1c <HAL_GetTick>
 8004648:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004650:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800465a:	887b      	ldrh	r3, [r7, #2]
 800465c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800465e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004662:	2b01      	cmp	r3, #1
 8004664:	d00f      	beq.n	8004686 <HAL_SPI_TransmitReceive+0x70>
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800466c:	d107      	bne.n	800467e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d103      	bne.n	800467e <HAL_SPI_TransmitReceive+0x68>
 8004676:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800467a:	2b04      	cmp	r3, #4
 800467c:	d003      	beq.n	8004686 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800467e:	2302      	movs	r3, #2
 8004680:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004684:	e16d      	b.n	8004962 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <HAL_SPI_TransmitReceive+0x82>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <HAL_SPI_TransmitReceive+0x82>
 8004692:	887b      	ldrh	r3, [r7, #2]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d103      	bne.n	80046a0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800469e:	e160      	b.n	8004962 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d003      	beq.n	80046b4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2205      	movs	r2, #5
 80046b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	887a      	ldrh	r2, [r7, #2]
 80046c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	887a      	ldrh	r2, [r7, #2]
 80046ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	887a      	ldrh	r2, [r7, #2]
 80046d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	887a      	ldrh	r2, [r7, #2]
 80046dc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f4:	2b40      	cmp	r3, #64	; 0x40
 80046f6:	d007      	beq.n	8004708 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004706:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004710:	d17c      	bne.n	800480c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <HAL_SPI_TransmitReceive+0x10a>
 800471a:	8b7b      	ldrh	r3, [r7, #26]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d16a      	bne.n	80047f6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004724:	881a      	ldrh	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	1c9a      	adds	r2, r3, #2
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004744:	e057      	b.n	80047f6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b02      	cmp	r3, #2
 8004752:	d11b      	bne.n	800478c <HAL_SPI_TransmitReceive+0x176>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d016      	beq.n	800478c <HAL_SPI_TransmitReceive+0x176>
 800475e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004760:	2b01      	cmp	r3, #1
 8004762:	d113      	bne.n	800478c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	881a      	ldrh	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	1c9a      	adds	r2, r3, #2
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b01      	cmp	r3, #1
 8004798:	d119      	bne.n	80047ce <HAL_SPI_TransmitReceive+0x1b8>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d014      	beq.n	80047ce <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ae:	b292      	uxth	r2, r2
 80047b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	1c9a      	adds	r2, r3, #2
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047ca:	2301      	movs	r3, #1
 80047cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047ce:	f7fe f925 	bl	8002a1c <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047da:	429a      	cmp	r2, r3
 80047dc:	d80b      	bhi.n	80047f6 <HAL_SPI_TransmitReceive+0x1e0>
 80047de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e4:	d007      	beq.n	80047f6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80047f4:	e0b5      	b.n	8004962 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1a2      	bne.n	8004746 <HAL_SPI_TransmitReceive+0x130>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004804:	b29b      	uxth	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d19d      	bne.n	8004746 <HAL_SPI_TransmitReceive+0x130>
 800480a:	e080      	b.n	800490e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <HAL_SPI_TransmitReceive+0x204>
 8004814:	8b7b      	ldrh	r3, [r7, #26]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d16f      	bne.n	80048fa <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	330c      	adds	r3, #12
 8004824:	7812      	ldrb	r2, [r2, #0]
 8004826:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004840:	e05b      	b.n	80048fa <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b02      	cmp	r3, #2
 800484e:	d11c      	bne.n	800488a <HAL_SPI_TransmitReceive+0x274>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d017      	beq.n	800488a <HAL_SPI_TransmitReceive+0x274>
 800485a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485c:	2b01      	cmp	r3, #1
 800485e:	d114      	bne.n	800488a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	330c      	adds	r3, #12
 800486a:	7812      	ldrb	r2, [r2, #0]
 800486c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800487c:	b29b      	uxth	r3, r3
 800487e:	3b01      	subs	r3, #1
 8004880:	b29a      	uxth	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b01      	cmp	r3, #1
 8004896:	d119      	bne.n	80048cc <HAL_SPI_TransmitReceive+0x2b6>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800489c:	b29b      	uxth	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d014      	beq.n	80048cc <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048c8:	2301      	movs	r3, #1
 80048ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048cc:	f7fe f8a6 	bl	8002a1c <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048d8:	429a      	cmp	r2, r3
 80048da:	d803      	bhi.n	80048e4 <HAL_SPI_TransmitReceive+0x2ce>
 80048dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e2:	d102      	bne.n	80048ea <HAL_SPI_TransmitReceive+0x2d4>
 80048e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d107      	bne.n	80048fa <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80048f8:	e033      	b.n	8004962 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d19e      	bne.n	8004842 <HAL_SPI_TransmitReceive+0x22c>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004908:	b29b      	uxth	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d199      	bne.n	8004842 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800490e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004910:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 f90a 	bl	8004b2c <SPI_EndRxTxTransaction>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d006      	beq.n	800492c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800492a:	e01a      	b.n	8004962 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004934:	2300      	movs	r3, #0
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004958:	e003      	b.n	8004962 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800496a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800496e:	4618      	mov	r0, r3
 8004970:	3730      	adds	r7, #48	; 0x30
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	603b      	str	r3, [r7, #0]
 8004984:	4613      	mov	r3, r2
 8004986:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004988:	f7fe f848 	bl	8002a1c <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	4413      	add	r3, r2
 8004996:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004998:	f7fe f840 	bl	8002a1c <HAL_GetTick>
 800499c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800499e:	4b39      	ldr	r3, [pc, #228]	; (8004a84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	015b      	lsls	r3, r3, #5
 80049a4:	0d1b      	lsrs	r3, r3, #20
 80049a6:	69fa      	ldr	r2, [r7, #28]
 80049a8:	fb02 f303 	mul.w	r3, r2, r3
 80049ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049ae:	e054      	b.n	8004a5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b6:	d050      	beq.n	8004a5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049b8:	f7fe f830 	bl	8002a1c <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d902      	bls.n	80049ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d13d      	bne.n	8004a4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049e6:	d111      	bne.n	8004a0c <SPI_WaitFlagStateUntilTimeout+0x94>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f0:	d004      	beq.n	80049fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049fa:	d107      	bne.n	8004a0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a14:	d10f      	bne.n	8004a36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e017      	b.n	8004a7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4013      	ands	r3, r2
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	bf0c      	ite	eq
 8004a6a:	2301      	moveq	r3, #1
 8004a6c:	2300      	movne	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d19b      	bne.n	80049b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3720      	adds	r7, #32
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20000008 	.word	0x20000008

08004a88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a9c:	d111      	bne.n	8004ac2 <SPI_EndRxTransaction+0x3a>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aa6:	d004      	beq.n	8004ab2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab0:	d107      	bne.n	8004ac2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ac0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aca:	d117      	bne.n	8004afc <SPI_EndRxTransaction+0x74>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad4:	d112      	bne.n	8004afc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2200      	movs	r2, #0
 8004ade:	2101      	movs	r1, #1
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f7ff ff49 	bl	8004978 <SPI_WaitFlagStateUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01a      	beq.n	8004b22 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af0:	f043 0220 	orr.w	r2, r3, #32
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e013      	b.n	8004b24 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2200      	movs	r2, #0
 8004b04:	2180      	movs	r1, #128	; 0x80
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f7ff ff36 	bl	8004978 <SPI_WaitFlagStateUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d007      	beq.n	8004b22 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b16:	f043 0220 	orr.w	r2, r3, #32
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e000      	b.n	8004b24 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	2180      	movs	r1, #128	; 0x80
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f7ff ff18 	bl	8004978 <SPI_WaitFlagStateUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d007      	beq.n	8004b5e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b52:	f043 0220 	orr.w	r2, r3, #32
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e000      	b.n	8004b60 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e042      	b.n	8004c00 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d106      	bne.n	8004b94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7fd fe48 	bl	8002824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2224      	movs	r2, #36	; 0x24
 8004b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004baa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fdc5 	bl	800573c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	695a      	ldr	r2, [r3, #20]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004be0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08a      	sub	sp, #40	; 0x28
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	603b      	str	r3, [r7, #0]
 8004c14:	4613      	mov	r3, r2
 8004c16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d16d      	bne.n	8004d04 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_UART_Transmit+0x2c>
 8004c2e:	88fb      	ldrh	r3, [r7, #6]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e066      	b.n	8004d06 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2221      	movs	r2, #33	; 0x21
 8004c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c46:	f7fd fee9 	bl	8002a1c <HAL_GetTick>
 8004c4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	88fa      	ldrh	r2, [r7, #6]
 8004c50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	88fa      	ldrh	r2, [r7, #6]
 8004c56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c60:	d108      	bne.n	8004c74 <HAL_UART_Transmit+0x6c>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d104      	bne.n	8004c74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	61bb      	str	r3, [r7, #24]
 8004c72:	e003      	b.n	8004c7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c7c:	e02a      	b.n	8004cd4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2200      	movs	r2, #0
 8004c86:	2180      	movs	r1, #128	; 0x80
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 fb14 	bl	80052b6 <UART_WaitOnFlagUntilTimeout>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e036      	b.n	8004d06 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10b      	bne.n	8004cb6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	3302      	adds	r3, #2
 8004cb2:	61bb      	str	r3, [r7, #24]
 8004cb4:	e007      	b.n	8004cc6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	781a      	ldrb	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1cf      	bne.n	8004c7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2140      	movs	r1, #64	; 0x40
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 fae4 	bl	80052b6 <UART_WaitOnFlagUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e006      	b.n	8004d06 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004d00:	2300      	movs	r3, #0
 8004d02:	e000      	b.n	8004d06 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004d04:	2302      	movs	r3, #2
  }
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3720      	adds	r7, #32
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b084      	sub	sp, #16
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	60f8      	str	r0, [r7, #12]
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d112      	bne.n	8004d4e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <HAL_UART_Receive_IT+0x26>
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e00b      	b.n	8004d50 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d3e:	88fb      	ldrh	r3, [r7, #6]
 8004d40:	461a      	mov	r2, r3
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 fb24 	bl	8005392 <UART_Start_Receive_IT>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	e000      	b.n	8004d50 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d4e:	2302      	movs	r3, #2
  }
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b0ba      	sub	sp, #232	; 0xe8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10f      	bne.n	8004dbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da2:	f003 0320 	and.w	r3, r3, #32
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d009      	beq.n	8004dbe <HAL_UART_IRQHandler+0x66>
 8004daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fc01 	bl	80055be <UART_Receive_IT>
      return;
 8004dbc:	e25b      	b.n	8005276 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004dbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 80de 	beq.w	8004f84 <HAL_UART_IRQHandler+0x22c>
 8004dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d106      	bne.n	8004de2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 80d1 	beq.w	8004f84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00b      	beq.n	8004e06 <HAL_UART_IRQHandler+0xae>
 8004dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d005      	beq.n	8004e06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfe:	f043 0201 	orr.w	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00b      	beq.n	8004e2a <HAL_UART_IRQHandler+0xd2>
 8004e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e22:	f043 0202 	orr.w	r2, r3, #2
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00b      	beq.n	8004e4e <HAL_UART_IRQHandler+0xf6>
 8004e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d005      	beq.n	8004e4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e46:	f043 0204 	orr.w	r2, r3, #4
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e52:	f003 0308 	and.w	r3, r3, #8
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d011      	beq.n	8004e7e <HAL_UART_IRQHandler+0x126>
 8004e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d105      	bne.n	8004e72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e76:	f043 0208 	orr.w	r2, r3, #8
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 81f2 	beq.w	800526c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d008      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x14e>
 8004e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e98:	f003 0320 	and.w	r3, r3, #32
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fb8c 	bl	80055be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	bf14      	ite	ne
 8004eb4:	2301      	movne	r3, #1
 8004eb6:	2300      	moveq	r3, #0
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d103      	bne.n	8004ed2 <HAL_UART_IRQHandler+0x17a>
 8004eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d04f      	beq.n	8004f72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fa96 	bl	8005404 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d041      	beq.n	8004f6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	3314      	adds	r3, #20
 8004eec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3314      	adds	r3, #20
 8004f0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1d9      	bne.n	8004ee6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d013      	beq.n	8004f62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3e:	4a7e      	ldr	r2, [pc, #504]	; (8005138 <HAL_UART_IRQHandler+0x3e0>)
 8004f40:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fd ff56 	bl	8002df8 <HAL_DMA_Abort_IT>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d016      	beq.n	8004f80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f60:	e00e      	b.n	8004f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f993 	bl	800528e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f68:	e00a      	b.n	8004f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f98f 	bl	800528e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f70:	e006      	b.n	8004f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f98b 	bl	800528e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004f7e:	e175      	b.n	800526c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f80:	bf00      	nop
    return;
 8004f82:	e173      	b.n	800526c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	f040 814f 	bne.w	800522c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f92:	f003 0310 	and.w	r3, r3, #16
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 8148 	beq.w	800522c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa0:	f003 0310 	and.w	r3, r3, #16
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 8141 	beq.w	800522c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004faa:	2300      	movs	r3, #0
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60bb      	str	r3, [r7, #8]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	60bb      	str	r3, [r7, #8]
 8004fbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 80b6 	beq.w	800513c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 8145 	beq.w	8005270 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	f080 813e 	bcs.w	8005270 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ffa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	2b20      	cmp	r3, #32
 8005004:	f000 8088 	beq.w	8005118 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	330c      	adds	r3, #12
 800500e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005012:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005016:	e853 3f00 	ldrex	r3, [r3]
 800501a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800501e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005022:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005026:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	330c      	adds	r3, #12
 8005030:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005034:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005038:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005040:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800504c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1d9      	bne.n	8005008 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3314      	adds	r3, #20
 800505a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800505e:	e853 3f00 	ldrex	r3, [r3]
 8005062:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005064:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005066:	f023 0301 	bic.w	r3, r3, #1
 800506a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3314      	adds	r3, #20
 8005074:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005078:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800507c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005080:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005084:	e841 2300 	strex	r3, r2, [r1]
 8005088:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800508a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e1      	bne.n	8005054 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3314      	adds	r3, #20
 8005096:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005098:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800509a:	e853 3f00 	ldrex	r3, [r3]
 800509e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80050a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3314      	adds	r3, #20
 80050b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80050b4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80050ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80050c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e3      	bne.n	8005090 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	330c      	adds	r3, #12
 80050dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e8:	f023 0310 	bic.w	r3, r3, #16
 80050ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	330c      	adds	r3, #12
 80050f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80050fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80050fc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005100:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1e3      	bne.n	80050d6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005112:	4618      	mov	r0, r3
 8005114:	f7fd fe34 	bl	8002d80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005126:	b29b      	uxth	r3, r3
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	b29b      	uxth	r3, r3
 800512c:	4619      	mov	r1, r3
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f8b6 	bl	80052a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005134:	e09c      	b.n	8005270 <HAL_UART_IRQHandler+0x518>
 8005136:	bf00      	nop
 8005138:	080054c9 	.word	0x080054c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005144:	b29b      	uxth	r3, r3
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 808e 	beq.w	8005274 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005158:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 8089 	beq.w	8005274 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	330c      	adds	r3, #12
 8005168:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005174:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005178:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	330c      	adds	r3, #12
 8005182:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005186:	647a      	str	r2, [r7, #68]	; 0x44
 8005188:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800518c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800518e:	e841 2300 	strex	r3, r2, [r1]
 8005192:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1e3      	bne.n	8005162 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3314      	adds	r3, #20
 80051a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	e853 3f00 	ldrex	r3, [r3]
 80051a8:	623b      	str	r3, [r7, #32]
   return(result);
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	f023 0301 	bic.w	r3, r3, #1
 80051b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3314      	adds	r3, #20
 80051ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80051be:	633a      	str	r2, [r7, #48]	; 0x30
 80051c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c6:	e841 2300 	strex	r3, r2, [r1]
 80051ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1e3      	bne.n	800519a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2220      	movs	r2, #32
 80051d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	330c      	adds	r3, #12
 80051e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	e853 3f00 	ldrex	r3, [r3]
 80051ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0310 	bic.w	r3, r3, #16
 80051f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	330c      	adds	r3, #12
 8005200:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005204:	61fa      	str	r2, [r7, #28]
 8005206:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005208:	69b9      	ldr	r1, [r7, #24]
 800520a:	69fa      	ldr	r2, [r7, #28]
 800520c:	e841 2300 	strex	r3, r2, [r1]
 8005210:	617b      	str	r3, [r7, #20]
   return(result);
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e3      	bne.n	80051e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800521e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005222:	4619      	mov	r1, r3
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f83b 	bl	80052a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800522a:	e023      	b.n	8005274 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800522c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005234:	2b00      	cmp	r3, #0
 8005236:	d009      	beq.n	800524c <HAL_UART_IRQHandler+0x4f4>
 8005238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800523c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f953 	bl	80054f0 <UART_Transmit_IT>
    return;
 800524a:	e014      	b.n	8005276 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800524c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00e      	beq.n	8005276 <HAL_UART_IRQHandler+0x51e>
 8005258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800525c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005260:	2b00      	cmp	r3, #0
 8005262:	d008      	beq.n	8005276 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f992 	bl	800558e <UART_EndTransmit_IT>
    return;
 800526a:	e004      	b.n	8005276 <HAL_UART_IRQHandler+0x51e>
    return;
 800526c:	bf00      	nop
 800526e:	e002      	b.n	8005276 <HAL_UART_IRQHandler+0x51e>
      return;
 8005270:	bf00      	nop
 8005272:	e000      	b.n	8005276 <HAL_UART_IRQHandler+0x51e>
      return;
 8005274:	bf00      	nop
  }
}
 8005276:	37e8      	adds	r7, #232	; 0xe8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	bc80      	pop	{r7}
 800528c:	4770      	bx	lr

0800528e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr

080052a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bc80      	pop	{r7}
 80052b4:	4770      	bx	lr

080052b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b090      	sub	sp, #64	; 0x40
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	603b      	str	r3, [r7, #0]
 80052c2:	4613      	mov	r3, r2
 80052c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c6:	e050      	b.n	800536a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ce:	d04c      	beq.n	800536a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d007      	beq.n	80052e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80052d6:	f7fd fba1 	bl	8002a1c <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d241      	bcs.n	800536a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	330c      	adds	r3, #12
 80052ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	330c      	adds	r3, #12
 8005304:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005306:	637a      	str	r2, [r7, #52]	; 0x34
 8005308:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800530c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800530e:	e841 2300 	strex	r3, r2, [r1]
 8005312:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1e5      	bne.n	80052e6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3314      	adds	r3, #20
 8005320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	e853 3f00 	ldrex	r3, [r3]
 8005328:	613b      	str	r3, [r7, #16]
   return(result);
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f023 0301 	bic.w	r3, r3, #1
 8005330:	63bb      	str	r3, [r7, #56]	; 0x38
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3314      	adds	r3, #20
 8005338:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800533a:	623a      	str	r2, [r7, #32]
 800533c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533e:	69f9      	ldr	r1, [r7, #28]
 8005340:	6a3a      	ldr	r2, [r7, #32]
 8005342:	e841 2300 	strex	r3, r2, [r1]
 8005346:	61bb      	str	r3, [r7, #24]
   return(result);
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1e5      	bne.n	800531a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2220      	movs	r2, #32
 8005352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e00f      	b.n	800538a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4013      	ands	r3, r2
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	429a      	cmp	r2, r3
 8005378:	bf0c      	ite	eq
 800537a:	2301      	moveq	r3, #1
 800537c:	2300      	movne	r3, #0
 800537e:	b2db      	uxtb	r3, r3
 8005380:	461a      	mov	r2, r3
 8005382:	79fb      	ldrb	r3, [r7, #7]
 8005384:	429a      	cmp	r2, r3
 8005386:	d09f      	beq.n	80052c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3740      	adds	r7, #64	; 0x40
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005392:	b480      	push	{r7}
 8005394:	b085      	sub	sp, #20
 8005396:	af00      	add	r7, sp, #0
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	4613      	mov	r3, r2
 800539e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	88fa      	ldrh	r2, [r7, #6]
 80053aa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	88fa      	ldrh	r2, [r7, #6]
 80053b0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2222      	movs	r2, #34	; 0x22
 80053bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053d6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695a      	ldr	r2, [r3, #20]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0201 	orr.w	r2, r2, #1
 80053e6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0220 	orr.w	r2, r2, #32
 80053f6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	bc80      	pop	{r7}
 8005402:	4770      	bx	lr

08005404 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005404:	b480      	push	{r7}
 8005406:	b095      	sub	sp, #84	; 0x54
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	330c      	adds	r3, #12
 8005412:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005416:	e853 3f00 	ldrex	r3, [r3]
 800541a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	330c      	adds	r3, #12
 800542a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800542c:	643a      	str	r2, [r7, #64]	; 0x40
 800542e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005430:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005432:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005434:	e841 2300 	strex	r3, r2, [r1]
 8005438:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800543a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1e5      	bne.n	800540c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3314      	adds	r3, #20
 8005446:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	e853 3f00 	ldrex	r3, [r3]
 800544e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	f023 0301 	bic.w	r3, r3, #1
 8005456:	64bb      	str	r3, [r7, #72]	; 0x48
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	3314      	adds	r3, #20
 800545e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005460:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005462:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005464:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005468:	e841 2300 	strex	r3, r2, [r1]
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1e5      	bne.n	8005440 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	2b01      	cmp	r3, #1
 800547a:	d119      	bne.n	80054b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	330c      	adds	r3, #12
 8005482:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	e853 3f00 	ldrex	r3, [r3]
 800548a:	60bb      	str	r3, [r7, #8]
   return(result);
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f023 0310 	bic.w	r3, r3, #16
 8005492:	647b      	str	r3, [r7, #68]	; 0x44
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	330c      	adds	r3, #12
 800549a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800549c:	61ba      	str	r2, [r7, #24]
 800549e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a0:	6979      	ldr	r1, [r7, #20]
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	e841 2300 	strex	r3, r2, [r1]
 80054a8:	613b      	str	r3, [r7, #16]
   return(result);
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1e5      	bne.n	800547c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80054be:	bf00      	nop
 80054c0:	3754      	adds	r7, #84	; 0x54
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr

080054c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f7ff fed3 	bl	800528e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054e8:	bf00      	nop
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b21      	cmp	r3, #33	; 0x21
 8005502:	d13e      	bne.n	8005582 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800550c:	d114      	bne.n	8005538 <UART_Transmit_IT+0x48>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d110      	bne.n	8005538 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800552a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	1c9a      	adds	r2, r3, #2
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	621a      	str	r2, [r3, #32]
 8005536:	e008      	b.n	800554a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	1c59      	adds	r1, r3, #1
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6211      	str	r1, [r2, #32]
 8005542:	781a      	ldrb	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	b29b      	uxth	r3, r3
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	4619      	mov	r1, r3
 8005558:	84d1      	strh	r1, [r2, #38]	; 0x26
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10f      	bne.n	800557e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68da      	ldr	r2, [r3, #12]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800556c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800557c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	e000      	b.n	8005584 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005582:	2302      	movs	r3, #2
  }
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	bc80      	pop	{r7}
 800558c:	4770      	bx	lr

0800558e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b082      	sub	sp, #8
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff fe64 	bl	800527c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b08c      	sub	sp, #48	; 0x30
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b22      	cmp	r3, #34	; 0x22
 80055d0:	f040 80ae 	bne.w	8005730 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055dc:	d117      	bne.n	800560e <UART_Receive_IT+0x50>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d113      	bne.n	800560e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005606:	1c9a      	adds	r2, r3, #2
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	629a      	str	r2, [r3, #40]	; 0x28
 800560c:	e026      	b.n	800565c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005612:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005614:	2300      	movs	r3, #0
 8005616:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005620:	d007      	beq.n	8005632 <UART_Receive_IT+0x74>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10a      	bne.n	8005640 <UART_Receive_IT+0x82>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d106      	bne.n	8005640 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	b2da      	uxtb	r2, r3
 800563a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563c:	701a      	strb	r2, [r3, #0]
 800563e:	e008      	b.n	8005652 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	b2db      	uxtb	r3, r3
 8005648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800564c:	b2da      	uxtb	r2, r3
 800564e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005650:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005656:	1c5a      	adds	r2, r3, #1
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005660:	b29b      	uxth	r3, r3
 8005662:	3b01      	subs	r3, #1
 8005664:	b29b      	uxth	r3, r3
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	4619      	mov	r1, r3
 800566a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800566c:	2b00      	cmp	r3, #0
 800566e:	d15d      	bne.n	800572c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 0220 	bic.w	r2, r2, #32
 800567e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800568e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695a      	ldr	r2, [r3, #20]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0201 	bic.w	r2, r2, #1
 800569e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d135      	bne.n	8005722 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	330c      	adds	r3, #12
 80056c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	e853 3f00 	ldrex	r3, [r3]
 80056ca:	613b      	str	r3, [r7, #16]
   return(result);
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f023 0310 	bic.w	r3, r3, #16
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	330c      	adds	r3, #12
 80056da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056dc:	623a      	str	r2, [r7, #32]
 80056de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	69f9      	ldr	r1, [r7, #28]
 80056e2:	6a3a      	ldr	r2, [r7, #32]
 80056e4:	e841 2300 	strex	r3, r2, [r1]
 80056e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e5      	bne.n	80056bc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0310 	and.w	r3, r3, #16
 80056fa:	2b10      	cmp	r3, #16
 80056fc:	d10a      	bne.n	8005714 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005718:	4619      	mov	r1, r3
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7ff fdc0 	bl	80052a0 <HAL_UARTEx_RxEventCallback>
 8005720:	e002      	b.n	8005728 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fc fd7e 	bl	8002224 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005728:	2300      	movs	r3, #0
 800572a:	e002      	b.n	8005732 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	e000      	b.n	8005732 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005730:	2302      	movs	r3, #2
  }
}
 8005732:	4618      	mov	r0, r3
 8005734:	3730      	adds	r7, #48	; 0x30
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
	...

0800573c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	4313      	orrs	r3, r2
 800576a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005776:	f023 030c 	bic.w	r3, r3, #12
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	68b9      	ldr	r1, [r7, #8]
 8005780:	430b      	orrs	r3, r1
 8005782:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699a      	ldr	r2, [r3, #24]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a2c      	ldr	r2, [pc, #176]	; (8005850 <UART_SetConfig+0x114>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d103      	bne.n	80057ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80057a4:	f7fe fc26 	bl	8003ff4 <HAL_RCC_GetPCLK2Freq>
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	e002      	b.n	80057b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80057ac:	f7fe fc0e 	bl	8003fcc <HAL_RCC_GetPCLK1Freq>
 80057b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	009a      	lsls	r2, r3, #2
 80057bc:	441a      	add	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c8:	4a22      	ldr	r2, [pc, #136]	; (8005854 <UART_SetConfig+0x118>)
 80057ca:	fba2 2303 	umull	r2, r3, r2, r3
 80057ce:	095b      	lsrs	r3, r3, #5
 80057d0:	0119      	lsls	r1, r3, #4
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4613      	mov	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	009a      	lsls	r2, r3, #2
 80057dc:	441a      	add	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80057e8:	4b1a      	ldr	r3, [pc, #104]	; (8005854 <UART_SetConfig+0x118>)
 80057ea:	fba3 0302 	umull	r0, r3, r3, r2
 80057ee:	095b      	lsrs	r3, r3, #5
 80057f0:	2064      	movs	r0, #100	; 0x64
 80057f2:	fb00 f303 	mul.w	r3, r0, r3
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	3332      	adds	r3, #50	; 0x32
 80057fc:	4a15      	ldr	r2, [pc, #84]	; (8005854 <UART_SetConfig+0x118>)
 80057fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005802:	095b      	lsrs	r3, r3, #5
 8005804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005808:	4419      	add	r1, r3
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	4613      	mov	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	009a      	lsls	r2, r3, #2
 8005814:	441a      	add	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005820:	4b0c      	ldr	r3, [pc, #48]	; (8005854 <UART_SetConfig+0x118>)
 8005822:	fba3 0302 	umull	r0, r3, r3, r2
 8005826:	095b      	lsrs	r3, r3, #5
 8005828:	2064      	movs	r0, #100	; 0x64
 800582a:	fb00 f303 	mul.w	r3, r0, r3
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	011b      	lsls	r3, r3, #4
 8005832:	3332      	adds	r3, #50	; 0x32
 8005834:	4a07      	ldr	r2, [pc, #28]	; (8005854 <UART_SetConfig+0x118>)
 8005836:	fba2 2303 	umull	r2, r3, r2, r3
 800583a:	095b      	lsrs	r3, r3, #5
 800583c:	f003 020f 	and.w	r2, r3, #15
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	440a      	add	r2, r1
 8005846:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005848:	bf00      	nop
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40013800 	.word	0x40013800
 8005854:	51eb851f 	.word	0x51eb851f

08005858 <__errno>:
 8005858:	4b01      	ldr	r3, [pc, #4]	; (8005860 <__errno+0x8>)
 800585a:	6818      	ldr	r0, [r3, #0]
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	20000014 	.word	0x20000014

08005864 <__libc_init_array>:
 8005864:	b570      	push	{r4, r5, r6, lr}
 8005866:	2600      	movs	r6, #0
 8005868:	4d0c      	ldr	r5, [pc, #48]	; (800589c <__libc_init_array+0x38>)
 800586a:	4c0d      	ldr	r4, [pc, #52]	; (80058a0 <__libc_init_array+0x3c>)
 800586c:	1b64      	subs	r4, r4, r5
 800586e:	10a4      	asrs	r4, r4, #2
 8005870:	42a6      	cmp	r6, r4
 8005872:	d109      	bne.n	8005888 <__libc_init_array+0x24>
 8005874:	f002 fd48 	bl	8008308 <_init>
 8005878:	2600      	movs	r6, #0
 800587a:	4d0a      	ldr	r5, [pc, #40]	; (80058a4 <__libc_init_array+0x40>)
 800587c:	4c0a      	ldr	r4, [pc, #40]	; (80058a8 <__libc_init_array+0x44>)
 800587e:	1b64      	subs	r4, r4, r5
 8005880:	10a4      	asrs	r4, r4, #2
 8005882:	42a6      	cmp	r6, r4
 8005884:	d105      	bne.n	8005892 <__libc_init_array+0x2e>
 8005886:	bd70      	pop	{r4, r5, r6, pc}
 8005888:	f855 3b04 	ldr.w	r3, [r5], #4
 800588c:	4798      	blx	r3
 800588e:	3601      	adds	r6, #1
 8005890:	e7ee      	b.n	8005870 <__libc_init_array+0xc>
 8005892:	f855 3b04 	ldr.w	r3, [r5], #4
 8005896:	4798      	blx	r3
 8005898:	3601      	adds	r6, #1
 800589a:	e7f2      	b.n	8005882 <__libc_init_array+0x1e>
 800589c:	080087c4 	.word	0x080087c4
 80058a0:	080087c4 	.word	0x080087c4
 80058a4:	080087c4 	.word	0x080087c4
 80058a8:	080087c8 	.word	0x080087c8

080058ac <memset>:
 80058ac:	4603      	mov	r3, r0
 80058ae:	4402      	add	r2, r0
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d100      	bne.n	80058b6 <memset+0xa>
 80058b4:	4770      	bx	lr
 80058b6:	f803 1b01 	strb.w	r1, [r3], #1
 80058ba:	e7f9      	b.n	80058b0 <memset+0x4>

080058bc <__cvt>:
 80058bc:	2b00      	cmp	r3, #0
 80058be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058c2:	461f      	mov	r7, r3
 80058c4:	bfbb      	ittet	lt
 80058c6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80058ca:	461f      	movlt	r7, r3
 80058cc:	2300      	movge	r3, #0
 80058ce:	232d      	movlt	r3, #45	; 0x2d
 80058d0:	b088      	sub	sp, #32
 80058d2:	4614      	mov	r4, r2
 80058d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80058d6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80058d8:	7013      	strb	r3, [r2, #0]
 80058da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80058dc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80058e0:	f023 0820 	bic.w	r8, r3, #32
 80058e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058e8:	d005      	beq.n	80058f6 <__cvt+0x3a>
 80058ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80058ee:	d100      	bne.n	80058f2 <__cvt+0x36>
 80058f0:	3501      	adds	r5, #1
 80058f2:	2302      	movs	r3, #2
 80058f4:	e000      	b.n	80058f8 <__cvt+0x3c>
 80058f6:	2303      	movs	r3, #3
 80058f8:	aa07      	add	r2, sp, #28
 80058fa:	9204      	str	r2, [sp, #16]
 80058fc:	aa06      	add	r2, sp, #24
 80058fe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005902:	e9cd 3500 	strd	r3, r5, [sp]
 8005906:	4622      	mov	r2, r4
 8005908:	463b      	mov	r3, r7
 800590a:	f000 fcdd 	bl	80062c8 <_dtoa_r>
 800590e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005912:	4606      	mov	r6, r0
 8005914:	d102      	bne.n	800591c <__cvt+0x60>
 8005916:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005918:	07db      	lsls	r3, r3, #31
 800591a:	d522      	bpl.n	8005962 <__cvt+0xa6>
 800591c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005920:	eb06 0905 	add.w	r9, r6, r5
 8005924:	d110      	bne.n	8005948 <__cvt+0x8c>
 8005926:	7833      	ldrb	r3, [r6, #0]
 8005928:	2b30      	cmp	r3, #48	; 0x30
 800592a:	d10a      	bne.n	8005942 <__cvt+0x86>
 800592c:	2200      	movs	r2, #0
 800592e:	2300      	movs	r3, #0
 8005930:	4620      	mov	r0, r4
 8005932:	4639      	mov	r1, r7
 8005934:	f7fb f8a4 	bl	8000a80 <__aeabi_dcmpeq>
 8005938:	b918      	cbnz	r0, 8005942 <__cvt+0x86>
 800593a:	f1c5 0501 	rsb	r5, r5, #1
 800593e:	f8ca 5000 	str.w	r5, [sl]
 8005942:	f8da 3000 	ldr.w	r3, [sl]
 8005946:	4499      	add	r9, r3
 8005948:	2200      	movs	r2, #0
 800594a:	2300      	movs	r3, #0
 800594c:	4620      	mov	r0, r4
 800594e:	4639      	mov	r1, r7
 8005950:	f7fb f896 	bl	8000a80 <__aeabi_dcmpeq>
 8005954:	b108      	cbz	r0, 800595a <__cvt+0x9e>
 8005956:	f8cd 901c 	str.w	r9, [sp, #28]
 800595a:	2230      	movs	r2, #48	; 0x30
 800595c:	9b07      	ldr	r3, [sp, #28]
 800595e:	454b      	cmp	r3, r9
 8005960:	d307      	bcc.n	8005972 <__cvt+0xb6>
 8005962:	4630      	mov	r0, r6
 8005964:	9b07      	ldr	r3, [sp, #28]
 8005966:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005968:	1b9b      	subs	r3, r3, r6
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	b008      	add	sp, #32
 800596e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005972:	1c59      	adds	r1, r3, #1
 8005974:	9107      	str	r1, [sp, #28]
 8005976:	701a      	strb	r2, [r3, #0]
 8005978:	e7f0      	b.n	800595c <__cvt+0xa0>

0800597a <__exponent>:
 800597a:	4603      	mov	r3, r0
 800597c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800597e:	2900      	cmp	r1, #0
 8005980:	f803 2b02 	strb.w	r2, [r3], #2
 8005984:	bfb6      	itet	lt
 8005986:	222d      	movlt	r2, #45	; 0x2d
 8005988:	222b      	movge	r2, #43	; 0x2b
 800598a:	4249      	neglt	r1, r1
 800598c:	2909      	cmp	r1, #9
 800598e:	7042      	strb	r2, [r0, #1]
 8005990:	dd2b      	ble.n	80059ea <__exponent+0x70>
 8005992:	f10d 0407 	add.w	r4, sp, #7
 8005996:	46a4      	mov	ip, r4
 8005998:	270a      	movs	r7, #10
 800599a:	fb91 f6f7 	sdiv	r6, r1, r7
 800599e:	460a      	mov	r2, r1
 80059a0:	46a6      	mov	lr, r4
 80059a2:	fb07 1516 	mls	r5, r7, r6, r1
 80059a6:	2a63      	cmp	r2, #99	; 0x63
 80059a8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80059ac:	4631      	mov	r1, r6
 80059ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80059b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80059b6:	dcf0      	bgt.n	800599a <__exponent+0x20>
 80059b8:	3130      	adds	r1, #48	; 0x30
 80059ba:	f1ae 0502 	sub.w	r5, lr, #2
 80059be:	f804 1c01 	strb.w	r1, [r4, #-1]
 80059c2:	4629      	mov	r1, r5
 80059c4:	1c44      	adds	r4, r0, #1
 80059c6:	4561      	cmp	r1, ip
 80059c8:	d30a      	bcc.n	80059e0 <__exponent+0x66>
 80059ca:	f10d 0209 	add.w	r2, sp, #9
 80059ce:	eba2 020e 	sub.w	r2, r2, lr
 80059d2:	4565      	cmp	r5, ip
 80059d4:	bf88      	it	hi
 80059d6:	2200      	movhi	r2, #0
 80059d8:	4413      	add	r3, r2
 80059da:	1a18      	subs	r0, r3, r0
 80059dc:	b003      	add	sp, #12
 80059de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059e4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80059e8:	e7ed      	b.n	80059c6 <__exponent+0x4c>
 80059ea:	2330      	movs	r3, #48	; 0x30
 80059ec:	3130      	adds	r1, #48	; 0x30
 80059ee:	7083      	strb	r3, [r0, #2]
 80059f0:	70c1      	strb	r1, [r0, #3]
 80059f2:	1d03      	adds	r3, r0, #4
 80059f4:	e7f1      	b.n	80059da <__exponent+0x60>
	...

080059f8 <_printf_float>:
 80059f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059fc:	b091      	sub	sp, #68	; 0x44
 80059fe:	460c      	mov	r4, r1
 8005a00:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005a04:	4616      	mov	r6, r2
 8005a06:	461f      	mov	r7, r3
 8005a08:	4605      	mov	r5, r0
 8005a0a:	f001 fb41 	bl	8007090 <_localeconv_r>
 8005a0e:	6803      	ldr	r3, [r0, #0]
 8005a10:	4618      	mov	r0, r3
 8005a12:	9309      	str	r3, [sp, #36]	; 0x24
 8005a14:	f7fa fc08 	bl	8000228 <strlen>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	930e      	str	r3, [sp, #56]	; 0x38
 8005a1c:	f8d8 3000 	ldr.w	r3, [r8]
 8005a20:	900a      	str	r0, [sp, #40]	; 0x28
 8005a22:	3307      	adds	r3, #7
 8005a24:	f023 0307 	bic.w	r3, r3, #7
 8005a28:	f103 0208 	add.w	r2, r3, #8
 8005a2c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005a30:	f8d4 b000 	ldr.w	fp, [r4]
 8005a34:	f8c8 2000 	str.w	r2, [r8]
 8005a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a40:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005a44:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005a48:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a4e:	4640      	mov	r0, r8
 8005a50:	4b9c      	ldr	r3, [pc, #624]	; (8005cc4 <_printf_float+0x2cc>)
 8005a52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a54:	f7fb f846 	bl	8000ae4 <__aeabi_dcmpun>
 8005a58:	bb70      	cbnz	r0, 8005ab8 <_printf_float+0xc0>
 8005a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5e:	4640      	mov	r0, r8
 8005a60:	4b98      	ldr	r3, [pc, #608]	; (8005cc4 <_printf_float+0x2cc>)
 8005a62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a64:	f7fb f820 	bl	8000aa8 <__aeabi_dcmple>
 8005a68:	bb30      	cbnz	r0, 8005ab8 <_printf_float+0xc0>
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	4640      	mov	r0, r8
 8005a70:	4651      	mov	r1, sl
 8005a72:	f7fb f80f 	bl	8000a94 <__aeabi_dcmplt>
 8005a76:	b110      	cbz	r0, 8005a7e <_printf_float+0x86>
 8005a78:	232d      	movs	r3, #45	; 0x2d
 8005a7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a7e:	4b92      	ldr	r3, [pc, #584]	; (8005cc8 <_printf_float+0x2d0>)
 8005a80:	4892      	ldr	r0, [pc, #584]	; (8005ccc <_printf_float+0x2d4>)
 8005a82:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005a86:	bf94      	ite	ls
 8005a88:	4698      	movls	r8, r3
 8005a8a:	4680      	movhi	r8, r0
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	f04f 0a00 	mov.w	sl, #0
 8005a92:	6123      	str	r3, [r4, #16]
 8005a94:	f02b 0304 	bic.w	r3, fp, #4
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	4633      	mov	r3, r6
 8005a9c:	4621      	mov	r1, r4
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	9700      	str	r7, [sp, #0]
 8005aa2:	aa0f      	add	r2, sp, #60	; 0x3c
 8005aa4:	f000 f9d4 	bl	8005e50 <_printf_common>
 8005aa8:	3001      	adds	r0, #1
 8005aaa:	f040 8090 	bne.w	8005bce <_printf_float+0x1d6>
 8005aae:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab2:	b011      	add	sp, #68	; 0x44
 8005ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab8:	4642      	mov	r2, r8
 8005aba:	4653      	mov	r3, sl
 8005abc:	4640      	mov	r0, r8
 8005abe:	4651      	mov	r1, sl
 8005ac0:	f7fb f810 	bl	8000ae4 <__aeabi_dcmpun>
 8005ac4:	b148      	cbz	r0, 8005ada <_printf_float+0xe2>
 8005ac6:	f1ba 0f00 	cmp.w	sl, #0
 8005aca:	bfb8      	it	lt
 8005acc:	232d      	movlt	r3, #45	; 0x2d
 8005ace:	4880      	ldr	r0, [pc, #512]	; (8005cd0 <_printf_float+0x2d8>)
 8005ad0:	bfb8      	it	lt
 8005ad2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ad6:	4b7f      	ldr	r3, [pc, #508]	; (8005cd4 <_printf_float+0x2dc>)
 8005ad8:	e7d3      	b.n	8005a82 <_printf_float+0x8a>
 8005ada:	6863      	ldr	r3, [r4, #4]
 8005adc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	d142      	bne.n	8005b6a <_printf_float+0x172>
 8005ae4:	2306      	movs	r3, #6
 8005ae6:	6063      	str	r3, [r4, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	9206      	str	r2, [sp, #24]
 8005aec:	aa0e      	add	r2, sp, #56	; 0x38
 8005aee:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005af2:	aa0d      	add	r2, sp, #52	; 0x34
 8005af4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005af8:	9203      	str	r2, [sp, #12]
 8005afa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005afe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005b02:	6023      	str	r3, [r4, #0]
 8005b04:	6863      	ldr	r3, [r4, #4]
 8005b06:	4642      	mov	r2, r8
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	4653      	mov	r3, sl
 8005b0e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005b10:	f7ff fed4 	bl	80058bc <__cvt>
 8005b14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b16:	4680      	mov	r8, r0
 8005b18:	2947      	cmp	r1, #71	; 0x47
 8005b1a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b1c:	d108      	bne.n	8005b30 <_printf_float+0x138>
 8005b1e:	1cc8      	adds	r0, r1, #3
 8005b20:	db02      	blt.n	8005b28 <_printf_float+0x130>
 8005b22:	6863      	ldr	r3, [r4, #4]
 8005b24:	4299      	cmp	r1, r3
 8005b26:	dd40      	ble.n	8005baa <_printf_float+0x1b2>
 8005b28:	f1a9 0902 	sub.w	r9, r9, #2
 8005b2c:	fa5f f989 	uxtb.w	r9, r9
 8005b30:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005b34:	d81f      	bhi.n	8005b76 <_printf_float+0x17e>
 8005b36:	464a      	mov	r2, r9
 8005b38:	3901      	subs	r1, #1
 8005b3a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b3e:	910d      	str	r1, [sp, #52]	; 0x34
 8005b40:	f7ff ff1b 	bl	800597a <__exponent>
 8005b44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b46:	4682      	mov	sl, r0
 8005b48:	1813      	adds	r3, r2, r0
 8005b4a:	2a01      	cmp	r2, #1
 8005b4c:	6123      	str	r3, [r4, #16]
 8005b4e:	dc02      	bgt.n	8005b56 <_printf_float+0x15e>
 8005b50:	6822      	ldr	r2, [r4, #0]
 8005b52:	07d2      	lsls	r2, r2, #31
 8005b54:	d501      	bpl.n	8005b5a <_printf_float+0x162>
 8005b56:	3301      	adds	r3, #1
 8005b58:	6123      	str	r3, [r4, #16]
 8005b5a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d09b      	beq.n	8005a9a <_printf_float+0xa2>
 8005b62:	232d      	movs	r3, #45	; 0x2d
 8005b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b68:	e797      	b.n	8005a9a <_printf_float+0xa2>
 8005b6a:	2947      	cmp	r1, #71	; 0x47
 8005b6c:	d1bc      	bne.n	8005ae8 <_printf_float+0xf0>
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1ba      	bne.n	8005ae8 <_printf_float+0xf0>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e7b7      	b.n	8005ae6 <_printf_float+0xee>
 8005b76:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005b7a:	d118      	bne.n	8005bae <_printf_float+0x1b6>
 8005b7c:	2900      	cmp	r1, #0
 8005b7e:	6863      	ldr	r3, [r4, #4]
 8005b80:	dd0b      	ble.n	8005b9a <_printf_float+0x1a2>
 8005b82:	6121      	str	r1, [r4, #16]
 8005b84:	b913      	cbnz	r3, 8005b8c <_printf_float+0x194>
 8005b86:	6822      	ldr	r2, [r4, #0]
 8005b88:	07d0      	lsls	r0, r2, #31
 8005b8a:	d502      	bpl.n	8005b92 <_printf_float+0x19a>
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	440b      	add	r3, r1
 8005b90:	6123      	str	r3, [r4, #16]
 8005b92:	f04f 0a00 	mov.w	sl, #0
 8005b96:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b98:	e7df      	b.n	8005b5a <_printf_float+0x162>
 8005b9a:	b913      	cbnz	r3, 8005ba2 <_printf_float+0x1aa>
 8005b9c:	6822      	ldr	r2, [r4, #0]
 8005b9e:	07d2      	lsls	r2, r2, #31
 8005ba0:	d501      	bpl.n	8005ba6 <_printf_float+0x1ae>
 8005ba2:	3302      	adds	r3, #2
 8005ba4:	e7f4      	b.n	8005b90 <_printf_float+0x198>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e7f2      	b.n	8005b90 <_printf_float+0x198>
 8005baa:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005bae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bb0:	4299      	cmp	r1, r3
 8005bb2:	db05      	blt.n	8005bc0 <_printf_float+0x1c8>
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	6121      	str	r1, [r4, #16]
 8005bb8:	07d8      	lsls	r0, r3, #31
 8005bba:	d5ea      	bpl.n	8005b92 <_printf_float+0x19a>
 8005bbc:	1c4b      	adds	r3, r1, #1
 8005bbe:	e7e7      	b.n	8005b90 <_printf_float+0x198>
 8005bc0:	2900      	cmp	r1, #0
 8005bc2:	bfcc      	ite	gt
 8005bc4:	2201      	movgt	r2, #1
 8005bc6:	f1c1 0202 	rsble	r2, r1, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	e7e0      	b.n	8005b90 <_printf_float+0x198>
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	055a      	lsls	r2, r3, #21
 8005bd2:	d407      	bmi.n	8005be4 <_printf_float+0x1ec>
 8005bd4:	6923      	ldr	r3, [r4, #16]
 8005bd6:	4642      	mov	r2, r8
 8005bd8:	4631      	mov	r1, r6
 8005bda:	4628      	mov	r0, r5
 8005bdc:	47b8      	blx	r7
 8005bde:	3001      	adds	r0, #1
 8005be0:	d12b      	bne.n	8005c3a <_printf_float+0x242>
 8005be2:	e764      	b.n	8005aae <_printf_float+0xb6>
 8005be4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005be8:	f240 80dd 	bls.w	8005da6 <_printf_float+0x3ae>
 8005bec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f7fa ff44 	bl	8000a80 <__aeabi_dcmpeq>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	d033      	beq.n	8005c64 <_printf_float+0x26c>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	4631      	mov	r1, r6
 8005c00:	4628      	mov	r0, r5
 8005c02:	4a35      	ldr	r2, [pc, #212]	; (8005cd8 <_printf_float+0x2e0>)
 8005c04:	47b8      	blx	r7
 8005c06:	3001      	adds	r0, #1
 8005c08:	f43f af51 	beq.w	8005aae <_printf_float+0xb6>
 8005c0c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c10:	429a      	cmp	r2, r3
 8005c12:	db02      	blt.n	8005c1a <_printf_float+0x222>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	07d8      	lsls	r0, r3, #31
 8005c18:	d50f      	bpl.n	8005c3a <_printf_float+0x242>
 8005c1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c1e:	4631      	mov	r1, r6
 8005c20:	4628      	mov	r0, r5
 8005c22:	47b8      	blx	r7
 8005c24:	3001      	adds	r0, #1
 8005c26:	f43f af42 	beq.w	8005aae <_printf_float+0xb6>
 8005c2a:	f04f 0800 	mov.w	r8, #0
 8005c2e:	f104 091a 	add.w	r9, r4, #26
 8005c32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c34:	3b01      	subs	r3, #1
 8005c36:	4543      	cmp	r3, r8
 8005c38:	dc09      	bgt.n	8005c4e <_printf_float+0x256>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	079b      	lsls	r3, r3, #30
 8005c3e:	f100 8102 	bmi.w	8005e46 <_printf_float+0x44e>
 8005c42:	68e0      	ldr	r0, [r4, #12]
 8005c44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c46:	4298      	cmp	r0, r3
 8005c48:	bfb8      	it	lt
 8005c4a:	4618      	movlt	r0, r3
 8005c4c:	e731      	b.n	8005ab2 <_printf_float+0xba>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	464a      	mov	r2, r9
 8005c52:	4631      	mov	r1, r6
 8005c54:	4628      	mov	r0, r5
 8005c56:	47b8      	blx	r7
 8005c58:	3001      	adds	r0, #1
 8005c5a:	f43f af28 	beq.w	8005aae <_printf_float+0xb6>
 8005c5e:	f108 0801 	add.w	r8, r8, #1
 8005c62:	e7e6      	b.n	8005c32 <_printf_float+0x23a>
 8005c64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	dc38      	bgt.n	8005cdc <_printf_float+0x2e4>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	4631      	mov	r1, r6
 8005c6e:	4628      	mov	r0, r5
 8005c70:	4a19      	ldr	r2, [pc, #100]	; (8005cd8 <_printf_float+0x2e0>)
 8005c72:	47b8      	blx	r7
 8005c74:	3001      	adds	r0, #1
 8005c76:	f43f af1a 	beq.w	8005aae <_printf_float+0xb6>
 8005c7a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	d102      	bne.n	8005c88 <_printf_float+0x290>
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	07d9      	lsls	r1, r3, #31
 8005c86:	d5d8      	bpl.n	8005c3a <_printf_float+0x242>
 8005c88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c8c:	4631      	mov	r1, r6
 8005c8e:	4628      	mov	r0, r5
 8005c90:	47b8      	blx	r7
 8005c92:	3001      	adds	r0, #1
 8005c94:	f43f af0b 	beq.w	8005aae <_printf_float+0xb6>
 8005c98:	f04f 0900 	mov.w	r9, #0
 8005c9c:	f104 0a1a 	add.w	sl, r4, #26
 8005ca0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ca2:	425b      	negs	r3, r3
 8005ca4:	454b      	cmp	r3, r9
 8005ca6:	dc01      	bgt.n	8005cac <_printf_float+0x2b4>
 8005ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005caa:	e794      	b.n	8005bd6 <_printf_float+0x1de>
 8005cac:	2301      	movs	r3, #1
 8005cae:	4652      	mov	r2, sl
 8005cb0:	4631      	mov	r1, r6
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	47b8      	blx	r7
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	f43f aef9 	beq.w	8005aae <_printf_float+0xb6>
 8005cbc:	f109 0901 	add.w	r9, r9, #1
 8005cc0:	e7ee      	b.n	8005ca0 <_printf_float+0x2a8>
 8005cc2:	bf00      	nop
 8005cc4:	7fefffff 	.word	0x7fefffff
 8005cc8:	080083f0 	.word	0x080083f0
 8005ccc:	080083f4 	.word	0x080083f4
 8005cd0:	080083fc 	.word	0x080083fc
 8005cd4:	080083f8 	.word	0x080083f8
 8005cd8:	08008400 	.word	0x08008400
 8005cdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	bfa8      	it	ge
 8005ce4:	461a      	movge	r2, r3
 8005ce6:	2a00      	cmp	r2, #0
 8005ce8:	4691      	mov	r9, r2
 8005cea:	dc37      	bgt.n	8005d5c <_printf_float+0x364>
 8005cec:	f04f 0b00 	mov.w	fp, #0
 8005cf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cf4:	f104 021a 	add.w	r2, r4, #26
 8005cf8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005cfc:	ebaa 0309 	sub.w	r3, sl, r9
 8005d00:	455b      	cmp	r3, fp
 8005d02:	dc33      	bgt.n	8005d6c <_printf_float+0x374>
 8005d04:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	db3b      	blt.n	8005d84 <_printf_float+0x38c>
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	07da      	lsls	r2, r3, #31
 8005d10:	d438      	bmi.n	8005d84 <_printf_float+0x38c>
 8005d12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d14:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d16:	eba3 020a 	sub.w	r2, r3, sl
 8005d1a:	eba3 0901 	sub.w	r9, r3, r1
 8005d1e:	4591      	cmp	r9, r2
 8005d20:	bfa8      	it	ge
 8005d22:	4691      	movge	r9, r2
 8005d24:	f1b9 0f00 	cmp.w	r9, #0
 8005d28:	dc34      	bgt.n	8005d94 <_printf_float+0x39c>
 8005d2a:	f04f 0800 	mov.w	r8, #0
 8005d2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d32:	f104 0a1a 	add.w	sl, r4, #26
 8005d36:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d3a:	1a9b      	subs	r3, r3, r2
 8005d3c:	eba3 0309 	sub.w	r3, r3, r9
 8005d40:	4543      	cmp	r3, r8
 8005d42:	f77f af7a 	ble.w	8005c3a <_printf_float+0x242>
 8005d46:	2301      	movs	r3, #1
 8005d48:	4652      	mov	r2, sl
 8005d4a:	4631      	mov	r1, r6
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	47b8      	blx	r7
 8005d50:	3001      	adds	r0, #1
 8005d52:	f43f aeac 	beq.w	8005aae <_printf_float+0xb6>
 8005d56:	f108 0801 	add.w	r8, r8, #1
 8005d5a:	e7ec      	b.n	8005d36 <_printf_float+0x33e>
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	4631      	mov	r1, r6
 8005d60:	4642      	mov	r2, r8
 8005d62:	4628      	mov	r0, r5
 8005d64:	47b8      	blx	r7
 8005d66:	3001      	adds	r0, #1
 8005d68:	d1c0      	bne.n	8005cec <_printf_float+0x2f4>
 8005d6a:	e6a0      	b.n	8005aae <_printf_float+0xb6>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	4631      	mov	r1, r6
 8005d70:	4628      	mov	r0, r5
 8005d72:	920b      	str	r2, [sp, #44]	; 0x2c
 8005d74:	47b8      	blx	r7
 8005d76:	3001      	adds	r0, #1
 8005d78:	f43f ae99 	beq.w	8005aae <_printf_float+0xb6>
 8005d7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d7e:	f10b 0b01 	add.w	fp, fp, #1
 8005d82:	e7b9      	b.n	8005cf8 <_printf_float+0x300>
 8005d84:	4631      	mov	r1, r6
 8005d86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	47b8      	blx	r7
 8005d8e:	3001      	adds	r0, #1
 8005d90:	d1bf      	bne.n	8005d12 <_printf_float+0x31a>
 8005d92:	e68c      	b.n	8005aae <_printf_float+0xb6>
 8005d94:	464b      	mov	r3, r9
 8005d96:	4631      	mov	r1, r6
 8005d98:	4628      	mov	r0, r5
 8005d9a:	eb08 020a 	add.w	r2, r8, sl
 8005d9e:	47b8      	blx	r7
 8005da0:	3001      	adds	r0, #1
 8005da2:	d1c2      	bne.n	8005d2a <_printf_float+0x332>
 8005da4:	e683      	b.n	8005aae <_printf_float+0xb6>
 8005da6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005da8:	2a01      	cmp	r2, #1
 8005daa:	dc01      	bgt.n	8005db0 <_printf_float+0x3b8>
 8005dac:	07db      	lsls	r3, r3, #31
 8005dae:	d537      	bpl.n	8005e20 <_printf_float+0x428>
 8005db0:	2301      	movs	r3, #1
 8005db2:	4642      	mov	r2, r8
 8005db4:	4631      	mov	r1, r6
 8005db6:	4628      	mov	r0, r5
 8005db8:	47b8      	blx	r7
 8005dba:	3001      	adds	r0, #1
 8005dbc:	f43f ae77 	beq.w	8005aae <_printf_float+0xb6>
 8005dc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	47b8      	blx	r7
 8005dca:	3001      	adds	r0, #1
 8005dcc:	f43f ae6f 	beq.w	8005aae <_printf_float+0xb6>
 8005dd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f7fa fe52 	bl	8000a80 <__aeabi_dcmpeq>
 8005ddc:	b9d8      	cbnz	r0, 8005e16 <_printf_float+0x41e>
 8005dde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005de0:	f108 0201 	add.w	r2, r8, #1
 8005de4:	3b01      	subs	r3, #1
 8005de6:	4631      	mov	r1, r6
 8005de8:	4628      	mov	r0, r5
 8005dea:	47b8      	blx	r7
 8005dec:	3001      	adds	r0, #1
 8005dee:	d10e      	bne.n	8005e0e <_printf_float+0x416>
 8005df0:	e65d      	b.n	8005aae <_printf_float+0xb6>
 8005df2:	2301      	movs	r3, #1
 8005df4:	464a      	mov	r2, r9
 8005df6:	4631      	mov	r1, r6
 8005df8:	4628      	mov	r0, r5
 8005dfa:	47b8      	blx	r7
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	f43f ae56 	beq.w	8005aae <_printf_float+0xb6>
 8005e02:	f108 0801 	add.w	r8, r8, #1
 8005e06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	4543      	cmp	r3, r8
 8005e0c:	dcf1      	bgt.n	8005df2 <_printf_float+0x3fa>
 8005e0e:	4653      	mov	r3, sl
 8005e10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e14:	e6e0      	b.n	8005bd8 <_printf_float+0x1e0>
 8005e16:	f04f 0800 	mov.w	r8, #0
 8005e1a:	f104 091a 	add.w	r9, r4, #26
 8005e1e:	e7f2      	b.n	8005e06 <_printf_float+0x40e>
 8005e20:	2301      	movs	r3, #1
 8005e22:	4642      	mov	r2, r8
 8005e24:	e7df      	b.n	8005de6 <_printf_float+0x3ee>
 8005e26:	2301      	movs	r3, #1
 8005e28:	464a      	mov	r2, r9
 8005e2a:	4631      	mov	r1, r6
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	47b8      	blx	r7
 8005e30:	3001      	adds	r0, #1
 8005e32:	f43f ae3c 	beq.w	8005aae <_printf_float+0xb6>
 8005e36:	f108 0801 	add.w	r8, r8, #1
 8005e3a:	68e3      	ldr	r3, [r4, #12]
 8005e3c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005e3e:	1a5b      	subs	r3, r3, r1
 8005e40:	4543      	cmp	r3, r8
 8005e42:	dcf0      	bgt.n	8005e26 <_printf_float+0x42e>
 8005e44:	e6fd      	b.n	8005c42 <_printf_float+0x24a>
 8005e46:	f04f 0800 	mov.w	r8, #0
 8005e4a:	f104 0919 	add.w	r9, r4, #25
 8005e4e:	e7f4      	b.n	8005e3a <_printf_float+0x442>

08005e50 <_printf_common>:
 8005e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e54:	4616      	mov	r6, r2
 8005e56:	4699      	mov	r9, r3
 8005e58:	688a      	ldr	r2, [r1, #8]
 8005e5a:	690b      	ldr	r3, [r1, #16]
 8005e5c:	4607      	mov	r7, r0
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	bfb8      	it	lt
 8005e62:	4613      	movlt	r3, r2
 8005e64:	6033      	str	r3, [r6, #0]
 8005e66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e70:	b10a      	cbz	r2, 8005e76 <_printf_common+0x26>
 8005e72:	3301      	adds	r3, #1
 8005e74:	6033      	str	r3, [r6, #0]
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	0699      	lsls	r1, r3, #26
 8005e7a:	bf42      	ittt	mi
 8005e7c:	6833      	ldrmi	r3, [r6, #0]
 8005e7e:	3302      	addmi	r3, #2
 8005e80:	6033      	strmi	r3, [r6, #0]
 8005e82:	6825      	ldr	r5, [r4, #0]
 8005e84:	f015 0506 	ands.w	r5, r5, #6
 8005e88:	d106      	bne.n	8005e98 <_printf_common+0x48>
 8005e8a:	f104 0a19 	add.w	sl, r4, #25
 8005e8e:	68e3      	ldr	r3, [r4, #12]
 8005e90:	6832      	ldr	r2, [r6, #0]
 8005e92:	1a9b      	subs	r3, r3, r2
 8005e94:	42ab      	cmp	r3, r5
 8005e96:	dc28      	bgt.n	8005eea <_printf_common+0x9a>
 8005e98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e9c:	1e13      	subs	r3, r2, #0
 8005e9e:	6822      	ldr	r2, [r4, #0]
 8005ea0:	bf18      	it	ne
 8005ea2:	2301      	movne	r3, #1
 8005ea4:	0692      	lsls	r2, r2, #26
 8005ea6:	d42d      	bmi.n	8005f04 <_printf_common+0xb4>
 8005ea8:	4649      	mov	r1, r9
 8005eaa:	4638      	mov	r0, r7
 8005eac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005eb0:	47c0      	blx	r8
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	d020      	beq.n	8005ef8 <_printf_common+0xa8>
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	68e5      	ldr	r5, [r4, #12]
 8005eba:	f003 0306 	and.w	r3, r3, #6
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	bf18      	it	ne
 8005ec2:	2500      	movne	r5, #0
 8005ec4:	6832      	ldr	r2, [r6, #0]
 8005ec6:	f04f 0600 	mov.w	r6, #0
 8005eca:	68a3      	ldr	r3, [r4, #8]
 8005ecc:	bf08      	it	eq
 8005ece:	1aad      	subeq	r5, r5, r2
 8005ed0:	6922      	ldr	r2, [r4, #16]
 8005ed2:	bf08      	it	eq
 8005ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	bfc4      	itt	gt
 8005edc:	1a9b      	subgt	r3, r3, r2
 8005ede:	18ed      	addgt	r5, r5, r3
 8005ee0:	341a      	adds	r4, #26
 8005ee2:	42b5      	cmp	r5, r6
 8005ee4:	d11a      	bne.n	8005f1c <_printf_common+0xcc>
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	e008      	b.n	8005efc <_printf_common+0xac>
 8005eea:	2301      	movs	r3, #1
 8005eec:	4652      	mov	r2, sl
 8005eee:	4649      	mov	r1, r9
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	47c0      	blx	r8
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d103      	bne.n	8005f00 <_printf_common+0xb0>
 8005ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8005efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f00:	3501      	adds	r5, #1
 8005f02:	e7c4      	b.n	8005e8e <_printf_common+0x3e>
 8005f04:	2030      	movs	r0, #48	; 0x30
 8005f06:	18e1      	adds	r1, r4, r3
 8005f08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f12:	4422      	add	r2, r4
 8005f14:	3302      	adds	r3, #2
 8005f16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f1a:	e7c5      	b.n	8005ea8 <_printf_common+0x58>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	4622      	mov	r2, r4
 8005f20:	4649      	mov	r1, r9
 8005f22:	4638      	mov	r0, r7
 8005f24:	47c0      	blx	r8
 8005f26:	3001      	adds	r0, #1
 8005f28:	d0e6      	beq.n	8005ef8 <_printf_common+0xa8>
 8005f2a:	3601      	adds	r6, #1
 8005f2c:	e7d9      	b.n	8005ee2 <_printf_common+0x92>
	...

08005f30 <_printf_i>:
 8005f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f34:	7e0f      	ldrb	r7, [r1, #24]
 8005f36:	4691      	mov	r9, r2
 8005f38:	2f78      	cmp	r7, #120	; 0x78
 8005f3a:	4680      	mov	r8, r0
 8005f3c:	460c      	mov	r4, r1
 8005f3e:	469a      	mov	sl, r3
 8005f40:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f46:	d807      	bhi.n	8005f58 <_printf_i+0x28>
 8005f48:	2f62      	cmp	r7, #98	; 0x62
 8005f4a:	d80a      	bhi.n	8005f62 <_printf_i+0x32>
 8005f4c:	2f00      	cmp	r7, #0
 8005f4e:	f000 80d9 	beq.w	8006104 <_printf_i+0x1d4>
 8005f52:	2f58      	cmp	r7, #88	; 0x58
 8005f54:	f000 80a4 	beq.w	80060a0 <_printf_i+0x170>
 8005f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f60:	e03a      	b.n	8005fd8 <_printf_i+0xa8>
 8005f62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f66:	2b15      	cmp	r3, #21
 8005f68:	d8f6      	bhi.n	8005f58 <_printf_i+0x28>
 8005f6a:	a101      	add	r1, pc, #4	; (adr r1, 8005f70 <_printf_i+0x40>)
 8005f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f70:	08005fc9 	.word	0x08005fc9
 8005f74:	08005fdd 	.word	0x08005fdd
 8005f78:	08005f59 	.word	0x08005f59
 8005f7c:	08005f59 	.word	0x08005f59
 8005f80:	08005f59 	.word	0x08005f59
 8005f84:	08005f59 	.word	0x08005f59
 8005f88:	08005fdd 	.word	0x08005fdd
 8005f8c:	08005f59 	.word	0x08005f59
 8005f90:	08005f59 	.word	0x08005f59
 8005f94:	08005f59 	.word	0x08005f59
 8005f98:	08005f59 	.word	0x08005f59
 8005f9c:	080060eb 	.word	0x080060eb
 8005fa0:	0800600d 	.word	0x0800600d
 8005fa4:	080060cd 	.word	0x080060cd
 8005fa8:	08005f59 	.word	0x08005f59
 8005fac:	08005f59 	.word	0x08005f59
 8005fb0:	0800610d 	.word	0x0800610d
 8005fb4:	08005f59 	.word	0x08005f59
 8005fb8:	0800600d 	.word	0x0800600d
 8005fbc:	08005f59 	.word	0x08005f59
 8005fc0:	08005f59 	.word	0x08005f59
 8005fc4:	080060d5 	.word	0x080060d5
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	1d1a      	adds	r2, r3, #4
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	602a      	str	r2, [r5, #0]
 8005fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e0a4      	b.n	8006126 <_printf_i+0x1f6>
 8005fdc:	6820      	ldr	r0, [r4, #0]
 8005fde:	6829      	ldr	r1, [r5, #0]
 8005fe0:	0606      	lsls	r6, r0, #24
 8005fe2:	f101 0304 	add.w	r3, r1, #4
 8005fe6:	d50a      	bpl.n	8005ffe <_printf_i+0xce>
 8005fe8:	680e      	ldr	r6, [r1, #0]
 8005fea:	602b      	str	r3, [r5, #0]
 8005fec:	2e00      	cmp	r6, #0
 8005fee:	da03      	bge.n	8005ff8 <_printf_i+0xc8>
 8005ff0:	232d      	movs	r3, #45	; 0x2d
 8005ff2:	4276      	negs	r6, r6
 8005ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ff8:	230a      	movs	r3, #10
 8005ffa:	485e      	ldr	r0, [pc, #376]	; (8006174 <_printf_i+0x244>)
 8005ffc:	e019      	b.n	8006032 <_printf_i+0x102>
 8005ffe:	680e      	ldr	r6, [r1, #0]
 8006000:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006004:	602b      	str	r3, [r5, #0]
 8006006:	bf18      	it	ne
 8006008:	b236      	sxthne	r6, r6
 800600a:	e7ef      	b.n	8005fec <_printf_i+0xbc>
 800600c:	682b      	ldr	r3, [r5, #0]
 800600e:	6820      	ldr	r0, [r4, #0]
 8006010:	1d19      	adds	r1, r3, #4
 8006012:	6029      	str	r1, [r5, #0]
 8006014:	0601      	lsls	r1, r0, #24
 8006016:	d501      	bpl.n	800601c <_printf_i+0xec>
 8006018:	681e      	ldr	r6, [r3, #0]
 800601a:	e002      	b.n	8006022 <_printf_i+0xf2>
 800601c:	0646      	lsls	r6, r0, #25
 800601e:	d5fb      	bpl.n	8006018 <_printf_i+0xe8>
 8006020:	881e      	ldrh	r6, [r3, #0]
 8006022:	2f6f      	cmp	r7, #111	; 0x6f
 8006024:	bf0c      	ite	eq
 8006026:	2308      	moveq	r3, #8
 8006028:	230a      	movne	r3, #10
 800602a:	4852      	ldr	r0, [pc, #328]	; (8006174 <_printf_i+0x244>)
 800602c:	2100      	movs	r1, #0
 800602e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006032:	6865      	ldr	r5, [r4, #4]
 8006034:	2d00      	cmp	r5, #0
 8006036:	bfa8      	it	ge
 8006038:	6821      	ldrge	r1, [r4, #0]
 800603a:	60a5      	str	r5, [r4, #8]
 800603c:	bfa4      	itt	ge
 800603e:	f021 0104 	bicge.w	r1, r1, #4
 8006042:	6021      	strge	r1, [r4, #0]
 8006044:	b90e      	cbnz	r6, 800604a <_printf_i+0x11a>
 8006046:	2d00      	cmp	r5, #0
 8006048:	d04d      	beq.n	80060e6 <_printf_i+0x1b6>
 800604a:	4615      	mov	r5, r2
 800604c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006050:	fb03 6711 	mls	r7, r3, r1, r6
 8006054:	5dc7      	ldrb	r7, [r0, r7]
 8006056:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800605a:	4637      	mov	r7, r6
 800605c:	42bb      	cmp	r3, r7
 800605e:	460e      	mov	r6, r1
 8006060:	d9f4      	bls.n	800604c <_printf_i+0x11c>
 8006062:	2b08      	cmp	r3, #8
 8006064:	d10b      	bne.n	800607e <_printf_i+0x14e>
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	07de      	lsls	r6, r3, #31
 800606a:	d508      	bpl.n	800607e <_printf_i+0x14e>
 800606c:	6923      	ldr	r3, [r4, #16]
 800606e:	6861      	ldr	r1, [r4, #4]
 8006070:	4299      	cmp	r1, r3
 8006072:	bfde      	ittt	le
 8006074:	2330      	movle	r3, #48	; 0x30
 8006076:	f805 3c01 	strble.w	r3, [r5, #-1]
 800607a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800607e:	1b52      	subs	r2, r2, r5
 8006080:	6122      	str	r2, [r4, #16]
 8006082:	464b      	mov	r3, r9
 8006084:	4621      	mov	r1, r4
 8006086:	4640      	mov	r0, r8
 8006088:	f8cd a000 	str.w	sl, [sp]
 800608c:	aa03      	add	r2, sp, #12
 800608e:	f7ff fedf 	bl	8005e50 <_printf_common>
 8006092:	3001      	adds	r0, #1
 8006094:	d14c      	bne.n	8006130 <_printf_i+0x200>
 8006096:	f04f 30ff 	mov.w	r0, #4294967295
 800609a:	b004      	add	sp, #16
 800609c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a0:	4834      	ldr	r0, [pc, #208]	; (8006174 <_printf_i+0x244>)
 80060a2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80060a6:	6829      	ldr	r1, [r5, #0]
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	f851 6b04 	ldr.w	r6, [r1], #4
 80060ae:	6029      	str	r1, [r5, #0]
 80060b0:	061d      	lsls	r5, r3, #24
 80060b2:	d514      	bpl.n	80060de <_printf_i+0x1ae>
 80060b4:	07df      	lsls	r7, r3, #31
 80060b6:	bf44      	itt	mi
 80060b8:	f043 0320 	orrmi.w	r3, r3, #32
 80060bc:	6023      	strmi	r3, [r4, #0]
 80060be:	b91e      	cbnz	r6, 80060c8 <_printf_i+0x198>
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	f023 0320 	bic.w	r3, r3, #32
 80060c6:	6023      	str	r3, [r4, #0]
 80060c8:	2310      	movs	r3, #16
 80060ca:	e7af      	b.n	800602c <_printf_i+0xfc>
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	f043 0320 	orr.w	r3, r3, #32
 80060d2:	6023      	str	r3, [r4, #0]
 80060d4:	2378      	movs	r3, #120	; 0x78
 80060d6:	4828      	ldr	r0, [pc, #160]	; (8006178 <_printf_i+0x248>)
 80060d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060dc:	e7e3      	b.n	80060a6 <_printf_i+0x176>
 80060de:	0659      	lsls	r1, r3, #25
 80060e0:	bf48      	it	mi
 80060e2:	b2b6      	uxthmi	r6, r6
 80060e4:	e7e6      	b.n	80060b4 <_printf_i+0x184>
 80060e6:	4615      	mov	r5, r2
 80060e8:	e7bb      	b.n	8006062 <_printf_i+0x132>
 80060ea:	682b      	ldr	r3, [r5, #0]
 80060ec:	6826      	ldr	r6, [r4, #0]
 80060ee:	1d18      	adds	r0, r3, #4
 80060f0:	6961      	ldr	r1, [r4, #20]
 80060f2:	6028      	str	r0, [r5, #0]
 80060f4:	0635      	lsls	r5, r6, #24
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	d501      	bpl.n	80060fe <_printf_i+0x1ce>
 80060fa:	6019      	str	r1, [r3, #0]
 80060fc:	e002      	b.n	8006104 <_printf_i+0x1d4>
 80060fe:	0670      	lsls	r0, r6, #25
 8006100:	d5fb      	bpl.n	80060fa <_printf_i+0x1ca>
 8006102:	8019      	strh	r1, [r3, #0]
 8006104:	2300      	movs	r3, #0
 8006106:	4615      	mov	r5, r2
 8006108:	6123      	str	r3, [r4, #16]
 800610a:	e7ba      	b.n	8006082 <_printf_i+0x152>
 800610c:	682b      	ldr	r3, [r5, #0]
 800610e:	2100      	movs	r1, #0
 8006110:	1d1a      	adds	r2, r3, #4
 8006112:	602a      	str	r2, [r5, #0]
 8006114:	681d      	ldr	r5, [r3, #0]
 8006116:	6862      	ldr	r2, [r4, #4]
 8006118:	4628      	mov	r0, r5
 800611a:	f000 ffc9 	bl	80070b0 <memchr>
 800611e:	b108      	cbz	r0, 8006124 <_printf_i+0x1f4>
 8006120:	1b40      	subs	r0, r0, r5
 8006122:	6060      	str	r0, [r4, #4]
 8006124:	6863      	ldr	r3, [r4, #4]
 8006126:	6123      	str	r3, [r4, #16]
 8006128:	2300      	movs	r3, #0
 800612a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800612e:	e7a8      	b.n	8006082 <_printf_i+0x152>
 8006130:	462a      	mov	r2, r5
 8006132:	4649      	mov	r1, r9
 8006134:	4640      	mov	r0, r8
 8006136:	6923      	ldr	r3, [r4, #16]
 8006138:	47d0      	blx	sl
 800613a:	3001      	adds	r0, #1
 800613c:	d0ab      	beq.n	8006096 <_printf_i+0x166>
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	079b      	lsls	r3, r3, #30
 8006142:	d413      	bmi.n	800616c <_printf_i+0x23c>
 8006144:	68e0      	ldr	r0, [r4, #12]
 8006146:	9b03      	ldr	r3, [sp, #12]
 8006148:	4298      	cmp	r0, r3
 800614a:	bfb8      	it	lt
 800614c:	4618      	movlt	r0, r3
 800614e:	e7a4      	b.n	800609a <_printf_i+0x16a>
 8006150:	2301      	movs	r3, #1
 8006152:	4632      	mov	r2, r6
 8006154:	4649      	mov	r1, r9
 8006156:	4640      	mov	r0, r8
 8006158:	47d0      	blx	sl
 800615a:	3001      	adds	r0, #1
 800615c:	d09b      	beq.n	8006096 <_printf_i+0x166>
 800615e:	3501      	adds	r5, #1
 8006160:	68e3      	ldr	r3, [r4, #12]
 8006162:	9903      	ldr	r1, [sp, #12]
 8006164:	1a5b      	subs	r3, r3, r1
 8006166:	42ab      	cmp	r3, r5
 8006168:	dcf2      	bgt.n	8006150 <_printf_i+0x220>
 800616a:	e7eb      	b.n	8006144 <_printf_i+0x214>
 800616c:	2500      	movs	r5, #0
 800616e:	f104 0619 	add.w	r6, r4, #25
 8006172:	e7f5      	b.n	8006160 <_printf_i+0x230>
 8006174:	08008402 	.word	0x08008402
 8006178:	08008413 	.word	0x08008413

0800617c <iprintf>:
 800617c:	b40f      	push	{r0, r1, r2, r3}
 800617e:	4b0a      	ldr	r3, [pc, #40]	; (80061a8 <iprintf+0x2c>)
 8006180:	b513      	push	{r0, r1, r4, lr}
 8006182:	681c      	ldr	r4, [r3, #0]
 8006184:	b124      	cbz	r4, 8006190 <iprintf+0x14>
 8006186:	69a3      	ldr	r3, [r4, #24]
 8006188:	b913      	cbnz	r3, 8006190 <iprintf+0x14>
 800618a:	4620      	mov	r0, r4
 800618c:	f000 fee2 	bl	8006f54 <__sinit>
 8006190:	ab05      	add	r3, sp, #20
 8006192:	4620      	mov	r0, r4
 8006194:	9a04      	ldr	r2, [sp, #16]
 8006196:	68a1      	ldr	r1, [r4, #8]
 8006198:	9301      	str	r3, [sp, #4]
 800619a:	f001 fc3f 	bl	8007a1c <_vfiprintf_r>
 800619e:	b002      	add	sp, #8
 80061a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061a4:	b004      	add	sp, #16
 80061a6:	4770      	bx	lr
 80061a8:	20000014 	.word	0x20000014

080061ac <quorem>:
 80061ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b0:	6903      	ldr	r3, [r0, #16]
 80061b2:	690c      	ldr	r4, [r1, #16]
 80061b4:	4607      	mov	r7, r0
 80061b6:	42a3      	cmp	r3, r4
 80061b8:	f2c0 8082 	blt.w	80062c0 <quorem+0x114>
 80061bc:	3c01      	subs	r4, #1
 80061be:	f100 0514 	add.w	r5, r0, #20
 80061c2:	f101 0814 	add.w	r8, r1, #20
 80061c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061ca:	9301      	str	r3, [sp, #4]
 80061cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061d4:	3301      	adds	r3, #1
 80061d6:	429a      	cmp	r2, r3
 80061d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80061dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061e4:	d331      	bcc.n	800624a <quorem+0x9e>
 80061e6:	f04f 0e00 	mov.w	lr, #0
 80061ea:	4640      	mov	r0, r8
 80061ec:	46ac      	mov	ip, r5
 80061ee:	46f2      	mov	sl, lr
 80061f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80061f4:	b293      	uxth	r3, r2
 80061f6:	fb06 e303 	mla	r3, r6, r3, lr
 80061fa:	0c12      	lsrs	r2, r2, #16
 80061fc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006200:	b29b      	uxth	r3, r3
 8006202:	fb06 e202 	mla	r2, r6, r2, lr
 8006206:	ebaa 0303 	sub.w	r3, sl, r3
 800620a:	f8dc a000 	ldr.w	sl, [ip]
 800620e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006212:	fa1f fa8a 	uxth.w	sl, sl
 8006216:	4453      	add	r3, sl
 8006218:	f8dc a000 	ldr.w	sl, [ip]
 800621c:	b292      	uxth	r2, r2
 800621e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006222:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006226:	b29b      	uxth	r3, r3
 8006228:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800622c:	4581      	cmp	r9, r0
 800622e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006232:	f84c 3b04 	str.w	r3, [ip], #4
 8006236:	d2db      	bcs.n	80061f0 <quorem+0x44>
 8006238:	f855 300b 	ldr.w	r3, [r5, fp]
 800623c:	b92b      	cbnz	r3, 800624a <quorem+0x9e>
 800623e:	9b01      	ldr	r3, [sp, #4]
 8006240:	3b04      	subs	r3, #4
 8006242:	429d      	cmp	r5, r3
 8006244:	461a      	mov	r2, r3
 8006246:	d32f      	bcc.n	80062a8 <quorem+0xfc>
 8006248:	613c      	str	r4, [r7, #16]
 800624a:	4638      	mov	r0, r7
 800624c:	f001 f9ca 	bl	80075e4 <__mcmp>
 8006250:	2800      	cmp	r0, #0
 8006252:	db25      	blt.n	80062a0 <quorem+0xf4>
 8006254:	4628      	mov	r0, r5
 8006256:	f04f 0c00 	mov.w	ip, #0
 800625a:	3601      	adds	r6, #1
 800625c:	f858 1b04 	ldr.w	r1, [r8], #4
 8006260:	f8d0 e000 	ldr.w	lr, [r0]
 8006264:	b28b      	uxth	r3, r1
 8006266:	ebac 0303 	sub.w	r3, ip, r3
 800626a:	fa1f f28e 	uxth.w	r2, lr
 800626e:	4413      	add	r3, r2
 8006270:	0c0a      	lsrs	r2, r1, #16
 8006272:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006276:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800627a:	b29b      	uxth	r3, r3
 800627c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006280:	45c1      	cmp	r9, r8
 8006282:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006286:	f840 3b04 	str.w	r3, [r0], #4
 800628a:	d2e7      	bcs.n	800625c <quorem+0xb0>
 800628c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006290:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006294:	b922      	cbnz	r2, 80062a0 <quorem+0xf4>
 8006296:	3b04      	subs	r3, #4
 8006298:	429d      	cmp	r5, r3
 800629a:	461a      	mov	r2, r3
 800629c:	d30a      	bcc.n	80062b4 <quorem+0x108>
 800629e:	613c      	str	r4, [r7, #16]
 80062a0:	4630      	mov	r0, r6
 80062a2:	b003      	add	sp, #12
 80062a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a8:	6812      	ldr	r2, [r2, #0]
 80062aa:	3b04      	subs	r3, #4
 80062ac:	2a00      	cmp	r2, #0
 80062ae:	d1cb      	bne.n	8006248 <quorem+0x9c>
 80062b0:	3c01      	subs	r4, #1
 80062b2:	e7c6      	b.n	8006242 <quorem+0x96>
 80062b4:	6812      	ldr	r2, [r2, #0]
 80062b6:	3b04      	subs	r3, #4
 80062b8:	2a00      	cmp	r2, #0
 80062ba:	d1f0      	bne.n	800629e <quorem+0xf2>
 80062bc:	3c01      	subs	r4, #1
 80062be:	e7eb      	b.n	8006298 <quorem+0xec>
 80062c0:	2000      	movs	r0, #0
 80062c2:	e7ee      	b.n	80062a2 <quorem+0xf6>
 80062c4:	0000      	movs	r0, r0
	...

080062c8 <_dtoa_r>:
 80062c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	4616      	mov	r6, r2
 80062ce:	461f      	mov	r7, r3
 80062d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80062d2:	b099      	sub	sp, #100	; 0x64
 80062d4:	4605      	mov	r5, r0
 80062d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80062da:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80062de:	b974      	cbnz	r4, 80062fe <_dtoa_r+0x36>
 80062e0:	2010      	movs	r0, #16
 80062e2:	f000 fedd 	bl	80070a0 <malloc>
 80062e6:	4602      	mov	r2, r0
 80062e8:	6268      	str	r0, [r5, #36]	; 0x24
 80062ea:	b920      	cbnz	r0, 80062f6 <_dtoa_r+0x2e>
 80062ec:	21ea      	movs	r1, #234	; 0xea
 80062ee:	4ba8      	ldr	r3, [pc, #672]	; (8006590 <_dtoa_r+0x2c8>)
 80062f0:	48a8      	ldr	r0, [pc, #672]	; (8006594 <_dtoa_r+0x2cc>)
 80062f2:	f001 fde9 	bl	8007ec8 <__assert_func>
 80062f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062fa:	6004      	str	r4, [r0, #0]
 80062fc:	60c4      	str	r4, [r0, #12]
 80062fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006300:	6819      	ldr	r1, [r3, #0]
 8006302:	b151      	cbz	r1, 800631a <_dtoa_r+0x52>
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	2301      	movs	r3, #1
 8006308:	4093      	lsls	r3, r2
 800630a:	604a      	str	r2, [r1, #4]
 800630c:	608b      	str	r3, [r1, #8]
 800630e:	4628      	mov	r0, r5
 8006310:	f000 ff2a 	bl	8007168 <_Bfree>
 8006314:	2200      	movs	r2, #0
 8006316:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	1e3b      	subs	r3, r7, #0
 800631c:	bfaf      	iteee	ge
 800631e:	2300      	movge	r3, #0
 8006320:	2201      	movlt	r2, #1
 8006322:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006326:	9305      	strlt	r3, [sp, #20]
 8006328:	bfa8      	it	ge
 800632a:	f8c8 3000 	strge.w	r3, [r8]
 800632e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006332:	4b99      	ldr	r3, [pc, #612]	; (8006598 <_dtoa_r+0x2d0>)
 8006334:	bfb8      	it	lt
 8006336:	f8c8 2000 	strlt.w	r2, [r8]
 800633a:	ea33 0309 	bics.w	r3, r3, r9
 800633e:	d119      	bne.n	8006374 <_dtoa_r+0xac>
 8006340:	f242 730f 	movw	r3, #9999	; 0x270f
 8006344:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800634c:	4333      	orrs	r3, r6
 800634e:	f000 857f 	beq.w	8006e50 <_dtoa_r+0xb88>
 8006352:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006354:	b953      	cbnz	r3, 800636c <_dtoa_r+0xa4>
 8006356:	4b91      	ldr	r3, [pc, #580]	; (800659c <_dtoa_r+0x2d4>)
 8006358:	e022      	b.n	80063a0 <_dtoa_r+0xd8>
 800635a:	4b91      	ldr	r3, [pc, #580]	; (80065a0 <_dtoa_r+0x2d8>)
 800635c:	9303      	str	r3, [sp, #12]
 800635e:	3308      	adds	r3, #8
 8006360:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	9803      	ldr	r0, [sp, #12]
 8006366:	b019      	add	sp, #100	; 0x64
 8006368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800636c:	4b8b      	ldr	r3, [pc, #556]	; (800659c <_dtoa_r+0x2d4>)
 800636e:	9303      	str	r3, [sp, #12]
 8006370:	3303      	adds	r3, #3
 8006372:	e7f5      	b.n	8006360 <_dtoa_r+0x98>
 8006374:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006378:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800637c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006380:	2200      	movs	r2, #0
 8006382:	2300      	movs	r3, #0
 8006384:	f7fa fb7c 	bl	8000a80 <__aeabi_dcmpeq>
 8006388:	4680      	mov	r8, r0
 800638a:	b158      	cbz	r0, 80063a4 <_dtoa_r+0xdc>
 800638c:	2301      	movs	r3, #1
 800638e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006390:	6013      	str	r3, [r2, #0]
 8006392:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 8558 	beq.w	8006e4a <_dtoa_r+0xb82>
 800639a:	4882      	ldr	r0, [pc, #520]	; (80065a4 <_dtoa_r+0x2dc>)
 800639c:	6018      	str	r0, [r3, #0]
 800639e:	1e43      	subs	r3, r0, #1
 80063a0:	9303      	str	r3, [sp, #12]
 80063a2:	e7df      	b.n	8006364 <_dtoa_r+0x9c>
 80063a4:	ab16      	add	r3, sp, #88	; 0x58
 80063a6:	9301      	str	r3, [sp, #4]
 80063a8:	ab17      	add	r3, sp, #92	; 0x5c
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	4628      	mov	r0, r5
 80063ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80063b2:	f001 f9bf 	bl	8007734 <__d2b>
 80063b6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80063ba:	4683      	mov	fp, r0
 80063bc:	2c00      	cmp	r4, #0
 80063be:	d07f      	beq.n	80064c0 <_dtoa_r+0x1f8>
 80063c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063c6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80063ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063ce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80063d2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80063d6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80063da:	2200      	movs	r2, #0
 80063dc:	4b72      	ldr	r3, [pc, #456]	; (80065a8 <_dtoa_r+0x2e0>)
 80063de:	f7f9 ff2f 	bl	8000240 <__aeabi_dsub>
 80063e2:	a365      	add	r3, pc, #404	; (adr r3, 8006578 <_dtoa_r+0x2b0>)
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	f7fa f8e2 	bl	80005b0 <__aeabi_dmul>
 80063ec:	a364      	add	r3, pc, #400	; (adr r3, 8006580 <_dtoa_r+0x2b8>)
 80063ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f2:	f7f9 ff27 	bl	8000244 <__adddf3>
 80063f6:	4606      	mov	r6, r0
 80063f8:	4620      	mov	r0, r4
 80063fa:	460f      	mov	r7, r1
 80063fc:	f7fa f86e 	bl	80004dc <__aeabi_i2d>
 8006400:	a361      	add	r3, pc, #388	; (adr r3, 8006588 <_dtoa_r+0x2c0>)
 8006402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006406:	f7fa f8d3 	bl	80005b0 <__aeabi_dmul>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	4630      	mov	r0, r6
 8006410:	4639      	mov	r1, r7
 8006412:	f7f9 ff17 	bl	8000244 <__adddf3>
 8006416:	4606      	mov	r6, r0
 8006418:	460f      	mov	r7, r1
 800641a:	f7fa fb79 	bl	8000b10 <__aeabi_d2iz>
 800641e:	2200      	movs	r2, #0
 8006420:	4682      	mov	sl, r0
 8006422:	2300      	movs	r3, #0
 8006424:	4630      	mov	r0, r6
 8006426:	4639      	mov	r1, r7
 8006428:	f7fa fb34 	bl	8000a94 <__aeabi_dcmplt>
 800642c:	b148      	cbz	r0, 8006442 <_dtoa_r+0x17a>
 800642e:	4650      	mov	r0, sl
 8006430:	f7fa f854 	bl	80004dc <__aeabi_i2d>
 8006434:	4632      	mov	r2, r6
 8006436:	463b      	mov	r3, r7
 8006438:	f7fa fb22 	bl	8000a80 <__aeabi_dcmpeq>
 800643c:	b908      	cbnz	r0, 8006442 <_dtoa_r+0x17a>
 800643e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006442:	f1ba 0f16 	cmp.w	sl, #22
 8006446:	d858      	bhi.n	80064fa <_dtoa_r+0x232>
 8006448:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800644c:	4b57      	ldr	r3, [pc, #348]	; (80065ac <_dtoa_r+0x2e4>)
 800644e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	f7fa fb1d 	bl	8000a94 <__aeabi_dcmplt>
 800645a:	2800      	cmp	r0, #0
 800645c:	d04f      	beq.n	80064fe <_dtoa_r+0x236>
 800645e:	2300      	movs	r3, #0
 8006460:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006464:	930f      	str	r3, [sp, #60]	; 0x3c
 8006466:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006468:	1b1c      	subs	r4, r3, r4
 800646a:	1e63      	subs	r3, r4, #1
 800646c:	9309      	str	r3, [sp, #36]	; 0x24
 800646e:	bf49      	itett	mi
 8006470:	f1c4 0301 	rsbmi	r3, r4, #1
 8006474:	2300      	movpl	r3, #0
 8006476:	9306      	strmi	r3, [sp, #24]
 8006478:	2300      	movmi	r3, #0
 800647a:	bf54      	ite	pl
 800647c:	9306      	strpl	r3, [sp, #24]
 800647e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006480:	f1ba 0f00 	cmp.w	sl, #0
 8006484:	db3d      	blt.n	8006502 <_dtoa_r+0x23a>
 8006486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006488:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800648c:	4453      	add	r3, sl
 800648e:	9309      	str	r3, [sp, #36]	; 0x24
 8006490:	2300      	movs	r3, #0
 8006492:	930a      	str	r3, [sp, #40]	; 0x28
 8006494:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006496:	2b09      	cmp	r3, #9
 8006498:	f200 808c 	bhi.w	80065b4 <_dtoa_r+0x2ec>
 800649c:	2b05      	cmp	r3, #5
 800649e:	bfc4      	itt	gt
 80064a0:	3b04      	subgt	r3, #4
 80064a2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80064a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064a6:	bfc8      	it	gt
 80064a8:	2400      	movgt	r4, #0
 80064aa:	f1a3 0302 	sub.w	r3, r3, #2
 80064ae:	bfd8      	it	le
 80064b0:	2401      	movle	r4, #1
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	f200 808a 	bhi.w	80065cc <_dtoa_r+0x304>
 80064b8:	e8df f003 	tbb	[pc, r3]
 80064bc:	5b4d4f2d 	.word	0x5b4d4f2d
 80064c0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80064c4:	441c      	add	r4, r3
 80064c6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80064ca:	2b20      	cmp	r3, #32
 80064cc:	bfc3      	ittte	gt
 80064ce:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80064d2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80064d6:	fa09 f303 	lslgt.w	r3, r9, r3
 80064da:	f1c3 0320 	rsble	r3, r3, #32
 80064de:	bfc6      	itte	gt
 80064e0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80064e4:	4318      	orrgt	r0, r3
 80064e6:	fa06 f003 	lslle.w	r0, r6, r3
 80064ea:	f7f9 ffe7 	bl	80004bc <__aeabi_ui2d>
 80064ee:	2301      	movs	r3, #1
 80064f0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80064f4:	3c01      	subs	r4, #1
 80064f6:	9313      	str	r3, [sp, #76]	; 0x4c
 80064f8:	e76f      	b.n	80063da <_dtoa_r+0x112>
 80064fa:	2301      	movs	r3, #1
 80064fc:	e7b2      	b.n	8006464 <_dtoa_r+0x19c>
 80064fe:	900f      	str	r0, [sp, #60]	; 0x3c
 8006500:	e7b1      	b.n	8006466 <_dtoa_r+0x19e>
 8006502:	9b06      	ldr	r3, [sp, #24]
 8006504:	eba3 030a 	sub.w	r3, r3, sl
 8006508:	9306      	str	r3, [sp, #24]
 800650a:	f1ca 0300 	rsb	r3, sl, #0
 800650e:	930a      	str	r3, [sp, #40]	; 0x28
 8006510:	2300      	movs	r3, #0
 8006512:	930e      	str	r3, [sp, #56]	; 0x38
 8006514:	e7be      	b.n	8006494 <_dtoa_r+0x1cc>
 8006516:	2300      	movs	r3, #0
 8006518:	930b      	str	r3, [sp, #44]	; 0x2c
 800651a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800651c:	2b00      	cmp	r3, #0
 800651e:	dc58      	bgt.n	80065d2 <_dtoa_r+0x30a>
 8006520:	f04f 0901 	mov.w	r9, #1
 8006524:	464b      	mov	r3, r9
 8006526:	f8cd 9020 	str.w	r9, [sp, #32]
 800652a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800652e:	2200      	movs	r2, #0
 8006530:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006532:	6042      	str	r2, [r0, #4]
 8006534:	2204      	movs	r2, #4
 8006536:	f102 0614 	add.w	r6, r2, #20
 800653a:	429e      	cmp	r6, r3
 800653c:	6841      	ldr	r1, [r0, #4]
 800653e:	d94e      	bls.n	80065de <_dtoa_r+0x316>
 8006540:	4628      	mov	r0, r5
 8006542:	f000 fdd1 	bl	80070e8 <_Balloc>
 8006546:	9003      	str	r0, [sp, #12]
 8006548:	2800      	cmp	r0, #0
 800654a:	d14c      	bne.n	80065e6 <_dtoa_r+0x31e>
 800654c:	4602      	mov	r2, r0
 800654e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006552:	4b17      	ldr	r3, [pc, #92]	; (80065b0 <_dtoa_r+0x2e8>)
 8006554:	e6cc      	b.n	80062f0 <_dtoa_r+0x28>
 8006556:	2301      	movs	r3, #1
 8006558:	e7de      	b.n	8006518 <_dtoa_r+0x250>
 800655a:	2300      	movs	r3, #0
 800655c:	930b      	str	r3, [sp, #44]	; 0x2c
 800655e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006560:	eb0a 0903 	add.w	r9, sl, r3
 8006564:	f109 0301 	add.w	r3, r9, #1
 8006568:	2b01      	cmp	r3, #1
 800656a:	9308      	str	r3, [sp, #32]
 800656c:	bfb8      	it	lt
 800656e:	2301      	movlt	r3, #1
 8006570:	e7dd      	b.n	800652e <_dtoa_r+0x266>
 8006572:	2301      	movs	r3, #1
 8006574:	e7f2      	b.n	800655c <_dtoa_r+0x294>
 8006576:	bf00      	nop
 8006578:	636f4361 	.word	0x636f4361
 800657c:	3fd287a7 	.word	0x3fd287a7
 8006580:	8b60c8b3 	.word	0x8b60c8b3
 8006584:	3fc68a28 	.word	0x3fc68a28
 8006588:	509f79fb 	.word	0x509f79fb
 800658c:	3fd34413 	.word	0x3fd34413
 8006590:	08008431 	.word	0x08008431
 8006594:	08008448 	.word	0x08008448
 8006598:	7ff00000 	.word	0x7ff00000
 800659c:	0800842d 	.word	0x0800842d
 80065a0:	08008424 	.word	0x08008424
 80065a4:	08008401 	.word	0x08008401
 80065a8:	3ff80000 	.word	0x3ff80000
 80065ac:	08008598 	.word	0x08008598
 80065b0:	080084a3 	.word	0x080084a3
 80065b4:	2401      	movs	r4, #1
 80065b6:	2300      	movs	r3, #0
 80065b8:	940b      	str	r4, [sp, #44]	; 0x2c
 80065ba:	9322      	str	r3, [sp, #136]	; 0x88
 80065bc:	f04f 39ff 	mov.w	r9, #4294967295
 80065c0:	2200      	movs	r2, #0
 80065c2:	2312      	movs	r3, #18
 80065c4:	f8cd 9020 	str.w	r9, [sp, #32]
 80065c8:	9223      	str	r2, [sp, #140]	; 0x8c
 80065ca:	e7b0      	b.n	800652e <_dtoa_r+0x266>
 80065cc:	2301      	movs	r3, #1
 80065ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80065d0:	e7f4      	b.n	80065bc <_dtoa_r+0x2f4>
 80065d2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80065d6:	464b      	mov	r3, r9
 80065d8:	f8cd 9020 	str.w	r9, [sp, #32]
 80065dc:	e7a7      	b.n	800652e <_dtoa_r+0x266>
 80065de:	3101      	adds	r1, #1
 80065e0:	6041      	str	r1, [r0, #4]
 80065e2:	0052      	lsls	r2, r2, #1
 80065e4:	e7a7      	b.n	8006536 <_dtoa_r+0x26e>
 80065e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065e8:	9a03      	ldr	r2, [sp, #12]
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	9b08      	ldr	r3, [sp, #32]
 80065ee:	2b0e      	cmp	r3, #14
 80065f0:	f200 80a8 	bhi.w	8006744 <_dtoa_r+0x47c>
 80065f4:	2c00      	cmp	r4, #0
 80065f6:	f000 80a5 	beq.w	8006744 <_dtoa_r+0x47c>
 80065fa:	f1ba 0f00 	cmp.w	sl, #0
 80065fe:	dd34      	ble.n	800666a <_dtoa_r+0x3a2>
 8006600:	4a9a      	ldr	r2, [pc, #616]	; (800686c <_dtoa_r+0x5a4>)
 8006602:	f00a 030f 	and.w	r3, sl, #15
 8006606:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800660a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800660e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006612:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006616:	ea4f 142a 	mov.w	r4, sl, asr #4
 800661a:	d016      	beq.n	800664a <_dtoa_r+0x382>
 800661c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006620:	4b93      	ldr	r3, [pc, #588]	; (8006870 <_dtoa_r+0x5a8>)
 8006622:	2703      	movs	r7, #3
 8006624:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006628:	f7fa f8ec 	bl	8000804 <__aeabi_ddiv>
 800662c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006630:	f004 040f 	and.w	r4, r4, #15
 8006634:	4e8e      	ldr	r6, [pc, #568]	; (8006870 <_dtoa_r+0x5a8>)
 8006636:	b954      	cbnz	r4, 800664e <_dtoa_r+0x386>
 8006638:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800663c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006640:	f7fa f8e0 	bl	8000804 <__aeabi_ddiv>
 8006644:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006648:	e029      	b.n	800669e <_dtoa_r+0x3d6>
 800664a:	2702      	movs	r7, #2
 800664c:	e7f2      	b.n	8006634 <_dtoa_r+0x36c>
 800664e:	07e1      	lsls	r1, r4, #31
 8006650:	d508      	bpl.n	8006664 <_dtoa_r+0x39c>
 8006652:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006656:	e9d6 2300 	ldrd	r2, r3, [r6]
 800665a:	f7f9 ffa9 	bl	80005b0 <__aeabi_dmul>
 800665e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006662:	3701      	adds	r7, #1
 8006664:	1064      	asrs	r4, r4, #1
 8006666:	3608      	adds	r6, #8
 8006668:	e7e5      	b.n	8006636 <_dtoa_r+0x36e>
 800666a:	f000 80a5 	beq.w	80067b8 <_dtoa_r+0x4f0>
 800666e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006672:	f1ca 0400 	rsb	r4, sl, #0
 8006676:	4b7d      	ldr	r3, [pc, #500]	; (800686c <_dtoa_r+0x5a4>)
 8006678:	f004 020f 	and.w	r2, r4, #15
 800667c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006684:	f7f9 ff94 	bl	80005b0 <__aeabi_dmul>
 8006688:	2702      	movs	r7, #2
 800668a:	2300      	movs	r3, #0
 800668c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006690:	4e77      	ldr	r6, [pc, #476]	; (8006870 <_dtoa_r+0x5a8>)
 8006692:	1124      	asrs	r4, r4, #4
 8006694:	2c00      	cmp	r4, #0
 8006696:	f040 8084 	bne.w	80067a2 <_dtoa_r+0x4da>
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1d2      	bne.n	8006644 <_dtoa_r+0x37c>
 800669e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 808b 	beq.w	80067bc <_dtoa_r+0x4f4>
 80066a6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80066aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80066ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066b2:	2200      	movs	r2, #0
 80066b4:	4b6f      	ldr	r3, [pc, #444]	; (8006874 <_dtoa_r+0x5ac>)
 80066b6:	f7fa f9ed 	bl	8000a94 <__aeabi_dcmplt>
 80066ba:	2800      	cmp	r0, #0
 80066bc:	d07e      	beq.n	80067bc <_dtoa_r+0x4f4>
 80066be:	9b08      	ldr	r3, [sp, #32]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d07b      	beq.n	80067bc <_dtoa_r+0x4f4>
 80066c4:	f1b9 0f00 	cmp.w	r9, #0
 80066c8:	dd38      	ble.n	800673c <_dtoa_r+0x474>
 80066ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066ce:	2200      	movs	r2, #0
 80066d0:	4b69      	ldr	r3, [pc, #420]	; (8006878 <_dtoa_r+0x5b0>)
 80066d2:	f7f9 ff6d 	bl	80005b0 <__aeabi_dmul>
 80066d6:	464c      	mov	r4, r9
 80066d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066dc:	f10a 38ff 	add.w	r8, sl, #4294967295
 80066e0:	3701      	adds	r7, #1
 80066e2:	4638      	mov	r0, r7
 80066e4:	f7f9 fefa 	bl	80004dc <__aeabi_i2d>
 80066e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066ec:	f7f9 ff60 	bl	80005b0 <__aeabi_dmul>
 80066f0:	2200      	movs	r2, #0
 80066f2:	4b62      	ldr	r3, [pc, #392]	; (800687c <_dtoa_r+0x5b4>)
 80066f4:	f7f9 fda6 	bl	8000244 <__adddf3>
 80066f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80066fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006700:	9611      	str	r6, [sp, #68]	; 0x44
 8006702:	2c00      	cmp	r4, #0
 8006704:	d15d      	bne.n	80067c2 <_dtoa_r+0x4fa>
 8006706:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800670a:	2200      	movs	r2, #0
 800670c:	4b5c      	ldr	r3, [pc, #368]	; (8006880 <_dtoa_r+0x5b8>)
 800670e:	f7f9 fd97 	bl	8000240 <__aeabi_dsub>
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800671a:	4633      	mov	r3, r6
 800671c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800671e:	f7fa f9d7 	bl	8000ad0 <__aeabi_dcmpgt>
 8006722:	2800      	cmp	r0, #0
 8006724:	f040 829c 	bne.w	8006c60 <_dtoa_r+0x998>
 8006728:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800672c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800672e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006732:	f7fa f9af 	bl	8000a94 <__aeabi_dcmplt>
 8006736:	2800      	cmp	r0, #0
 8006738:	f040 8290 	bne.w	8006c5c <_dtoa_r+0x994>
 800673c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006740:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006744:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006746:	2b00      	cmp	r3, #0
 8006748:	f2c0 8152 	blt.w	80069f0 <_dtoa_r+0x728>
 800674c:	f1ba 0f0e 	cmp.w	sl, #14
 8006750:	f300 814e 	bgt.w	80069f0 <_dtoa_r+0x728>
 8006754:	4b45      	ldr	r3, [pc, #276]	; (800686c <_dtoa_r+0x5a4>)
 8006756:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800675a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800675e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006762:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006764:	2b00      	cmp	r3, #0
 8006766:	f280 80db 	bge.w	8006920 <_dtoa_r+0x658>
 800676a:	9b08      	ldr	r3, [sp, #32]
 800676c:	2b00      	cmp	r3, #0
 800676e:	f300 80d7 	bgt.w	8006920 <_dtoa_r+0x658>
 8006772:	f040 8272 	bne.w	8006c5a <_dtoa_r+0x992>
 8006776:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800677a:	2200      	movs	r2, #0
 800677c:	4b40      	ldr	r3, [pc, #256]	; (8006880 <_dtoa_r+0x5b8>)
 800677e:	f7f9 ff17 	bl	80005b0 <__aeabi_dmul>
 8006782:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006786:	f7fa f999 	bl	8000abc <__aeabi_dcmpge>
 800678a:	9c08      	ldr	r4, [sp, #32]
 800678c:	4626      	mov	r6, r4
 800678e:	2800      	cmp	r0, #0
 8006790:	f040 8248 	bne.w	8006c24 <_dtoa_r+0x95c>
 8006794:	2331      	movs	r3, #49	; 0x31
 8006796:	9f03      	ldr	r7, [sp, #12]
 8006798:	f10a 0a01 	add.w	sl, sl, #1
 800679c:	f807 3b01 	strb.w	r3, [r7], #1
 80067a0:	e244      	b.n	8006c2c <_dtoa_r+0x964>
 80067a2:	07e2      	lsls	r2, r4, #31
 80067a4:	d505      	bpl.n	80067b2 <_dtoa_r+0x4ea>
 80067a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067aa:	f7f9 ff01 	bl	80005b0 <__aeabi_dmul>
 80067ae:	2301      	movs	r3, #1
 80067b0:	3701      	adds	r7, #1
 80067b2:	1064      	asrs	r4, r4, #1
 80067b4:	3608      	adds	r6, #8
 80067b6:	e76d      	b.n	8006694 <_dtoa_r+0x3cc>
 80067b8:	2702      	movs	r7, #2
 80067ba:	e770      	b.n	800669e <_dtoa_r+0x3d6>
 80067bc:	46d0      	mov	r8, sl
 80067be:	9c08      	ldr	r4, [sp, #32]
 80067c0:	e78f      	b.n	80066e2 <_dtoa_r+0x41a>
 80067c2:	9903      	ldr	r1, [sp, #12]
 80067c4:	4b29      	ldr	r3, [pc, #164]	; (800686c <_dtoa_r+0x5a4>)
 80067c6:	4421      	add	r1, r4
 80067c8:	9112      	str	r1, [sp, #72]	; 0x48
 80067ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80067d0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80067d4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80067d8:	2900      	cmp	r1, #0
 80067da:	d055      	beq.n	8006888 <_dtoa_r+0x5c0>
 80067dc:	2000      	movs	r0, #0
 80067de:	4929      	ldr	r1, [pc, #164]	; (8006884 <_dtoa_r+0x5bc>)
 80067e0:	f7fa f810 	bl	8000804 <__aeabi_ddiv>
 80067e4:	463b      	mov	r3, r7
 80067e6:	4632      	mov	r2, r6
 80067e8:	f7f9 fd2a 	bl	8000240 <__aeabi_dsub>
 80067ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067f0:	9f03      	ldr	r7, [sp, #12]
 80067f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067f6:	f7fa f98b 	bl	8000b10 <__aeabi_d2iz>
 80067fa:	4604      	mov	r4, r0
 80067fc:	f7f9 fe6e 	bl	80004dc <__aeabi_i2d>
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006808:	f7f9 fd1a 	bl	8000240 <__aeabi_dsub>
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	3430      	adds	r4, #48	; 0x30
 8006812:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006816:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800681a:	f807 4b01 	strb.w	r4, [r7], #1
 800681e:	f7fa f939 	bl	8000a94 <__aeabi_dcmplt>
 8006822:	2800      	cmp	r0, #0
 8006824:	d174      	bne.n	8006910 <_dtoa_r+0x648>
 8006826:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800682a:	2000      	movs	r0, #0
 800682c:	4911      	ldr	r1, [pc, #68]	; (8006874 <_dtoa_r+0x5ac>)
 800682e:	f7f9 fd07 	bl	8000240 <__aeabi_dsub>
 8006832:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006836:	f7fa f92d 	bl	8000a94 <__aeabi_dcmplt>
 800683a:	2800      	cmp	r0, #0
 800683c:	f040 80b7 	bne.w	80069ae <_dtoa_r+0x6e6>
 8006840:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006842:	429f      	cmp	r7, r3
 8006844:	f43f af7a 	beq.w	800673c <_dtoa_r+0x474>
 8006848:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800684c:	2200      	movs	r2, #0
 800684e:	4b0a      	ldr	r3, [pc, #40]	; (8006878 <_dtoa_r+0x5b0>)
 8006850:	f7f9 feae 	bl	80005b0 <__aeabi_dmul>
 8006854:	2200      	movs	r2, #0
 8006856:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800685a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800685e:	4b06      	ldr	r3, [pc, #24]	; (8006878 <_dtoa_r+0x5b0>)
 8006860:	f7f9 fea6 	bl	80005b0 <__aeabi_dmul>
 8006864:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006868:	e7c3      	b.n	80067f2 <_dtoa_r+0x52a>
 800686a:	bf00      	nop
 800686c:	08008598 	.word	0x08008598
 8006870:	08008570 	.word	0x08008570
 8006874:	3ff00000 	.word	0x3ff00000
 8006878:	40240000 	.word	0x40240000
 800687c:	401c0000 	.word	0x401c0000
 8006880:	40140000 	.word	0x40140000
 8006884:	3fe00000 	.word	0x3fe00000
 8006888:	4630      	mov	r0, r6
 800688a:	4639      	mov	r1, r7
 800688c:	f7f9 fe90 	bl	80005b0 <__aeabi_dmul>
 8006890:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006892:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006896:	9c03      	ldr	r4, [sp, #12]
 8006898:	9314      	str	r3, [sp, #80]	; 0x50
 800689a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800689e:	f7fa f937 	bl	8000b10 <__aeabi_d2iz>
 80068a2:	9015      	str	r0, [sp, #84]	; 0x54
 80068a4:	f7f9 fe1a 	bl	80004dc <__aeabi_i2d>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068b0:	f7f9 fcc6 	bl	8000240 <__aeabi_dsub>
 80068b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068b6:	4606      	mov	r6, r0
 80068b8:	3330      	adds	r3, #48	; 0x30
 80068ba:	f804 3b01 	strb.w	r3, [r4], #1
 80068be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068c0:	460f      	mov	r7, r1
 80068c2:	429c      	cmp	r4, r3
 80068c4:	f04f 0200 	mov.w	r2, #0
 80068c8:	d124      	bne.n	8006914 <_dtoa_r+0x64c>
 80068ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068ce:	4bb0      	ldr	r3, [pc, #704]	; (8006b90 <_dtoa_r+0x8c8>)
 80068d0:	f7f9 fcb8 	bl	8000244 <__adddf3>
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
 80068d8:	4630      	mov	r0, r6
 80068da:	4639      	mov	r1, r7
 80068dc:	f7fa f8f8 	bl	8000ad0 <__aeabi_dcmpgt>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d163      	bne.n	80069ac <_dtoa_r+0x6e4>
 80068e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068e8:	2000      	movs	r0, #0
 80068ea:	49a9      	ldr	r1, [pc, #676]	; (8006b90 <_dtoa_r+0x8c8>)
 80068ec:	f7f9 fca8 	bl	8000240 <__aeabi_dsub>
 80068f0:	4602      	mov	r2, r0
 80068f2:	460b      	mov	r3, r1
 80068f4:	4630      	mov	r0, r6
 80068f6:	4639      	mov	r1, r7
 80068f8:	f7fa f8cc 	bl	8000a94 <__aeabi_dcmplt>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	f43f af1d 	beq.w	800673c <_dtoa_r+0x474>
 8006902:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006904:	1e7b      	subs	r3, r7, #1
 8006906:	9314      	str	r3, [sp, #80]	; 0x50
 8006908:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800690c:	2b30      	cmp	r3, #48	; 0x30
 800690e:	d0f8      	beq.n	8006902 <_dtoa_r+0x63a>
 8006910:	46c2      	mov	sl, r8
 8006912:	e03b      	b.n	800698c <_dtoa_r+0x6c4>
 8006914:	4b9f      	ldr	r3, [pc, #636]	; (8006b94 <_dtoa_r+0x8cc>)
 8006916:	f7f9 fe4b 	bl	80005b0 <__aeabi_dmul>
 800691a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800691e:	e7bc      	b.n	800689a <_dtoa_r+0x5d2>
 8006920:	9f03      	ldr	r7, [sp, #12]
 8006922:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006926:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800692a:	4640      	mov	r0, r8
 800692c:	4649      	mov	r1, r9
 800692e:	f7f9 ff69 	bl	8000804 <__aeabi_ddiv>
 8006932:	f7fa f8ed 	bl	8000b10 <__aeabi_d2iz>
 8006936:	4604      	mov	r4, r0
 8006938:	f7f9 fdd0 	bl	80004dc <__aeabi_i2d>
 800693c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006940:	f7f9 fe36 	bl	80005b0 <__aeabi_dmul>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4640      	mov	r0, r8
 800694a:	4649      	mov	r1, r9
 800694c:	f7f9 fc78 	bl	8000240 <__aeabi_dsub>
 8006950:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006954:	f807 6b01 	strb.w	r6, [r7], #1
 8006958:	9e03      	ldr	r6, [sp, #12]
 800695a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800695e:	1bbe      	subs	r6, r7, r6
 8006960:	45b4      	cmp	ip, r6
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	d136      	bne.n	80069d6 <_dtoa_r+0x70e>
 8006968:	f7f9 fc6c 	bl	8000244 <__adddf3>
 800696c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006970:	4680      	mov	r8, r0
 8006972:	4689      	mov	r9, r1
 8006974:	f7fa f8ac 	bl	8000ad0 <__aeabi_dcmpgt>
 8006978:	bb58      	cbnz	r0, 80069d2 <_dtoa_r+0x70a>
 800697a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800697e:	4640      	mov	r0, r8
 8006980:	4649      	mov	r1, r9
 8006982:	f7fa f87d 	bl	8000a80 <__aeabi_dcmpeq>
 8006986:	b108      	cbz	r0, 800698c <_dtoa_r+0x6c4>
 8006988:	07e1      	lsls	r1, r4, #31
 800698a:	d422      	bmi.n	80069d2 <_dtoa_r+0x70a>
 800698c:	4628      	mov	r0, r5
 800698e:	4659      	mov	r1, fp
 8006990:	f000 fbea 	bl	8007168 <_Bfree>
 8006994:	2300      	movs	r3, #0
 8006996:	703b      	strb	r3, [r7, #0]
 8006998:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800699a:	f10a 0001 	add.w	r0, sl, #1
 800699e:	6018      	str	r0, [r3, #0]
 80069a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f43f acde 	beq.w	8006364 <_dtoa_r+0x9c>
 80069a8:	601f      	str	r7, [r3, #0]
 80069aa:	e4db      	b.n	8006364 <_dtoa_r+0x9c>
 80069ac:	4627      	mov	r7, r4
 80069ae:	463b      	mov	r3, r7
 80069b0:	461f      	mov	r7, r3
 80069b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069b6:	2a39      	cmp	r2, #57	; 0x39
 80069b8:	d107      	bne.n	80069ca <_dtoa_r+0x702>
 80069ba:	9a03      	ldr	r2, [sp, #12]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d1f7      	bne.n	80069b0 <_dtoa_r+0x6e8>
 80069c0:	2230      	movs	r2, #48	; 0x30
 80069c2:	9903      	ldr	r1, [sp, #12]
 80069c4:	f108 0801 	add.w	r8, r8, #1
 80069c8:	700a      	strb	r2, [r1, #0]
 80069ca:	781a      	ldrb	r2, [r3, #0]
 80069cc:	3201      	adds	r2, #1
 80069ce:	701a      	strb	r2, [r3, #0]
 80069d0:	e79e      	b.n	8006910 <_dtoa_r+0x648>
 80069d2:	46d0      	mov	r8, sl
 80069d4:	e7eb      	b.n	80069ae <_dtoa_r+0x6e6>
 80069d6:	2200      	movs	r2, #0
 80069d8:	4b6e      	ldr	r3, [pc, #440]	; (8006b94 <_dtoa_r+0x8cc>)
 80069da:	f7f9 fde9 	bl	80005b0 <__aeabi_dmul>
 80069de:	2200      	movs	r2, #0
 80069e0:	2300      	movs	r3, #0
 80069e2:	4680      	mov	r8, r0
 80069e4:	4689      	mov	r9, r1
 80069e6:	f7fa f84b 	bl	8000a80 <__aeabi_dcmpeq>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d09b      	beq.n	8006926 <_dtoa_r+0x65e>
 80069ee:	e7cd      	b.n	800698c <_dtoa_r+0x6c4>
 80069f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069f2:	2a00      	cmp	r2, #0
 80069f4:	f000 80d0 	beq.w	8006b98 <_dtoa_r+0x8d0>
 80069f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80069fa:	2a01      	cmp	r2, #1
 80069fc:	f300 80ae 	bgt.w	8006b5c <_dtoa_r+0x894>
 8006a00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a02:	2a00      	cmp	r2, #0
 8006a04:	f000 80a6 	beq.w	8006b54 <_dtoa_r+0x88c>
 8006a08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a0e:	9f06      	ldr	r7, [sp, #24]
 8006a10:	9a06      	ldr	r2, [sp, #24]
 8006a12:	2101      	movs	r1, #1
 8006a14:	441a      	add	r2, r3
 8006a16:	9206      	str	r2, [sp, #24]
 8006a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	441a      	add	r2, r3
 8006a1e:	9209      	str	r2, [sp, #36]	; 0x24
 8006a20:	f000 fc58 	bl	80072d4 <__i2b>
 8006a24:	4606      	mov	r6, r0
 8006a26:	2f00      	cmp	r7, #0
 8006a28:	dd0c      	ble.n	8006a44 <_dtoa_r+0x77c>
 8006a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	dd09      	ble.n	8006a44 <_dtoa_r+0x77c>
 8006a30:	42bb      	cmp	r3, r7
 8006a32:	bfa8      	it	ge
 8006a34:	463b      	movge	r3, r7
 8006a36:	9a06      	ldr	r2, [sp, #24]
 8006a38:	1aff      	subs	r7, r7, r3
 8006a3a:	1ad2      	subs	r2, r2, r3
 8006a3c:	9206      	str	r2, [sp, #24]
 8006a3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	9309      	str	r3, [sp, #36]	; 0x24
 8006a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a46:	b1f3      	cbz	r3, 8006a86 <_dtoa_r+0x7be>
 8006a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 80a8 	beq.w	8006ba0 <_dtoa_r+0x8d8>
 8006a50:	2c00      	cmp	r4, #0
 8006a52:	dd10      	ble.n	8006a76 <_dtoa_r+0x7ae>
 8006a54:	4631      	mov	r1, r6
 8006a56:	4622      	mov	r2, r4
 8006a58:	4628      	mov	r0, r5
 8006a5a:	f000 fcf9 	bl	8007450 <__pow5mult>
 8006a5e:	465a      	mov	r2, fp
 8006a60:	4601      	mov	r1, r0
 8006a62:	4606      	mov	r6, r0
 8006a64:	4628      	mov	r0, r5
 8006a66:	f000 fc4b 	bl	8007300 <__multiply>
 8006a6a:	4680      	mov	r8, r0
 8006a6c:	4659      	mov	r1, fp
 8006a6e:	4628      	mov	r0, r5
 8006a70:	f000 fb7a 	bl	8007168 <_Bfree>
 8006a74:	46c3      	mov	fp, r8
 8006a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a78:	1b1a      	subs	r2, r3, r4
 8006a7a:	d004      	beq.n	8006a86 <_dtoa_r+0x7be>
 8006a7c:	4659      	mov	r1, fp
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f000 fce6 	bl	8007450 <__pow5mult>
 8006a84:	4683      	mov	fp, r0
 8006a86:	2101      	movs	r1, #1
 8006a88:	4628      	mov	r0, r5
 8006a8a:	f000 fc23 	bl	80072d4 <__i2b>
 8006a8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a90:	4604      	mov	r4, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f340 8086 	ble.w	8006ba4 <_dtoa_r+0x8dc>
 8006a98:	461a      	mov	r2, r3
 8006a9a:	4601      	mov	r1, r0
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	f000 fcd7 	bl	8007450 <__pow5mult>
 8006aa2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006aa4:	4604      	mov	r4, r0
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	dd7f      	ble.n	8006baa <_dtoa_r+0x8e2>
 8006aaa:	f04f 0800 	mov.w	r8, #0
 8006aae:	6923      	ldr	r3, [r4, #16]
 8006ab0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ab4:	6918      	ldr	r0, [r3, #16]
 8006ab6:	f000 fbbf 	bl	8007238 <__hi0bits>
 8006aba:	f1c0 0020 	rsb	r0, r0, #32
 8006abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac0:	4418      	add	r0, r3
 8006ac2:	f010 001f 	ands.w	r0, r0, #31
 8006ac6:	f000 8092 	beq.w	8006bee <_dtoa_r+0x926>
 8006aca:	f1c0 0320 	rsb	r3, r0, #32
 8006ace:	2b04      	cmp	r3, #4
 8006ad0:	f340 808a 	ble.w	8006be8 <_dtoa_r+0x920>
 8006ad4:	f1c0 001c 	rsb	r0, r0, #28
 8006ad8:	9b06      	ldr	r3, [sp, #24]
 8006ada:	4407      	add	r7, r0
 8006adc:	4403      	add	r3, r0
 8006ade:	9306      	str	r3, [sp, #24]
 8006ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae2:	4403      	add	r3, r0
 8006ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ae6:	9b06      	ldr	r3, [sp, #24]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	dd05      	ble.n	8006af8 <_dtoa_r+0x830>
 8006aec:	4659      	mov	r1, fp
 8006aee:	461a      	mov	r2, r3
 8006af0:	4628      	mov	r0, r5
 8006af2:	f000 fd07 	bl	8007504 <__lshift>
 8006af6:	4683      	mov	fp, r0
 8006af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	dd05      	ble.n	8006b0a <_dtoa_r+0x842>
 8006afe:	4621      	mov	r1, r4
 8006b00:	461a      	mov	r2, r3
 8006b02:	4628      	mov	r0, r5
 8006b04:	f000 fcfe 	bl	8007504 <__lshift>
 8006b08:	4604      	mov	r4, r0
 8006b0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d070      	beq.n	8006bf2 <_dtoa_r+0x92a>
 8006b10:	4621      	mov	r1, r4
 8006b12:	4658      	mov	r0, fp
 8006b14:	f000 fd66 	bl	80075e4 <__mcmp>
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	da6a      	bge.n	8006bf2 <_dtoa_r+0x92a>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	4659      	mov	r1, fp
 8006b20:	220a      	movs	r2, #10
 8006b22:	4628      	mov	r0, r5
 8006b24:	f000 fb42 	bl	80071ac <__multadd>
 8006b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b2a:	4683      	mov	fp, r0
 8006b2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 8194 	beq.w	8006e5e <_dtoa_r+0xb96>
 8006b36:	4631      	mov	r1, r6
 8006b38:	2300      	movs	r3, #0
 8006b3a:	220a      	movs	r2, #10
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	f000 fb35 	bl	80071ac <__multadd>
 8006b42:	f1b9 0f00 	cmp.w	r9, #0
 8006b46:	4606      	mov	r6, r0
 8006b48:	f300 8093 	bgt.w	8006c72 <_dtoa_r+0x9aa>
 8006b4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	dc57      	bgt.n	8006c02 <_dtoa_r+0x93a>
 8006b52:	e08e      	b.n	8006c72 <_dtoa_r+0x9aa>
 8006b54:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006b56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b5a:	e757      	b.n	8006a0c <_dtoa_r+0x744>
 8006b5c:	9b08      	ldr	r3, [sp, #32]
 8006b5e:	1e5c      	subs	r4, r3, #1
 8006b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b62:	42a3      	cmp	r3, r4
 8006b64:	bfb7      	itett	lt
 8006b66:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006b68:	1b1c      	subge	r4, r3, r4
 8006b6a:	1ae2      	sublt	r2, r4, r3
 8006b6c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006b6e:	bfbe      	ittt	lt
 8006b70:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006b72:	189b      	addlt	r3, r3, r2
 8006b74:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006b76:	9b08      	ldr	r3, [sp, #32]
 8006b78:	bfb8      	it	lt
 8006b7a:	2400      	movlt	r4, #0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	bfbb      	ittet	lt
 8006b80:	9b06      	ldrlt	r3, [sp, #24]
 8006b82:	9a08      	ldrlt	r2, [sp, #32]
 8006b84:	9f06      	ldrge	r7, [sp, #24]
 8006b86:	1a9f      	sublt	r7, r3, r2
 8006b88:	bfac      	ite	ge
 8006b8a:	9b08      	ldrge	r3, [sp, #32]
 8006b8c:	2300      	movlt	r3, #0
 8006b8e:	e73f      	b.n	8006a10 <_dtoa_r+0x748>
 8006b90:	3fe00000 	.word	0x3fe00000
 8006b94:	40240000 	.word	0x40240000
 8006b98:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006b9a:	9f06      	ldr	r7, [sp, #24]
 8006b9c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006b9e:	e742      	b.n	8006a26 <_dtoa_r+0x75e>
 8006ba0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ba2:	e76b      	b.n	8006a7c <_dtoa_r+0x7b4>
 8006ba4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	dc19      	bgt.n	8006bde <_dtoa_r+0x916>
 8006baa:	9b04      	ldr	r3, [sp, #16]
 8006bac:	b9bb      	cbnz	r3, 8006bde <_dtoa_r+0x916>
 8006bae:	9b05      	ldr	r3, [sp, #20]
 8006bb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bb4:	b99b      	cbnz	r3, 8006bde <_dtoa_r+0x916>
 8006bb6:	9b05      	ldr	r3, [sp, #20]
 8006bb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bbc:	0d1b      	lsrs	r3, r3, #20
 8006bbe:	051b      	lsls	r3, r3, #20
 8006bc0:	b183      	cbz	r3, 8006be4 <_dtoa_r+0x91c>
 8006bc2:	f04f 0801 	mov.w	r8, #1
 8006bc6:	9b06      	ldr	r3, [sp, #24]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	9306      	str	r3, [sp, #24]
 8006bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bce:	3301      	adds	r3, #1
 8006bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f47f af6a 	bne.w	8006aae <_dtoa_r+0x7e6>
 8006bda:	2001      	movs	r0, #1
 8006bdc:	e76f      	b.n	8006abe <_dtoa_r+0x7f6>
 8006bde:	f04f 0800 	mov.w	r8, #0
 8006be2:	e7f6      	b.n	8006bd2 <_dtoa_r+0x90a>
 8006be4:	4698      	mov	r8, r3
 8006be6:	e7f4      	b.n	8006bd2 <_dtoa_r+0x90a>
 8006be8:	f43f af7d 	beq.w	8006ae6 <_dtoa_r+0x81e>
 8006bec:	4618      	mov	r0, r3
 8006bee:	301c      	adds	r0, #28
 8006bf0:	e772      	b.n	8006ad8 <_dtoa_r+0x810>
 8006bf2:	9b08      	ldr	r3, [sp, #32]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	dc36      	bgt.n	8006c66 <_dtoa_r+0x99e>
 8006bf8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	dd33      	ble.n	8006c66 <_dtoa_r+0x99e>
 8006bfe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c02:	f1b9 0f00 	cmp.w	r9, #0
 8006c06:	d10d      	bne.n	8006c24 <_dtoa_r+0x95c>
 8006c08:	4621      	mov	r1, r4
 8006c0a:	464b      	mov	r3, r9
 8006c0c:	2205      	movs	r2, #5
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f000 facc 	bl	80071ac <__multadd>
 8006c14:	4601      	mov	r1, r0
 8006c16:	4604      	mov	r4, r0
 8006c18:	4658      	mov	r0, fp
 8006c1a:	f000 fce3 	bl	80075e4 <__mcmp>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	f73f adb8 	bgt.w	8006794 <_dtoa_r+0x4cc>
 8006c24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c26:	9f03      	ldr	r7, [sp, #12]
 8006c28:	ea6f 0a03 	mvn.w	sl, r3
 8006c2c:	f04f 0800 	mov.w	r8, #0
 8006c30:	4621      	mov	r1, r4
 8006c32:	4628      	mov	r0, r5
 8006c34:	f000 fa98 	bl	8007168 <_Bfree>
 8006c38:	2e00      	cmp	r6, #0
 8006c3a:	f43f aea7 	beq.w	800698c <_dtoa_r+0x6c4>
 8006c3e:	f1b8 0f00 	cmp.w	r8, #0
 8006c42:	d005      	beq.n	8006c50 <_dtoa_r+0x988>
 8006c44:	45b0      	cmp	r8, r6
 8006c46:	d003      	beq.n	8006c50 <_dtoa_r+0x988>
 8006c48:	4641      	mov	r1, r8
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	f000 fa8c 	bl	8007168 <_Bfree>
 8006c50:	4631      	mov	r1, r6
 8006c52:	4628      	mov	r0, r5
 8006c54:	f000 fa88 	bl	8007168 <_Bfree>
 8006c58:	e698      	b.n	800698c <_dtoa_r+0x6c4>
 8006c5a:	2400      	movs	r4, #0
 8006c5c:	4626      	mov	r6, r4
 8006c5e:	e7e1      	b.n	8006c24 <_dtoa_r+0x95c>
 8006c60:	46c2      	mov	sl, r8
 8006c62:	4626      	mov	r6, r4
 8006c64:	e596      	b.n	8006794 <_dtoa_r+0x4cc>
 8006c66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 80fd 	beq.w	8006e6c <_dtoa_r+0xba4>
 8006c72:	2f00      	cmp	r7, #0
 8006c74:	dd05      	ble.n	8006c82 <_dtoa_r+0x9ba>
 8006c76:	4631      	mov	r1, r6
 8006c78:	463a      	mov	r2, r7
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	f000 fc42 	bl	8007504 <__lshift>
 8006c80:	4606      	mov	r6, r0
 8006c82:	f1b8 0f00 	cmp.w	r8, #0
 8006c86:	d05c      	beq.n	8006d42 <_dtoa_r+0xa7a>
 8006c88:	4628      	mov	r0, r5
 8006c8a:	6871      	ldr	r1, [r6, #4]
 8006c8c:	f000 fa2c 	bl	80070e8 <_Balloc>
 8006c90:	4607      	mov	r7, r0
 8006c92:	b928      	cbnz	r0, 8006ca0 <_dtoa_r+0x9d8>
 8006c94:	4602      	mov	r2, r0
 8006c96:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006c9a:	4b7f      	ldr	r3, [pc, #508]	; (8006e98 <_dtoa_r+0xbd0>)
 8006c9c:	f7ff bb28 	b.w	80062f0 <_dtoa_r+0x28>
 8006ca0:	6932      	ldr	r2, [r6, #16]
 8006ca2:	f106 010c 	add.w	r1, r6, #12
 8006ca6:	3202      	adds	r2, #2
 8006ca8:	0092      	lsls	r2, r2, #2
 8006caa:	300c      	adds	r0, #12
 8006cac:	f000 fa0e 	bl	80070cc <memcpy>
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	4639      	mov	r1, r7
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	f000 fc25 	bl	8007504 <__lshift>
 8006cba:	46b0      	mov	r8, r6
 8006cbc:	4606      	mov	r6, r0
 8006cbe:	9b03      	ldr	r3, [sp, #12]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	9308      	str	r3, [sp, #32]
 8006cc4:	9b03      	ldr	r3, [sp, #12]
 8006cc6:	444b      	add	r3, r9
 8006cc8:	930a      	str	r3, [sp, #40]	; 0x28
 8006cca:	9b04      	ldr	r3, [sp, #16]
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8006cd2:	9b08      	ldr	r3, [sp, #32]
 8006cd4:	4621      	mov	r1, r4
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	4658      	mov	r0, fp
 8006cda:	9304      	str	r3, [sp, #16]
 8006cdc:	f7ff fa66 	bl	80061ac <quorem>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	4641      	mov	r1, r8
 8006ce4:	3330      	adds	r3, #48	; 0x30
 8006ce6:	9006      	str	r0, [sp, #24]
 8006ce8:	4658      	mov	r0, fp
 8006cea:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cec:	f000 fc7a 	bl	80075e4 <__mcmp>
 8006cf0:	4632      	mov	r2, r6
 8006cf2:	4681      	mov	r9, r0
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	f000 fc90 	bl	800761c <__mdiff>
 8006cfc:	68c2      	ldr	r2, [r0, #12]
 8006cfe:	4607      	mov	r7, r0
 8006d00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d02:	bb02      	cbnz	r2, 8006d46 <_dtoa_r+0xa7e>
 8006d04:	4601      	mov	r1, r0
 8006d06:	4658      	mov	r0, fp
 8006d08:	f000 fc6c 	bl	80075e4 <__mcmp>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d10:	4639      	mov	r1, r7
 8006d12:	4628      	mov	r0, r5
 8006d14:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006d18:	f000 fa26 	bl	8007168 <_Bfree>
 8006d1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d20:	9f08      	ldr	r7, [sp, #32]
 8006d22:	ea43 0102 	orr.w	r1, r3, r2
 8006d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d2c:	d10d      	bne.n	8006d4a <_dtoa_r+0xa82>
 8006d2e:	2b39      	cmp	r3, #57	; 0x39
 8006d30:	d029      	beq.n	8006d86 <_dtoa_r+0xabe>
 8006d32:	f1b9 0f00 	cmp.w	r9, #0
 8006d36:	dd01      	ble.n	8006d3c <_dtoa_r+0xa74>
 8006d38:	9b06      	ldr	r3, [sp, #24]
 8006d3a:	3331      	adds	r3, #49	; 0x31
 8006d3c:	9a04      	ldr	r2, [sp, #16]
 8006d3e:	7013      	strb	r3, [r2, #0]
 8006d40:	e776      	b.n	8006c30 <_dtoa_r+0x968>
 8006d42:	4630      	mov	r0, r6
 8006d44:	e7b9      	b.n	8006cba <_dtoa_r+0x9f2>
 8006d46:	2201      	movs	r2, #1
 8006d48:	e7e2      	b.n	8006d10 <_dtoa_r+0xa48>
 8006d4a:	f1b9 0f00 	cmp.w	r9, #0
 8006d4e:	db06      	blt.n	8006d5e <_dtoa_r+0xa96>
 8006d50:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006d52:	ea41 0909 	orr.w	r9, r1, r9
 8006d56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d58:	ea59 0101 	orrs.w	r1, r9, r1
 8006d5c:	d120      	bne.n	8006da0 <_dtoa_r+0xad8>
 8006d5e:	2a00      	cmp	r2, #0
 8006d60:	ddec      	ble.n	8006d3c <_dtoa_r+0xa74>
 8006d62:	4659      	mov	r1, fp
 8006d64:	2201      	movs	r2, #1
 8006d66:	4628      	mov	r0, r5
 8006d68:	9308      	str	r3, [sp, #32]
 8006d6a:	f000 fbcb 	bl	8007504 <__lshift>
 8006d6e:	4621      	mov	r1, r4
 8006d70:	4683      	mov	fp, r0
 8006d72:	f000 fc37 	bl	80075e4 <__mcmp>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	9b08      	ldr	r3, [sp, #32]
 8006d7a:	dc02      	bgt.n	8006d82 <_dtoa_r+0xaba>
 8006d7c:	d1de      	bne.n	8006d3c <_dtoa_r+0xa74>
 8006d7e:	07da      	lsls	r2, r3, #31
 8006d80:	d5dc      	bpl.n	8006d3c <_dtoa_r+0xa74>
 8006d82:	2b39      	cmp	r3, #57	; 0x39
 8006d84:	d1d8      	bne.n	8006d38 <_dtoa_r+0xa70>
 8006d86:	2339      	movs	r3, #57	; 0x39
 8006d88:	9a04      	ldr	r2, [sp, #16]
 8006d8a:	7013      	strb	r3, [r2, #0]
 8006d8c:	463b      	mov	r3, r7
 8006d8e:	461f      	mov	r7, r3
 8006d90:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	2a39      	cmp	r2, #57	; 0x39
 8006d98:	d050      	beq.n	8006e3c <_dtoa_r+0xb74>
 8006d9a:	3201      	adds	r2, #1
 8006d9c:	701a      	strb	r2, [r3, #0]
 8006d9e:	e747      	b.n	8006c30 <_dtoa_r+0x968>
 8006da0:	2a00      	cmp	r2, #0
 8006da2:	dd03      	ble.n	8006dac <_dtoa_r+0xae4>
 8006da4:	2b39      	cmp	r3, #57	; 0x39
 8006da6:	d0ee      	beq.n	8006d86 <_dtoa_r+0xabe>
 8006da8:	3301      	adds	r3, #1
 8006daa:	e7c7      	b.n	8006d3c <_dtoa_r+0xa74>
 8006dac:	9a08      	ldr	r2, [sp, #32]
 8006dae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006db0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006db4:	428a      	cmp	r2, r1
 8006db6:	d02a      	beq.n	8006e0e <_dtoa_r+0xb46>
 8006db8:	4659      	mov	r1, fp
 8006dba:	2300      	movs	r3, #0
 8006dbc:	220a      	movs	r2, #10
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f000 f9f4 	bl	80071ac <__multadd>
 8006dc4:	45b0      	cmp	r8, r6
 8006dc6:	4683      	mov	fp, r0
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	f04f 020a 	mov.w	r2, #10
 8006dd0:	4641      	mov	r1, r8
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	d107      	bne.n	8006de6 <_dtoa_r+0xb1e>
 8006dd6:	f000 f9e9 	bl	80071ac <__multadd>
 8006dda:	4680      	mov	r8, r0
 8006ddc:	4606      	mov	r6, r0
 8006dde:	9b08      	ldr	r3, [sp, #32]
 8006de0:	3301      	adds	r3, #1
 8006de2:	9308      	str	r3, [sp, #32]
 8006de4:	e775      	b.n	8006cd2 <_dtoa_r+0xa0a>
 8006de6:	f000 f9e1 	bl	80071ac <__multadd>
 8006dea:	4631      	mov	r1, r6
 8006dec:	4680      	mov	r8, r0
 8006dee:	2300      	movs	r3, #0
 8006df0:	220a      	movs	r2, #10
 8006df2:	4628      	mov	r0, r5
 8006df4:	f000 f9da 	bl	80071ac <__multadd>
 8006df8:	4606      	mov	r6, r0
 8006dfa:	e7f0      	b.n	8006dde <_dtoa_r+0xb16>
 8006dfc:	f1b9 0f00 	cmp.w	r9, #0
 8006e00:	bfcc      	ite	gt
 8006e02:	464f      	movgt	r7, r9
 8006e04:	2701      	movle	r7, #1
 8006e06:	f04f 0800 	mov.w	r8, #0
 8006e0a:	9a03      	ldr	r2, [sp, #12]
 8006e0c:	4417      	add	r7, r2
 8006e0e:	4659      	mov	r1, fp
 8006e10:	2201      	movs	r2, #1
 8006e12:	4628      	mov	r0, r5
 8006e14:	9308      	str	r3, [sp, #32]
 8006e16:	f000 fb75 	bl	8007504 <__lshift>
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	4683      	mov	fp, r0
 8006e1e:	f000 fbe1 	bl	80075e4 <__mcmp>
 8006e22:	2800      	cmp	r0, #0
 8006e24:	dcb2      	bgt.n	8006d8c <_dtoa_r+0xac4>
 8006e26:	d102      	bne.n	8006e2e <_dtoa_r+0xb66>
 8006e28:	9b08      	ldr	r3, [sp, #32]
 8006e2a:	07db      	lsls	r3, r3, #31
 8006e2c:	d4ae      	bmi.n	8006d8c <_dtoa_r+0xac4>
 8006e2e:	463b      	mov	r3, r7
 8006e30:	461f      	mov	r7, r3
 8006e32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e36:	2a30      	cmp	r2, #48	; 0x30
 8006e38:	d0fa      	beq.n	8006e30 <_dtoa_r+0xb68>
 8006e3a:	e6f9      	b.n	8006c30 <_dtoa_r+0x968>
 8006e3c:	9a03      	ldr	r2, [sp, #12]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d1a5      	bne.n	8006d8e <_dtoa_r+0xac6>
 8006e42:	2331      	movs	r3, #49	; 0x31
 8006e44:	f10a 0a01 	add.w	sl, sl, #1
 8006e48:	e779      	b.n	8006d3e <_dtoa_r+0xa76>
 8006e4a:	4b14      	ldr	r3, [pc, #80]	; (8006e9c <_dtoa_r+0xbd4>)
 8006e4c:	f7ff baa8 	b.w	80063a0 <_dtoa_r+0xd8>
 8006e50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f47f aa81 	bne.w	800635a <_dtoa_r+0x92>
 8006e58:	4b11      	ldr	r3, [pc, #68]	; (8006ea0 <_dtoa_r+0xbd8>)
 8006e5a:	f7ff baa1 	b.w	80063a0 <_dtoa_r+0xd8>
 8006e5e:	f1b9 0f00 	cmp.w	r9, #0
 8006e62:	dc03      	bgt.n	8006e6c <_dtoa_r+0xba4>
 8006e64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	f73f aecb 	bgt.w	8006c02 <_dtoa_r+0x93a>
 8006e6c:	9f03      	ldr	r7, [sp, #12]
 8006e6e:	4621      	mov	r1, r4
 8006e70:	4658      	mov	r0, fp
 8006e72:	f7ff f99b 	bl	80061ac <quorem>
 8006e76:	9a03      	ldr	r2, [sp, #12]
 8006e78:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006e7c:	f807 3b01 	strb.w	r3, [r7], #1
 8006e80:	1aba      	subs	r2, r7, r2
 8006e82:	4591      	cmp	r9, r2
 8006e84:	ddba      	ble.n	8006dfc <_dtoa_r+0xb34>
 8006e86:	4659      	mov	r1, fp
 8006e88:	2300      	movs	r3, #0
 8006e8a:	220a      	movs	r2, #10
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	f000 f98d 	bl	80071ac <__multadd>
 8006e92:	4683      	mov	fp, r0
 8006e94:	e7eb      	b.n	8006e6e <_dtoa_r+0xba6>
 8006e96:	bf00      	nop
 8006e98:	080084a3 	.word	0x080084a3
 8006e9c:	08008400 	.word	0x08008400
 8006ea0:	08008424 	.word	0x08008424

08006ea4 <std>:
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	b510      	push	{r4, lr}
 8006ea8:	4604      	mov	r4, r0
 8006eaa:	e9c0 3300 	strd	r3, r3, [r0]
 8006eae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006eb2:	6083      	str	r3, [r0, #8]
 8006eb4:	8181      	strh	r1, [r0, #12]
 8006eb6:	6643      	str	r3, [r0, #100]	; 0x64
 8006eb8:	81c2      	strh	r2, [r0, #14]
 8006eba:	6183      	str	r3, [r0, #24]
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	2208      	movs	r2, #8
 8006ec0:	305c      	adds	r0, #92	; 0x5c
 8006ec2:	f7fe fcf3 	bl	80058ac <memset>
 8006ec6:	4b05      	ldr	r3, [pc, #20]	; (8006edc <std+0x38>)
 8006ec8:	6224      	str	r4, [r4, #32]
 8006eca:	6263      	str	r3, [r4, #36]	; 0x24
 8006ecc:	4b04      	ldr	r3, [pc, #16]	; (8006ee0 <std+0x3c>)
 8006ece:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ed0:	4b04      	ldr	r3, [pc, #16]	; (8006ee4 <std+0x40>)
 8006ed2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ed4:	4b04      	ldr	r3, [pc, #16]	; (8006ee8 <std+0x44>)
 8006ed6:	6323      	str	r3, [r4, #48]	; 0x30
 8006ed8:	bd10      	pop	{r4, pc}
 8006eda:	bf00      	nop
 8006edc:	08007c9d 	.word	0x08007c9d
 8006ee0:	08007cbf 	.word	0x08007cbf
 8006ee4:	08007cf7 	.word	0x08007cf7
 8006ee8:	08007d1b 	.word	0x08007d1b

08006eec <_cleanup_r>:
 8006eec:	4901      	ldr	r1, [pc, #4]	; (8006ef4 <_cleanup_r+0x8>)
 8006eee:	f000 b8af 	b.w	8007050 <_fwalk_reent>
 8006ef2:	bf00      	nop
 8006ef4:	08008029 	.word	0x08008029

08006ef8 <__sfmoreglue>:
 8006ef8:	2268      	movs	r2, #104	; 0x68
 8006efa:	b570      	push	{r4, r5, r6, lr}
 8006efc:	1e4d      	subs	r5, r1, #1
 8006efe:	4355      	muls	r5, r2
 8006f00:	460e      	mov	r6, r1
 8006f02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f06:	f000 fced 	bl	80078e4 <_malloc_r>
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	b140      	cbz	r0, 8006f20 <__sfmoreglue+0x28>
 8006f0e:	2100      	movs	r1, #0
 8006f10:	e9c0 1600 	strd	r1, r6, [r0]
 8006f14:	300c      	adds	r0, #12
 8006f16:	60a0      	str	r0, [r4, #8]
 8006f18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f1c:	f7fe fcc6 	bl	80058ac <memset>
 8006f20:	4620      	mov	r0, r4
 8006f22:	bd70      	pop	{r4, r5, r6, pc}

08006f24 <__sfp_lock_acquire>:
 8006f24:	4801      	ldr	r0, [pc, #4]	; (8006f2c <__sfp_lock_acquire+0x8>)
 8006f26:	f000 b8b8 	b.w	800709a <__retarget_lock_acquire_recursive>
 8006f2a:	bf00      	nop
 8006f2c:	20000341 	.word	0x20000341

08006f30 <__sfp_lock_release>:
 8006f30:	4801      	ldr	r0, [pc, #4]	; (8006f38 <__sfp_lock_release+0x8>)
 8006f32:	f000 b8b3 	b.w	800709c <__retarget_lock_release_recursive>
 8006f36:	bf00      	nop
 8006f38:	20000341 	.word	0x20000341

08006f3c <__sinit_lock_acquire>:
 8006f3c:	4801      	ldr	r0, [pc, #4]	; (8006f44 <__sinit_lock_acquire+0x8>)
 8006f3e:	f000 b8ac 	b.w	800709a <__retarget_lock_acquire_recursive>
 8006f42:	bf00      	nop
 8006f44:	20000342 	.word	0x20000342

08006f48 <__sinit_lock_release>:
 8006f48:	4801      	ldr	r0, [pc, #4]	; (8006f50 <__sinit_lock_release+0x8>)
 8006f4a:	f000 b8a7 	b.w	800709c <__retarget_lock_release_recursive>
 8006f4e:	bf00      	nop
 8006f50:	20000342 	.word	0x20000342

08006f54 <__sinit>:
 8006f54:	b510      	push	{r4, lr}
 8006f56:	4604      	mov	r4, r0
 8006f58:	f7ff fff0 	bl	8006f3c <__sinit_lock_acquire>
 8006f5c:	69a3      	ldr	r3, [r4, #24]
 8006f5e:	b11b      	cbz	r3, 8006f68 <__sinit+0x14>
 8006f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f64:	f7ff bff0 	b.w	8006f48 <__sinit_lock_release>
 8006f68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f6c:	6523      	str	r3, [r4, #80]	; 0x50
 8006f6e:	4b13      	ldr	r3, [pc, #76]	; (8006fbc <__sinit+0x68>)
 8006f70:	4a13      	ldr	r2, [pc, #76]	; (8006fc0 <__sinit+0x6c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f76:	42a3      	cmp	r3, r4
 8006f78:	bf08      	it	eq
 8006f7a:	2301      	moveq	r3, #1
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	bf08      	it	eq
 8006f80:	61a3      	streq	r3, [r4, #24]
 8006f82:	f000 f81f 	bl	8006fc4 <__sfp>
 8006f86:	6060      	str	r0, [r4, #4]
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f000 f81b 	bl	8006fc4 <__sfp>
 8006f8e:	60a0      	str	r0, [r4, #8]
 8006f90:	4620      	mov	r0, r4
 8006f92:	f000 f817 	bl	8006fc4 <__sfp>
 8006f96:	2200      	movs	r2, #0
 8006f98:	2104      	movs	r1, #4
 8006f9a:	60e0      	str	r0, [r4, #12]
 8006f9c:	6860      	ldr	r0, [r4, #4]
 8006f9e:	f7ff ff81 	bl	8006ea4 <std>
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	2109      	movs	r1, #9
 8006fa6:	68a0      	ldr	r0, [r4, #8]
 8006fa8:	f7ff ff7c 	bl	8006ea4 <std>
 8006fac:	2202      	movs	r2, #2
 8006fae:	2112      	movs	r1, #18
 8006fb0:	68e0      	ldr	r0, [r4, #12]
 8006fb2:	f7ff ff77 	bl	8006ea4 <std>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	61a3      	str	r3, [r4, #24]
 8006fba:	e7d1      	b.n	8006f60 <__sinit+0xc>
 8006fbc:	080083ec 	.word	0x080083ec
 8006fc0:	08006eed 	.word	0x08006eed

08006fc4 <__sfp>:
 8006fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc6:	4607      	mov	r7, r0
 8006fc8:	f7ff ffac 	bl	8006f24 <__sfp_lock_acquire>
 8006fcc:	4b1e      	ldr	r3, [pc, #120]	; (8007048 <__sfp+0x84>)
 8006fce:	681e      	ldr	r6, [r3, #0]
 8006fd0:	69b3      	ldr	r3, [r6, #24]
 8006fd2:	b913      	cbnz	r3, 8006fda <__sfp+0x16>
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	f7ff ffbd 	bl	8006f54 <__sinit>
 8006fda:	3648      	adds	r6, #72	; 0x48
 8006fdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	d503      	bpl.n	8006fec <__sfp+0x28>
 8006fe4:	6833      	ldr	r3, [r6, #0]
 8006fe6:	b30b      	cbz	r3, 800702c <__sfp+0x68>
 8006fe8:	6836      	ldr	r6, [r6, #0]
 8006fea:	e7f7      	b.n	8006fdc <__sfp+0x18>
 8006fec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ff0:	b9d5      	cbnz	r5, 8007028 <__sfp+0x64>
 8006ff2:	4b16      	ldr	r3, [pc, #88]	; (800704c <__sfp+0x88>)
 8006ff4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ff8:	60e3      	str	r3, [r4, #12]
 8006ffa:	6665      	str	r5, [r4, #100]	; 0x64
 8006ffc:	f000 f84c 	bl	8007098 <__retarget_lock_init_recursive>
 8007000:	f7ff ff96 	bl	8006f30 <__sfp_lock_release>
 8007004:	2208      	movs	r2, #8
 8007006:	4629      	mov	r1, r5
 8007008:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800700c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007010:	6025      	str	r5, [r4, #0]
 8007012:	61a5      	str	r5, [r4, #24]
 8007014:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007018:	f7fe fc48 	bl	80058ac <memset>
 800701c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007020:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007024:	4620      	mov	r0, r4
 8007026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007028:	3468      	adds	r4, #104	; 0x68
 800702a:	e7d9      	b.n	8006fe0 <__sfp+0x1c>
 800702c:	2104      	movs	r1, #4
 800702e:	4638      	mov	r0, r7
 8007030:	f7ff ff62 	bl	8006ef8 <__sfmoreglue>
 8007034:	4604      	mov	r4, r0
 8007036:	6030      	str	r0, [r6, #0]
 8007038:	2800      	cmp	r0, #0
 800703a:	d1d5      	bne.n	8006fe8 <__sfp+0x24>
 800703c:	f7ff ff78 	bl	8006f30 <__sfp_lock_release>
 8007040:	230c      	movs	r3, #12
 8007042:	603b      	str	r3, [r7, #0]
 8007044:	e7ee      	b.n	8007024 <__sfp+0x60>
 8007046:	bf00      	nop
 8007048:	080083ec 	.word	0x080083ec
 800704c:	ffff0001 	.word	0xffff0001

08007050 <_fwalk_reent>:
 8007050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007054:	4606      	mov	r6, r0
 8007056:	4688      	mov	r8, r1
 8007058:	2700      	movs	r7, #0
 800705a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800705e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007062:	f1b9 0901 	subs.w	r9, r9, #1
 8007066:	d505      	bpl.n	8007074 <_fwalk_reent+0x24>
 8007068:	6824      	ldr	r4, [r4, #0]
 800706a:	2c00      	cmp	r4, #0
 800706c:	d1f7      	bne.n	800705e <_fwalk_reent+0xe>
 800706e:	4638      	mov	r0, r7
 8007070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007074:	89ab      	ldrh	r3, [r5, #12]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d907      	bls.n	800708a <_fwalk_reent+0x3a>
 800707a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800707e:	3301      	adds	r3, #1
 8007080:	d003      	beq.n	800708a <_fwalk_reent+0x3a>
 8007082:	4629      	mov	r1, r5
 8007084:	4630      	mov	r0, r6
 8007086:	47c0      	blx	r8
 8007088:	4307      	orrs	r7, r0
 800708a:	3568      	adds	r5, #104	; 0x68
 800708c:	e7e9      	b.n	8007062 <_fwalk_reent+0x12>
	...

08007090 <_localeconv_r>:
 8007090:	4800      	ldr	r0, [pc, #0]	; (8007094 <_localeconv_r+0x4>)
 8007092:	4770      	bx	lr
 8007094:	20000168 	.word	0x20000168

08007098 <__retarget_lock_init_recursive>:
 8007098:	4770      	bx	lr

0800709a <__retarget_lock_acquire_recursive>:
 800709a:	4770      	bx	lr

0800709c <__retarget_lock_release_recursive>:
 800709c:	4770      	bx	lr
	...

080070a0 <malloc>:
 80070a0:	4b02      	ldr	r3, [pc, #8]	; (80070ac <malloc+0xc>)
 80070a2:	4601      	mov	r1, r0
 80070a4:	6818      	ldr	r0, [r3, #0]
 80070a6:	f000 bc1d 	b.w	80078e4 <_malloc_r>
 80070aa:	bf00      	nop
 80070ac:	20000014 	.word	0x20000014

080070b0 <memchr>:
 80070b0:	4603      	mov	r3, r0
 80070b2:	b510      	push	{r4, lr}
 80070b4:	b2c9      	uxtb	r1, r1
 80070b6:	4402      	add	r2, r0
 80070b8:	4293      	cmp	r3, r2
 80070ba:	4618      	mov	r0, r3
 80070bc:	d101      	bne.n	80070c2 <memchr+0x12>
 80070be:	2000      	movs	r0, #0
 80070c0:	e003      	b.n	80070ca <memchr+0x1a>
 80070c2:	7804      	ldrb	r4, [r0, #0]
 80070c4:	3301      	adds	r3, #1
 80070c6:	428c      	cmp	r4, r1
 80070c8:	d1f6      	bne.n	80070b8 <memchr+0x8>
 80070ca:	bd10      	pop	{r4, pc}

080070cc <memcpy>:
 80070cc:	440a      	add	r2, r1
 80070ce:	4291      	cmp	r1, r2
 80070d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80070d4:	d100      	bne.n	80070d8 <memcpy+0xc>
 80070d6:	4770      	bx	lr
 80070d8:	b510      	push	{r4, lr}
 80070da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070de:	4291      	cmp	r1, r2
 80070e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070e4:	d1f9      	bne.n	80070da <memcpy+0xe>
 80070e6:	bd10      	pop	{r4, pc}

080070e8 <_Balloc>:
 80070e8:	b570      	push	{r4, r5, r6, lr}
 80070ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070ec:	4604      	mov	r4, r0
 80070ee:	460d      	mov	r5, r1
 80070f0:	b976      	cbnz	r6, 8007110 <_Balloc+0x28>
 80070f2:	2010      	movs	r0, #16
 80070f4:	f7ff ffd4 	bl	80070a0 <malloc>
 80070f8:	4602      	mov	r2, r0
 80070fa:	6260      	str	r0, [r4, #36]	; 0x24
 80070fc:	b920      	cbnz	r0, 8007108 <_Balloc+0x20>
 80070fe:	2166      	movs	r1, #102	; 0x66
 8007100:	4b17      	ldr	r3, [pc, #92]	; (8007160 <_Balloc+0x78>)
 8007102:	4818      	ldr	r0, [pc, #96]	; (8007164 <_Balloc+0x7c>)
 8007104:	f000 fee0 	bl	8007ec8 <__assert_func>
 8007108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800710c:	6006      	str	r6, [r0, #0]
 800710e:	60c6      	str	r6, [r0, #12]
 8007110:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007112:	68f3      	ldr	r3, [r6, #12]
 8007114:	b183      	cbz	r3, 8007138 <_Balloc+0x50>
 8007116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800711e:	b9b8      	cbnz	r0, 8007150 <_Balloc+0x68>
 8007120:	2101      	movs	r1, #1
 8007122:	fa01 f605 	lsl.w	r6, r1, r5
 8007126:	1d72      	adds	r2, r6, #5
 8007128:	4620      	mov	r0, r4
 800712a:	0092      	lsls	r2, r2, #2
 800712c:	f000 fb5e 	bl	80077ec <_calloc_r>
 8007130:	b160      	cbz	r0, 800714c <_Balloc+0x64>
 8007132:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007136:	e00e      	b.n	8007156 <_Balloc+0x6e>
 8007138:	2221      	movs	r2, #33	; 0x21
 800713a:	2104      	movs	r1, #4
 800713c:	4620      	mov	r0, r4
 800713e:	f000 fb55 	bl	80077ec <_calloc_r>
 8007142:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007144:	60f0      	str	r0, [r6, #12]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1e4      	bne.n	8007116 <_Balloc+0x2e>
 800714c:	2000      	movs	r0, #0
 800714e:	bd70      	pop	{r4, r5, r6, pc}
 8007150:	6802      	ldr	r2, [r0, #0]
 8007152:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007156:	2300      	movs	r3, #0
 8007158:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800715c:	e7f7      	b.n	800714e <_Balloc+0x66>
 800715e:	bf00      	nop
 8007160:	08008431 	.word	0x08008431
 8007164:	08008514 	.word	0x08008514

08007168 <_Bfree>:
 8007168:	b570      	push	{r4, r5, r6, lr}
 800716a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800716c:	4605      	mov	r5, r0
 800716e:	460c      	mov	r4, r1
 8007170:	b976      	cbnz	r6, 8007190 <_Bfree+0x28>
 8007172:	2010      	movs	r0, #16
 8007174:	f7ff ff94 	bl	80070a0 <malloc>
 8007178:	4602      	mov	r2, r0
 800717a:	6268      	str	r0, [r5, #36]	; 0x24
 800717c:	b920      	cbnz	r0, 8007188 <_Bfree+0x20>
 800717e:	218a      	movs	r1, #138	; 0x8a
 8007180:	4b08      	ldr	r3, [pc, #32]	; (80071a4 <_Bfree+0x3c>)
 8007182:	4809      	ldr	r0, [pc, #36]	; (80071a8 <_Bfree+0x40>)
 8007184:	f000 fea0 	bl	8007ec8 <__assert_func>
 8007188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800718c:	6006      	str	r6, [r0, #0]
 800718e:	60c6      	str	r6, [r0, #12]
 8007190:	b13c      	cbz	r4, 80071a2 <_Bfree+0x3a>
 8007192:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007194:	6862      	ldr	r2, [r4, #4]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800719c:	6021      	str	r1, [r4, #0]
 800719e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071a2:	bd70      	pop	{r4, r5, r6, pc}
 80071a4:	08008431 	.word	0x08008431
 80071a8:	08008514 	.word	0x08008514

080071ac <__multadd>:
 80071ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b0:	4607      	mov	r7, r0
 80071b2:	460c      	mov	r4, r1
 80071b4:	461e      	mov	r6, r3
 80071b6:	2000      	movs	r0, #0
 80071b8:	690d      	ldr	r5, [r1, #16]
 80071ba:	f101 0c14 	add.w	ip, r1, #20
 80071be:	f8dc 3000 	ldr.w	r3, [ip]
 80071c2:	3001      	adds	r0, #1
 80071c4:	b299      	uxth	r1, r3
 80071c6:	fb02 6101 	mla	r1, r2, r1, r6
 80071ca:	0c1e      	lsrs	r6, r3, #16
 80071cc:	0c0b      	lsrs	r3, r1, #16
 80071ce:	fb02 3306 	mla	r3, r2, r6, r3
 80071d2:	b289      	uxth	r1, r1
 80071d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071d8:	4285      	cmp	r5, r0
 80071da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071de:	f84c 1b04 	str.w	r1, [ip], #4
 80071e2:	dcec      	bgt.n	80071be <__multadd+0x12>
 80071e4:	b30e      	cbz	r6, 800722a <__multadd+0x7e>
 80071e6:	68a3      	ldr	r3, [r4, #8]
 80071e8:	42ab      	cmp	r3, r5
 80071ea:	dc19      	bgt.n	8007220 <__multadd+0x74>
 80071ec:	6861      	ldr	r1, [r4, #4]
 80071ee:	4638      	mov	r0, r7
 80071f0:	3101      	adds	r1, #1
 80071f2:	f7ff ff79 	bl	80070e8 <_Balloc>
 80071f6:	4680      	mov	r8, r0
 80071f8:	b928      	cbnz	r0, 8007206 <__multadd+0x5a>
 80071fa:	4602      	mov	r2, r0
 80071fc:	21b5      	movs	r1, #181	; 0xb5
 80071fe:	4b0c      	ldr	r3, [pc, #48]	; (8007230 <__multadd+0x84>)
 8007200:	480c      	ldr	r0, [pc, #48]	; (8007234 <__multadd+0x88>)
 8007202:	f000 fe61 	bl	8007ec8 <__assert_func>
 8007206:	6922      	ldr	r2, [r4, #16]
 8007208:	f104 010c 	add.w	r1, r4, #12
 800720c:	3202      	adds	r2, #2
 800720e:	0092      	lsls	r2, r2, #2
 8007210:	300c      	adds	r0, #12
 8007212:	f7ff ff5b 	bl	80070cc <memcpy>
 8007216:	4621      	mov	r1, r4
 8007218:	4638      	mov	r0, r7
 800721a:	f7ff ffa5 	bl	8007168 <_Bfree>
 800721e:	4644      	mov	r4, r8
 8007220:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007224:	3501      	adds	r5, #1
 8007226:	615e      	str	r6, [r3, #20]
 8007228:	6125      	str	r5, [r4, #16]
 800722a:	4620      	mov	r0, r4
 800722c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007230:	080084a3 	.word	0x080084a3
 8007234:	08008514 	.word	0x08008514

08007238 <__hi0bits>:
 8007238:	0c02      	lsrs	r2, r0, #16
 800723a:	0412      	lsls	r2, r2, #16
 800723c:	4603      	mov	r3, r0
 800723e:	b9ca      	cbnz	r2, 8007274 <__hi0bits+0x3c>
 8007240:	0403      	lsls	r3, r0, #16
 8007242:	2010      	movs	r0, #16
 8007244:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007248:	bf04      	itt	eq
 800724a:	021b      	lsleq	r3, r3, #8
 800724c:	3008      	addeq	r0, #8
 800724e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007252:	bf04      	itt	eq
 8007254:	011b      	lsleq	r3, r3, #4
 8007256:	3004      	addeq	r0, #4
 8007258:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800725c:	bf04      	itt	eq
 800725e:	009b      	lsleq	r3, r3, #2
 8007260:	3002      	addeq	r0, #2
 8007262:	2b00      	cmp	r3, #0
 8007264:	db05      	blt.n	8007272 <__hi0bits+0x3a>
 8007266:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800726a:	f100 0001 	add.w	r0, r0, #1
 800726e:	bf08      	it	eq
 8007270:	2020      	moveq	r0, #32
 8007272:	4770      	bx	lr
 8007274:	2000      	movs	r0, #0
 8007276:	e7e5      	b.n	8007244 <__hi0bits+0xc>

08007278 <__lo0bits>:
 8007278:	6803      	ldr	r3, [r0, #0]
 800727a:	4602      	mov	r2, r0
 800727c:	f013 0007 	ands.w	r0, r3, #7
 8007280:	d00b      	beq.n	800729a <__lo0bits+0x22>
 8007282:	07d9      	lsls	r1, r3, #31
 8007284:	d421      	bmi.n	80072ca <__lo0bits+0x52>
 8007286:	0798      	lsls	r0, r3, #30
 8007288:	bf49      	itett	mi
 800728a:	085b      	lsrmi	r3, r3, #1
 800728c:	089b      	lsrpl	r3, r3, #2
 800728e:	2001      	movmi	r0, #1
 8007290:	6013      	strmi	r3, [r2, #0]
 8007292:	bf5c      	itt	pl
 8007294:	2002      	movpl	r0, #2
 8007296:	6013      	strpl	r3, [r2, #0]
 8007298:	4770      	bx	lr
 800729a:	b299      	uxth	r1, r3
 800729c:	b909      	cbnz	r1, 80072a2 <__lo0bits+0x2a>
 800729e:	2010      	movs	r0, #16
 80072a0:	0c1b      	lsrs	r3, r3, #16
 80072a2:	b2d9      	uxtb	r1, r3
 80072a4:	b909      	cbnz	r1, 80072aa <__lo0bits+0x32>
 80072a6:	3008      	adds	r0, #8
 80072a8:	0a1b      	lsrs	r3, r3, #8
 80072aa:	0719      	lsls	r1, r3, #28
 80072ac:	bf04      	itt	eq
 80072ae:	091b      	lsreq	r3, r3, #4
 80072b0:	3004      	addeq	r0, #4
 80072b2:	0799      	lsls	r1, r3, #30
 80072b4:	bf04      	itt	eq
 80072b6:	089b      	lsreq	r3, r3, #2
 80072b8:	3002      	addeq	r0, #2
 80072ba:	07d9      	lsls	r1, r3, #31
 80072bc:	d403      	bmi.n	80072c6 <__lo0bits+0x4e>
 80072be:	085b      	lsrs	r3, r3, #1
 80072c0:	f100 0001 	add.w	r0, r0, #1
 80072c4:	d003      	beq.n	80072ce <__lo0bits+0x56>
 80072c6:	6013      	str	r3, [r2, #0]
 80072c8:	4770      	bx	lr
 80072ca:	2000      	movs	r0, #0
 80072cc:	4770      	bx	lr
 80072ce:	2020      	movs	r0, #32
 80072d0:	4770      	bx	lr
	...

080072d4 <__i2b>:
 80072d4:	b510      	push	{r4, lr}
 80072d6:	460c      	mov	r4, r1
 80072d8:	2101      	movs	r1, #1
 80072da:	f7ff ff05 	bl	80070e8 <_Balloc>
 80072de:	4602      	mov	r2, r0
 80072e0:	b928      	cbnz	r0, 80072ee <__i2b+0x1a>
 80072e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80072e6:	4b04      	ldr	r3, [pc, #16]	; (80072f8 <__i2b+0x24>)
 80072e8:	4804      	ldr	r0, [pc, #16]	; (80072fc <__i2b+0x28>)
 80072ea:	f000 fded 	bl	8007ec8 <__assert_func>
 80072ee:	2301      	movs	r3, #1
 80072f0:	6144      	str	r4, [r0, #20]
 80072f2:	6103      	str	r3, [r0, #16]
 80072f4:	bd10      	pop	{r4, pc}
 80072f6:	bf00      	nop
 80072f8:	080084a3 	.word	0x080084a3
 80072fc:	08008514 	.word	0x08008514

08007300 <__multiply>:
 8007300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007304:	4691      	mov	r9, r2
 8007306:	690a      	ldr	r2, [r1, #16]
 8007308:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800730c:	460c      	mov	r4, r1
 800730e:	429a      	cmp	r2, r3
 8007310:	bfbe      	ittt	lt
 8007312:	460b      	movlt	r3, r1
 8007314:	464c      	movlt	r4, r9
 8007316:	4699      	movlt	r9, r3
 8007318:	6927      	ldr	r7, [r4, #16]
 800731a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800731e:	68a3      	ldr	r3, [r4, #8]
 8007320:	6861      	ldr	r1, [r4, #4]
 8007322:	eb07 060a 	add.w	r6, r7, sl
 8007326:	42b3      	cmp	r3, r6
 8007328:	b085      	sub	sp, #20
 800732a:	bfb8      	it	lt
 800732c:	3101      	addlt	r1, #1
 800732e:	f7ff fedb 	bl	80070e8 <_Balloc>
 8007332:	b930      	cbnz	r0, 8007342 <__multiply+0x42>
 8007334:	4602      	mov	r2, r0
 8007336:	f240 115d 	movw	r1, #349	; 0x15d
 800733a:	4b43      	ldr	r3, [pc, #268]	; (8007448 <__multiply+0x148>)
 800733c:	4843      	ldr	r0, [pc, #268]	; (800744c <__multiply+0x14c>)
 800733e:	f000 fdc3 	bl	8007ec8 <__assert_func>
 8007342:	f100 0514 	add.w	r5, r0, #20
 8007346:	462b      	mov	r3, r5
 8007348:	2200      	movs	r2, #0
 800734a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800734e:	4543      	cmp	r3, r8
 8007350:	d321      	bcc.n	8007396 <__multiply+0x96>
 8007352:	f104 0314 	add.w	r3, r4, #20
 8007356:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800735a:	f109 0314 	add.w	r3, r9, #20
 800735e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007362:	9202      	str	r2, [sp, #8]
 8007364:	1b3a      	subs	r2, r7, r4
 8007366:	3a15      	subs	r2, #21
 8007368:	f022 0203 	bic.w	r2, r2, #3
 800736c:	3204      	adds	r2, #4
 800736e:	f104 0115 	add.w	r1, r4, #21
 8007372:	428f      	cmp	r7, r1
 8007374:	bf38      	it	cc
 8007376:	2204      	movcc	r2, #4
 8007378:	9201      	str	r2, [sp, #4]
 800737a:	9a02      	ldr	r2, [sp, #8]
 800737c:	9303      	str	r3, [sp, #12]
 800737e:	429a      	cmp	r2, r3
 8007380:	d80c      	bhi.n	800739c <__multiply+0x9c>
 8007382:	2e00      	cmp	r6, #0
 8007384:	dd03      	ble.n	800738e <__multiply+0x8e>
 8007386:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800738a:	2b00      	cmp	r3, #0
 800738c:	d059      	beq.n	8007442 <__multiply+0x142>
 800738e:	6106      	str	r6, [r0, #16]
 8007390:	b005      	add	sp, #20
 8007392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007396:	f843 2b04 	str.w	r2, [r3], #4
 800739a:	e7d8      	b.n	800734e <__multiply+0x4e>
 800739c:	f8b3 a000 	ldrh.w	sl, [r3]
 80073a0:	f1ba 0f00 	cmp.w	sl, #0
 80073a4:	d023      	beq.n	80073ee <__multiply+0xee>
 80073a6:	46a9      	mov	r9, r5
 80073a8:	f04f 0c00 	mov.w	ip, #0
 80073ac:	f104 0e14 	add.w	lr, r4, #20
 80073b0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80073b4:	f8d9 1000 	ldr.w	r1, [r9]
 80073b8:	fa1f fb82 	uxth.w	fp, r2
 80073bc:	b289      	uxth	r1, r1
 80073be:	fb0a 110b 	mla	r1, sl, fp, r1
 80073c2:	4461      	add	r1, ip
 80073c4:	f8d9 c000 	ldr.w	ip, [r9]
 80073c8:	0c12      	lsrs	r2, r2, #16
 80073ca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80073ce:	fb0a c202 	mla	r2, sl, r2, ip
 80073d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80073d6:	b289      	uxth	r1, r1
 80073d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073dc:	4577      	cmp	r7, lr
 80073de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073e2:	f849 1b04 	str.w	r1, [r9], #4
 80073e6:	d8e3      	bhi.n	80073b0 <__multiply+0xb0>
 80073e8:	9a01      	ldr	r2, [sp, #4]
 80073ea:	f845 c002 	str.w	ip, [r5, r2]
 80073ee:	9a03      	ldr	r2, [sp, #12]
 80073f0:	3304      	adds	r3, #4
 80073f2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073f6:	f1b9 0f00 	cmp.w	r9, #0
 80073fa:	d020      	beq.n	800743e <__multiply+0x13e>
 80073fc:	46ae      	mov	lr, r5
 80073fe:	f04f 0a00 	mov.w	sl, #0
 8007402:	6829      	ldr	r1, [r5, #0]
 8007404:	f104 0c14 	add.w	ip, r4, #20
 8007408:	f8bc b000 	ldrh.w	fp, [ip]
 800740c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007410:	b289      	uxth	r1, r1
 8007412:	fb09 220b 	mla	r2, r9, fp, r2
 8007416:	4492      	add	sl, r2
 8007418:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800741c:	f84e 1b04 	str.w	r1, [lr], #4
 8007420:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007424:	f8be 1000 	ldrh.w	r1, [lr]
 8007428:	0c12      	lsrs	r2, r2, #16
 800742a:	fb09 1102 	mla	r1, r9, r2, r1
 800742e:	4567      	cmp	r7, ip
 8007430:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007434:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007438:	d8e6      	bhi.n	8007408 <__multiply+0x108>
 800743a:	9a01      	ldr	r2, [sp, #4]
 800743c:	50a9      	str	r1, [r5, r2]
 800743e:	3504      	adds	r5, #4
 8007440:	e79b      	b.n	800737a <__multiply+0x7a>
 8007442:	3e01      	subs	r6, #1
 8007444:	e79d      	b.n	8007382 <__multiply+0x82>
 8007446:	bf00      	nop
 8007448:	080084a3 	.word	0x080084a3
 800744c:	08008514 	.word	0x08008514

08007450 <__pow5mult>:
 8007450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007454:	4615      	mov	r5, r2
 8007456:	f012 0203 	ands.w	r2, r2, #3
 800745a:	4606      	mov	r6, r0
 800745c:	460f      	mov	r7, r1
 800745e:	d007      	beq.n	8007470 <__pow5mult+0x20>
 8007460:	4c25      	ldr	r4, [pc, #148]	; (80074f8 <__pow5mult+0xa8>)
 8007462:	3a01      	subs	r2, #1
 8007464:	2300      	movs	r3, #0
 8007466:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800746a:	f7ff fe9f 	bl	80071ac <__multadd>
 800746e:	4607      	mov	r7, r0
 8007470:	10ad      	asrs	r5, r5, #2
 8007472:	d03d      	beq.n	80074f0 <__pow5mult+0xa0>
 8007474:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007476:	b97c      	cbnz	r4, 8007498 <__pow5mult+0x48>
 8007478:	2010      	movs	r0, #16
 800747a:	f7ff fe11 	bl	80070a0 <malloc>
 800747e:	4602      	mov	r2, r0
 8007480:	6270      	str	r0, [r6, #36]	; 0x24
 8007482:	b928      	cbnz	r0, 8007490 <__pow5mult+0x40>
 8007484:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007488:	4b1c      	ldr	r3, [pc, #112]	; (80074fc <__pow5mult+0xac>)
 800748a:	481d      	ldr	r0, [pc, #116]	; (8007500 <__pow5mult+0xb0>)
 800748c:	f000 fd1c 	bl	8007ec8 <__assert_func>
 8007490:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007494:	6004      	str	r4, [r0, #0]
 8007496:	60c4      	str	r4, [r0, #12]
 8007498:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800749c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074a0:	b94c      	cbnz	r4, 80074b6 <__pow5mult+0x66>
 80074a2:	f240 2171 	movw	r1, #625	; 0x271
 80074a6:	4630      	mov	r0, r6
 80074a8:	f7ff ff14 	bl	80072d4 <__i2b>
 80074ac:	2300      	movs	r3, #0
 80074ae:	4604      	mov	r4, r0
 80074b0:	f8c8 0008 	str.w	r0, [r8, #8]
 80074b4:	6003      	str	r3, [r0, #0]
 80074b6:	f04f 0900 	mov.w	r9, #0
 80074ba:	07eb      	lsls	r3, r5, #31
 80074bc:	d50a      	bpl.n	80074d4 <__pow5mult+0x84>
 80074be:	4639      	mov	r1, r7
 80074c0:	4622      	mov	r2, r4
 80074c2:	4630      	mov	r0, r6
 80074c4:	f7ff ff1c 	bl	8007300 <__multiply>
 80074c8:	4680      	mov	r8, r0
 80074ca:	4639      	mov	r1, r7
 80074cc:	4630      	mov	r0, r6
 80074ce:	f7ff fe4b 	bl	8007168 <_Bfree>
 80074d2:	4647      	mov	r7, r8
 80074d4:	106d      	asrs	r5, r5, #1
 80074d6:	d00b      	beq.n	80074f0 <__pow5mult+0xa0>
 80074d8:	6820      	ldr	r0, [r4, #0]
 80074da:	b938      	cbnz	r0, 80074ec <__pow5mult+0x9c>
 80074dc:	4622      	mov	r2, r4
 80074de:	4621      	mov	r1, r4
 80074e0:	4630      	mov	r0, r6
 80074e2:	f7ff ff0d 	bl	8007300 <__multiply>
 80074e6:	6020      	str	r0, [r4, #0]
 80074e8:	f8c0 9000 	str.w	r9, [r0]
 80074ec:	4604      	mov	r4, r0
 80074ee:	e7e4      	b.n	80074ba <__pow5mult+0x6a>
 80074f0:	4638      	mov	r0, r7
 80074f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074f6:	bf00      	nop
 80074f8:	08008660 	.word	0x08008660
 80074fc:	08008431 	.word	0x08008431
 8007500:	08008514 	.word	0x08008514

08007504 <__lshift>:
 8007504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007508:	460c      	mov	r4, r1
 800750a:	4607      	mov	r7, r0
 800750c:	4691      	mov	r9, r2
 800750e:	6923      	ldr	r3, [r4, #16]
 8007510:	6849      	ldr	r1, [r1, #4]
 8007512:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007516:	68a3      	ldr	r3, [r4, #8]
 8007518:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800751c:	f108 0601 	add.w	r6, r8, #1
 8007520:	42b3      	cmp	r3, r6
 8007522:	db0b      	blt.n	800753c <__lshift+0x38>
 8007524:	4638      	mov	r0, r7
 8007526:	f7ff fddf 	bl	80070e8 <_Balloc>
 800752a:	4605      	mov	r5, r0
 800752c:	b948      	cbnz	r0, 8007542 <__lshift+0x3e>
 800752e:	4602      	mov	r2, r0
 8007530:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007534:	4b29      	ldr	r3, [pc, #164]	; (80075dc <__lshift+0xd8>)
 8007536:	482a      	ldr	r0, [pc, #168]	; (80075e0 <__lshift+0xdc>)
 8007538:	f000 fcc6 	bl	8007ec8 <__assert_func>
 800753c:	3101      	adds	r1, #1
 800753e:	005b      	lsls	r3, r3, #1
 8007540:	e7ee      	b.n	8007520 <__lshift+0x1c>
 8007542:	2300      	movs	r3, #0
 8007544:	f100 0114 	add.w	r1, r0, #20
 8007548:	f100 0210 	add.w	r2, r0, #16
 800754c:	4618      	mov	r0, r3
 800754e:	4553      	cmp	r3, sl
 8007550:	db37      	blt.n	80075c2 <__lshift+0xbe>
 8007552:	6920      	ldr	r0, [r4, #16]
 8007554:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007558:	f104 0314 	add.w	r3, r4, #20
 800755c:	f019 091f 	ands.w	r9, r9, #31
 8007560:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007564:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007568:	d02f      	beq.n	80075ca <__lshift+0xc6>
 800756a:	468a      	mov	sl, r1
 800756c:	f04f 0c00 	mov.w	ip, #0
 8007570:	f1c9 0e20 	rsb	lr, r9, #32
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	fa02 f209 	lsl.w	r2, r2, r9
 800757a:	ea42 020c 	orr.w	r2, r2, ip
 800757e:	f84a 2b04 	str.w	r2, [sl], #4
 8007582:	f853 2b04 	ldr.w	r2, [r3], #4
 8007586:	4298      	cmp	r0, r3
 8007588:	fa22 fc0e 	lsr.w	ip, r2, lr
 800758c:	d8f2      	bhi.n	8007574 <__lshift+0x70>
 800758e:	1b03      	subs	r3, r0, r4
 8007590:	3b15      	subs	r3, #21
 8007592:	f023 0303 	bic.w	r3, r3, #3
 8007596:	3304      	adds	r3, #4
 8007598:	f104 0215 	add.w	r2, r4, #21
 800759c:	4290      	cmp	r0, r2
 800759e:	bf38      	it	cc
 80075a0:	2304      	movcc	r3, #4
 80075a2:	f841 c003 	str.w	ip, [r1, r3]
 80075a6:	f1bc 0f00 	cmp.w	ip, #0
 80075aa:	d001      	beq.n	80075b0 <__lshift+0xac>
 80075ac:	f108 0602 	add.w	r6, r8, #2
 80075b0:	3e01      	subs	r6, #1
 80075b2:	4638      	mov	r0, r7
 80075b4:	4621      	mov	r1, r4
 80075b6:	612e      	str	r6, [r5, #16]
 80075b8:	f7ff fdd6 	bl	8007168 <_Bfree>
 80075bc:	4628      	mov	r0, r5
 80075be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80075c6:	3301      	adds	r3, #1
 80075c8:	e7c1      	b.n	800754e <__lshift+0x4a>
 80075ca:	3904      	subs	r1, #4
 80075cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80075d0:	4298      	cmp	r0, r3
 80075d2:	f841 2f04 	str.w	r2, [r1, #4]!
 80075d6:	d8f9      	bhi.n	80075cc <__lshift+0xc8>
 80075d8:	e7ea      	b.n	80075b0 <__lshift+0xac>
 80075da:	bf00      	nop
 80075dc:	080084a3 	.word	0x080084a3
 80075e0:	08008514 	.word	0x08008514

080075e4 <__mcmp>:
 80075e4:	4603      	mov	r3, r0
 80075e6:	690a      	ldr	r2, [r1, #16]
 80075e8:	6900      	ldr	r0, [r0, #16]
 80075ea:	b530      	push	{r4, r5, lr}
 80075ec:	1a80      	subs	r0, r0, r2
 80075ee:	d10d      	bne.n	800760c <__mcmp+0x28>
 80075f0:	3314      	adds	r3, #20
 80075f2:	3114      	adds	r1, #20
 80075f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80075f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80075fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007600:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007604:	4295      	cmp	r5, r2
 8007606:	d002      	beq.n	800760e <__mcmp+0x2a>
 8007608:	d304      	bcc.n	8007614 <__mcmp+0x30>
 800760a:	2001      	movs	r0, #1
 800760c:	bd30      	pop	{r4, r5, pc}
 800760e:	42a3      	cmp	r3, r4
 8007610:	d3f4      	bcc.n	80075fc <__mcmp+0x18>
 8007612:	e7fb      	b.n	800760c <__mcmp+0x28>
 8007614:	f04f 30ff 	mov.w	r0, #4294967295
 8007618:	e7f8      	b.n	800760c <__mcmp+0x28>
	...

0800761c <__mdiff>:
 800761c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007620:	460d      	mov	r5, r1
 8007622:	4607      	mov	r7, r0
 8007624:	4611      	mov	r1, r2
 8007626:	4628      	mov	r0, r5
 8007628:	4614      	mov	r4, r2
 800762a:	f7ff ffdb 	bl	80075e4 <__mcmp>
 800762e:	1e06      	subs	r6, r0, #0
 8007630:	d111      	bne.n	8007656 <__mdiff+0x3a>
 8007632:	4631      	mov	r1, r6
 8007634:	4638      	mov	r0, r7
 8007636:	f7ff fd57 	bl	80070e8 <_Balloc>
 800763a:	4602      	mov	r2, r0
 800763c:	b928      	cbnz	r0, 800764a <__mdiff+0x2e>
 800763e:	f240 2132 	movw	r1, #562	; 0x232
 8007642:	4b3a      	ldr	r3, [pc, #232]	; (800772c <__mdiff+0x110>)
 8007644:	483a      	ldr	r0, [pc, #232]	; (8007730 <__mdiff+0x114>)
 8007646:	f000 fc3f 	bl	8007ec8 <__assert_func>
 800764a:	2301      	movs	r3, #1
 800764c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007650:	4610      	mov	r0, r2
 8007652:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007656:	bfa4      	itt	ge
 8007658:	4623      	movge	r3, r4
 800765a:	462c      	movge	r4, r5
 800765c:	4638      	mov	r0, r7
 800765e:	6861      	ldr	r1, [r4, #4]
 8007660:	bfa6      	itte	ge
 8007662:	461d      	movge	r5, r3
 8007664:	2600      	movge	r6, #0
 8007666:	2601      	movlt	r6, #1
 8007668:	f7ff fd3e 	bl	80070e8 <_Balloc>
 800766c:	4602      	mov	r2, r0
 800766e:	b918      	cbnz	r0, 8007678 <__mdiff+0x5c>
 8007670:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007674:	4b2d      	ldr	r3, [pc, #180]	; (800772c <__mdiff+0x110>)
 8007676:	e7e5      	b.n	8007644 <__mdiff+0x28>
 8007678:	f102 0814 	add.w	r8, r2, #20
 800767c:	46c2      	mov	sl, r8
 800767e:	f04f 0c00 	mov.w	ip, #0
 8007682:	6927      	ldr	r7, [r4, #16]
 8007684:	60c6      	str	r6, [r0, #12]
 8007686:	692e      	ldr	r6, [r5, #16]
 8007688:	f104 0014 	add.w	r0, r4, #20
 800768c:	f105 0914 	add.w	r9, r5, #20
 8007690:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007694:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007698:	3410      	adds	r4, #16
 800769a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800769e:	f859 3b04 	ldr.w	r3, [r9], #4
 80076a2:	fa1f f18b 	uxth.w	r1, fp
 80076a6:	448c      	add	ip, r1
 80076a8:	b299      	uxth	r1, r3
 80076aa:	0c1b      	lsrs	r3, r3, #16
 80076ac:	ebac 0101 	sub.w	r1, ip, r1
 80076b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076b4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80076b8:	b289      	uxth	r1, r1
 80076ba:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80076be:	454e      	cmp	r6, r9
 80076c0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80076c4:	f84a 3b04 	str.w	r3, [sl], #4
 80076c8:	d8e7      	bhi.n	800769a <__mdiff+0x7e>
 80076ca:	1b73      	subs	r3, r6, r5
 80076cc:	3b15      	subs	r3, #21
 80076ce:	f023 0303 	bic.w	r3, r3, #3
 80076d2:	3515      	adds	r5, #21
 80076d4:	3304      	adds	r3, #4
 80076d6:	42ae      	cmp	r6, r5
 80076d8:	bf38      	it	cc
 80076da:	2304      	movcc	r3, #4
 80076dc:	4418      	add	r0, r3
 80076de:	4443      	add	r3, r8
 80076e0:	461e      	mov	r6, r3
 80076e2:	4605      	mov	r5, r0
 80076e4:	4575      	cmp	r5, lr
 80076e6:	d30e      	bcc.n	8007706 <__mdiff+0xea>
 80076e8:	f10e 0103 	add.w	r1, lr, #3
 80076ec:	1a09      	subs	r1, r1, r0
 80076ee:	f021 0103 	bic.w	r1, r1, #3
 80076f2:	3803      	subs	r0, #3
 80076f4:	4586      	cmp	lr, r0
 80076f6:	bf38      	it	cc
 80076f8:	2100      	movcc	r1, #0
 80076fa:	4419      	add	r1, r3
 80076fc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007700:	b18b      	cbz	r3, 8007726 <__mdiff+0x10a>
 8007702:	6117      	str	r7, [r2, #16]
 8007704:	e7a4      	b.n	8007650 <__mdiff+0x34>
 8007706:	f855 8b04 	ldr.w	r8, [r5], #4
 800770a:	fa1f f188 	uxth.w	r1, r8
 800770e:	4461      	add	r1, ip
 8007710:	140c      	asrs	r4, r1, #16
 8007712:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007716:	b289      	uxth	r1, r1
 8007718:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800771c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007720:	f846 1b04 	str.w	r1, [r6], #4
 8007724:	e7de      	b.n	80076e4 <__mdiff+0xc8>
 8007726:	3f01      	subs	r7, #1
 8007728:	e7e8      	b.n	80076fc <__mdiff+0xe0>
 800772a:	bf00      	nop
 800772c:	080084a3 	.word	0x080084a3
 8007730:	08008514 	.word	0x08008514

08007734 <__d2b>:
 8007734:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007738:	2101      	movs	r1, #1
 800773a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800773e:	4690      	mov	r8, r2
 8007740:	461d      	mov	r5, r3
 8007742:	f7ff fcd1 	bl	80070e8 <_Balloc>
 8007746:	4604      	mov	r4, r0
 8007748:	b930      	cbnz	r0, 8007758 <__d2b+0x24>
 800774a:	4602      	mov	r2, r0
 800774c:	f240 310a 	movw	r1, #778	; 0x30a
 8007750:	4b24      	ldr	r3, [pc, #144]	; (80077e4 <__d2b+0xb0>)
 8007752:	4825      	ldr	r0, [pc, #148]	; (80077e8 <__d2b+0xb4>)
 8007754:	f000 fbb8 	bl	8007ec8 <__assert_func>
 8007758:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800775c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007760:	bb2d      	cbnz	r5, 80077ae <__d2b+0x7a>
 8007762:	9301      	str	r3, [sp, #4]
 8007764:	f1b8 0300 	subs.w	r3, r8, #0
 8007768:	d026      	beq.n	80077b8 <__d2b+0x84>
 800776a:	4668      	mov	r0, sp
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	f7ff fd83 	bl	8007278 <__lo0bits>
 8007772:	9900      	ldr	r1, [sp, #0]
 8007774:	b1f0      	cbz	r0, 80077b4 <__d2b+0x80>
 8007776:	9a01      	ldr	r2, [sp, #4]
 8007778:	f1c0 0320 	rsb	r3, r0, #32
 800777c:	fa02 f303 	lsl.w	r3, r2, r3
 8007780:	430b      	orrs	r3, r1
 8007782:	40c2      	lsrs	r2, r0
 8007784:	6163      	str	r3, [r4, #20]
 8007786:	9201      	str	r2, [sp, #4]
 8007788:	9b01      	ldr	r3, [sp, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	bf14      	ite	ne
 800778e:	2102      	movne	r1, #2
 8007790:	2101      	moveq	r1, #1
 8007792:	61a3      	str	r3, [r4, #24]
 8007794:	6121      	str	r1, [r4, #16]
 8007796:	b1c5      	cbz	r5, 80077ca <__d2b+0x96>
 8007798:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800779c:	4405      	add	r5, r0
 800779e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077a2:	603d      	str	r5, [r7, #0]
 80077a4:	6030      	str	r0, [r6, #0]
 80077a6:	4620      	mov	r0, r4
 80077a8:	b002      	add	sp, #8
 80077aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077b2:	e7d6      	b.n	8007762 <__d2b+0x2e>
 80077b4:	6161      	str	r1, [r4, #20]
 80077b6:	e7e7      	b.n	8007788 <__d2b+0x54>
 80077b8:	a801      	add	r0, sp, #4
 80077ba:	f7ff fd5d 	bl	8007278 <__lo0bits>
 80077be:	2101      	movs	r1, #1
 80077c0:	9b01      	ldr	r3, [sp, #4]
 80077c2:	6121      	str	r1, [r4, #16]
 80077c4:	6163      	str	r3, [r4, #20]
 80077c6:	3020      	adds	r0, #32
 80077c8:	e7e5      	b.n	8007796 <__d2b+0x62>
 80077ca:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80077ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077d2:	6038      	str	r0, [r7, #0]
 80077d4:	6918      	ldr	r0, [r3, #16]
 80077d6:	f7ff fd2f 	bl	8007238 <__hi0bits>
 80077da:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80077de:	6031      	str	r1, [r6, #0]
 80077e0:	e7e1      	b.n	80077a6 <__d2b+0x72>
 80077e2:	bf00      	nop
 80077e4:	080084a3 	.word	0x080084a3
 80077e8:	08008514 	.word	0x08008514

080077ec <_calloc_r>:
 80077ec:	b570      	push	{r4, r5, r6, lr}
 80077ee:	fba1 5402 	umull	r5, r4, r1, r2
 80077f2:	b934      	cbnz	r4, 8007802 <_calloc_r+0x16>
 80077f4:	4629      	mov	r1, r5
 80077f6:	f000 f875 	bl	80078e4 <_malloc_r>
 80077fa:	4606      	mov	r6, r0
 80077fc:	b928      	cbnz	r0, 800780a <_calloc_r+0x1e>
 80077fe:	4630      	mov	r0, r6
 8007800:	bd70      	pop	{r4, r5, r6, pc}
 8007802:	220c      	movs	r2, #12
 8007804:	2600      	movs	r6, #0
 8007806:	6002      	str	r2, [r0, #0]
 8007808:	e7f9      	b.n	80077fe <_calloc_r+0x12>
 800780a:	462a      	mov	r2, r5
 800780c:	4621      	mov	r1, r4
 800780e:	f7fe f84d 	bl	80058ac <memset>
 8007812:	e7f4      	b.n	80077fe <_calloc_r+0x12>

08007814 <_free_r>:
 8007814:	b538      	push	{r3, r4, r5, lr}
 8007816:	4605      	mov	r5, r0
 8007818:	2900      	cmp	r1, #0
 800781a:	d040      	beq.n	800789e <_free_r+0x8a>
 800781c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007820:	1f0c      	subs	r4, r1, #4
 8007822:	2b00      	cmp	r3, #0
 8007824:	bfb8      	it	lt
 8007826:	18e4      	addlt	r4, r4, r3
 8007828:	f000 fcd6 	bl	80081d8 <__malloc_lock>
 800782c:	4a1c      	ldr	r2, [pc, #112]	; (80078a0 <_free_r+0x8c>)
 800782e:	6813      	ldr	r3, [r2, #0]
 8007830:	b933      	cbnz	r3, 8007840 <_free_r+0x2c>
 8007832:	6063      	str	r3, [r4, #4]
 8007834:	6014      	str	r4, [r2, #0]
 8007836:	4628      	mov	r0, r5
 8007838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800783c:	f000 bcd2 	b.w	80081e4 <__malloc_unlock>
 8007840:	42a3      	cmp	r3, r4
 8007842:	d908      	bls.n	8007856 <_free_r+0x42>
 8007844:	6820      	ldr	r0, [r4, #0]
 8007846:	1821      	adds	r1, r4, r0
 8007848:	428b      	cmp	r3, r1
 800784a:	bf01      	itttt	eq
 800784c:	6819      	ldreq	r1, [r3, #0]
 800784e:	685b      	ldreq	r3, [r3, #4]
 8007850:	1809      	addeq	r1, r1, r0
 8007852:	6021      	streq	r1, [r4, #0]
 8007854:	e7ed      	b.n	8007832 <_free_r+0x1e>
 8007856:	461a      	mov	r2, r3
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	b10b      	cbz	r3, 8007860 <_free_r+0x4c>
 800785c:	42a3      	cmp	r3, r4
 800785e:	d9fa      	bls.n	8007856 <_free_r+0x42>
 8007860:	6811      	ldr	r1, [r2, #0]
 8007862:	1850      	adds	r0, r2, r1
 8007864:	42a0      	cmp	r0, r4
 8007866:	d10b      	bne.n	8007880 <_free_r+0x6c>
 8007868:	6820      	ldr	r0, [r4, #0]
 800786a:	4401      	add	r1, r0
 800786c:	1850      	adds	r0, r2, r1
 800786e:	4283      	cmp	r3, r0
 8007870:	6011      	str	r1, [r2, #0]
 8007872:	d1e0      	bne.n	8007836 <_free_r+0x22>
 8007874:	6818      	ldr	r0, [r3, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	4401      	add	r1, r0
 800787a:	6011      	str	r1, [r2, #0]
 800787c:	6053      	str	r3, [r2, #4]
 800787e:	e7da      	b.n	8007836 <_free_r+0x22>
 8007880:	d902      	bls.n	8007888 <_free_r+0x74>
 8007882:	230c      	movs	r3, #12
 8007884:	602b      	str	r3, [r5, #0]
 8007886:	e7d6      	b.n	8007836 <_free_r+0x22>
 8007888:	6820      	ldr	r0, [r4, #0]
 800788a:	1821      	adds	r1, r4, r0
 800788c:	428b      	cmp	r3, r1
 800788e:	bf01      	itttt	eq
 8007890:	6819      	ldreq	r1, [r3, #0]
 8007892:	685b      	ldreq	r3, [r3, #4]
 8007894:	1809      	addeq	r1, r1, r0
 8007896:	6021      	streq	r1, [r4, #0]
 8007898:	6063      	str	r3, [r4, #4]
 800789a:	6054      	str	r4, [r2, #4]
 800789c:	e7cb      	b.n	8007836 <_free_r+0x22>
 800789e:	bd38      	pop	{r3, r4, r5, pc}
 80078a0:	20000344 	.word	0x20000344

080078a4 <sbrk_aligned>:
 80078a4:	b570      	push	{r4, r5, r6, lr}
 80078a6:	4e0e      	ldr	r6, [pc, #56]	; (80078e0 <sbrk_aligned+0x3c>)
 80078a8:	460c      	mov	r4, r1
 80078aa:	6831      	ldr	r1, [r6, #0]
 80078ac:	4605      	mov	r5, r0
 80078ae:	b911      	cbnz	r1, 80078b6 <sbrk_aligned+0x12>
 80078b0:	f000 f9e4 	bl	8007c7c <_sbrk_r>
 80078b4:	6030      	str	r0, [r6, #0]
 80078b6:	4621      	mov	r1, r4
 80078b8:	4628      	mov	r0, r5
 80078ba:	f000 f9df 	bl	8007c7c <_sbrk_r>
 80078be:	1c43      	adds	r3, r0, #1
 80078c0:	d00a      	beq.n	80078d8 <sbrk_aligned+0x34>
 80078c2:	1cc4      	adds	r4, r0, #3
 80078c4:	f024 0403 	bic.w	r4, r4, #3
 80078c8:	42a0      	cmp	r0, r4
 80078ca:	d007      	beq.n	80078dc <sbrk_aligned+0x38>
 80078cc:	1a21      	subs	r1, r4, r0
 80078ce:	4628      	mov	r0, r5
 80078d0:	f000 f9d4 	bl	8007c7c <_sbrk_r>
 80078d4:	3001      	adds	r0, #1
 80078d6:	d101      	bne.n	80078dc <sbrk_aligned+0x38>
 80078d8:	f04f 34ff 	mov.w	r4, #4294967295
 80078dc:	4620      	mov	r0, r4
 80078de:	bd70      	pop	{r4, r5, r6, pc}
 80078e0:	20000348 	.word	0x20000348

080078e4 <_malloc_r>:
 80078e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e8:	1ccd      	adds	r5, r1, #3
 80078ea:	f025 0503 	bic.w	r5, r5, #3
 80078ee:	3508      	adds	r5, #8
 80078f0:	2d0c      	cmp	r5, #12
 80078f2:	bf38      	it	cc
 80078f4:	250c      	movcc	r5, #12
 80078f6:	2d00      	cmp	r5, #0
 80078f8:	4607      	mov	r7, r0
 80078fa:	db01      	blt.n	8007900 <_malloc_r+0x1c>
 80078fc:	42a9      	cmp	r1, r5
 80078fe:	d905      	bls.n	800790c <_malloc_r+0x28>
 8007900:	230c      	movs	r3, #12
 8007902:	2600      	movs	r6, #0
 8007904:	603b      	str	r3, [r7, #0]
 8007906:	4630      	mov	r0, r6
 8007908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800790c:	4e2e      	ldr	r6, [pc, #184]	; (80079c8 <_malloc_r+0xe4>)
 800790e:	f000 fc63 	bl	80081d8 <__malloc_lock>
 8007912:	6833      	ldr	r3, [r6, #0]
 8007914:	461c      	mov	r4, r3
 8007916:	bb34      	cbnz	r4, 8007966 <_malloc_r+0x82>
 8007918:	4629      	mov	r1, r5
 800791a:	4638      	mov	r0, r7
 800791c:	f7ff ffc2 	bl	80078a4 <sbrk_aligned>
 8007920:	1c43      	adds	r3, r0, #1
 8007922:	4604      	mov	r4, r0
 8007924:	d14d      	bne.n	80079c2 <_malloc_r+0xde>
 8007926:	6834      	ldr	r4, [r6, #0]
 8007928:	4626      	mov	r6, r4
 800792a:	2e00      	cmp	r6, #0
 800792c:	d140      	bne.n	80079b0 <_malloc_r+0xcc>
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	4631      	mov	r1, r6
 8007932:	4638      	mov	r0, r7
 8007934:	eb04 0803 	add.w	r8, r4, r3
 8007938:	f000 f9a0 	bl	8007c7c <_sbrk_r>
 800793c:	4580      	cmp	r8, r0
 800793e:	d13a      	bne.n	80079b6 <_malloc_r+0xd2>
 8007940:	6821      	ldr	r1, [r4, #0]
 8007942:	3503      	adds	r5, #3
 8007944:	1a6d      	subs	r5, r5, r1
 8007946:	f025 0503 	bic.w	r5, r5, #3
 800794a:	3508      	adds	r5, #8
 800794c:	2d0c      	cmp	r5, #12
 800794e:	bf38      	it	cc
 8007950:	250c      	movcc	r5, #12
 8007952:	4638      	mov	r0, r7
 8007954:	4629      	mov	r1, r5
 8007956:	f7ff ffa5 	bl	80078a4 <sbrk_aligned>
 800795a:	3001      	adds	r0, #1
 800795c:	d02b      	beq.n	80079b6 <_malloc_r+0xd2>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	442b      	add	r3, r5
 8007962:	6023      	str	r3, [r4, #0]
 8007964:	e00e      	b.n	8007984 <_malloc_r+0xa0>
 8007966:	6822      	ldr	r2, [r4, #0]
 8007968:	1b52      	subs	r2, r2, r5
 800796a:	d41e      	bmi.n	80079aa <_malloc_r+0xc6>
 800796c:	2a0b      	cmp	r2, #11
 800796e:	d916      	bls.n	800799e <_malloc_r+0xba>
 8007970:	1961      	adds	r1, r4, r5
 8007972:	42a3      	cmp	r3, r4
 8007974:	6025      	str	r5, [r4, #0]
 8007976:	bf18      	it	ne
 8007978:	6059      	strne	r1, [r3, #4]
 800797a:	6863      	ldr	r3, [r4, #4]
 800797c:	bf08      	it	eq
 800797e:	6031      	streq	r1, [r6, #0]
 8007980:	5162      	str	r2, [r4, r5]
 8007982:	604b      	str	r3, [r1, #4]
 8007984:	4638      	mov	r0, r7
 8007986:	f104 060b 	add.w	r6, r4, #11
 800798a:	f000 fc2b 	bl	80081e4 <__malloc_unlock>
 800798e:	f026 0607 	bic.w	r6, r6, #7
 8007992:	1d23      	adds	r3, r4, #4
 8007994:	1af2      	subs	r2, r6, r3
 8007996:	d0b6      	beq.n	8007906 <_malloc_r+0x22>
 8007998:	1b9b      	subs	r3, r3, r6
 800799a:	50a3      	str	r3, [r4, r2]
 800799c:	e7b3      	b.n	8007906 <_malloc_r+0x22>
 800799e:	6862      	ldr	r2, [r4, #4]
 80079a0:	42a3      	cmp	r3, r4
 80079a2:	bf0c      	ite	eq
 80079a4:	6032      	streq	r2, [r6, #0]
 80079a6:	605a      	strne	r2, [r3, #4]
 80079a8:	e7ec      	b.n	8007984 <_malloc_r+0xa0>
 80079aa:	4623      	mov	r3, r4
 80079ac:	6864      	ldr	r4, [r4, #4]
 80079ae:	e7b2      	b.n	8007916 <_malloc_r+0x32>
 80079b0:	4634      	mov	r4, r6
 80079b2:	6876      	ldr	r6, [r6, #4]
 80079b4:	e7b9      	b.n	800792a <_malloc_r+0x46>
 80079b6:	230c      	movs	r3, #12
 80079b8:	4638      	mov	r0, r7
 80079ba:	603b      	str	r3, [r7, #0]
 80079bc:	f000 fc12 	bl	80081e4 <__malloc_unlock>
 80079c0:	e7a1      	b.n	8007906 <_malloc_r+0x22>
 80079c2:	6025      	str	r5, [r4, #0]
 80079c4:	e7de      	b.n	8007984 <_malloc_r+0xa0>
 80079c6:	bf00      	nop
 80079c8:	20000344 	.word	0x20000344

080079cc <__sfputc_r>:
 80079cc:	6893      	ldr	r3, [r2, #8]
 80079ce:	b410      	push	{r4}
 80079d0:	3b01      	subs	r3, #1
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	6093      	str	r3, [r2, #8]
 80079d6:	da07      	bge.n	80079e8 <__sfputc_r+0x1c>
 80079d8:	6994      	ldr	r4, [r2, #24]
 80079da:	42a3      	cmp	r3, r4
 80079dc:	db01      	blt.n	80079e2 <__sfputc_r+0x16>
 80079de:	290a      	cmp	r1, #10
 80079e0:	d102      	bne.n	80079e8 <__sfputc_r+0x1c>
 80079e2:	bc10      	pop	{r4}
 80079e4:	f000 b99e 	b.w	8007d24 <__swbuf_r>
 80079e8:	6813      	ldr	r3, [r2, #0]
 80079ea:	1c58      	adds	r0, r3, #1
 80079ec:	6010      	str	r0, [r2, #0]
 80079ee:	7019      	strb	r1, [r3, #0]
 80079f0:	4608      	mov	r0, r1
 80079f2:	bc10      	pop	{r4}
 80079f4:	4770      	bx	lr

080079f6 <__sfputs_r>:
 80079f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f8:	4606      	mov	r6, r0
 80079fa:	460f      	mov	r7, r1
 80079fc:	4614      	mov	r4, r2
 80079fe:	18d5      	adds	r5, r2, r3
 8007a00:	42ac      	cmp	r4, r5
 8007a02:	d101      	bne.n	8007a08 <__sfputs_r+0x12>
 8007a04:	2000      	movs	r0, #0
 8007a06:	e007      	b.n	8007a18 <__sfputs_r+0x22>
 8007a08:	463a      	mov	r2, r7
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a10:	f7ff ffdc 	bl	80079cc <__sfputc_r>
 8007a14:	1c43      	adds	r3, r0, #1
 8007a16:	d1f3      	bne.n	8007a00 <__sfputs_r+0xa>
 8007a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a1c <_vfiprintf_r>:
 8007a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a20:	460d      	mov	r5, r1
 8007a22:	4614      	mov	r4, r2
 8007a24:	4698      	mov	r8, r3
 8007a26:	4606      	mov	r6, r0
 8007a28:	b09d      	sub	sp, #116	; 0x74
 8007a2a:	b118      	cbz	r0, 8007a34 <_vfiprintf_r+0x18>
 8007a2c:	6983      	ldr	r3, [r0, #24]
 8007a2e:	b90b      	cbnz	r3, 8007a34 <_vfiprintf_r+0x18>
 8007a30:	f7ff fa90 	bl	8006f54 <__sinit>
 8007a34:	4b89      	ldr	r3, [pc, #548]	; (8007c5c <_vfiprintf_r+0x240>)
 8007a36:	429d      	cmp	r5, r3
 8007a38:	d11b      	bne.n	8007a72 <_vfiprintf_r+0x56>
 8007a3a:	6875      	ldr	r5, [r6, #4]
 8007a3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a3e:	07d9      	lsls	r1, r3, #31
 8007a40:	d405      	bmi.n	8007a4e <_vfiprintf_r+0x32>
 8007a42:	89ab      	ldrh	r3, [r5, #12]
 8007a44:	059a      	lsls	r2, r3, #22
 8007a46:	d402      	bmi.n	8007a4e <_vfiprintf_r+0x32>
 8007a48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a4a:	f7ff fb26 	bl	800709a <__retarget_lock_acquire_recursive>
 8007a4e:	89ab      	ldrh	r3, [r5, #12]
 8007a50:	071b      	lsls	r3, r3, #28
 8007a52:	d501      	bpl.n	8007a58 <_vfiprintf_r+0x3c>
 8007a54:	692b      	ldr	r3, [r5, #16]
 8007a56:	b9eb      	cbnz	r3, 8007a94 <_vfiprintf_r+0x78>
 8007a58:	4629      	mov	r1, r5
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	f000 f9c6 	bl	8007dec <__swsetup_r>
 8007a60:	b1c0      	cbz	r0, 8007a94 <_vfiprintf_r+0x78>
 8007a62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a64:	07dc      	lsls	r4, r3, #31
 8007a66:	d50e      	bpl.n	8007a86 <_vfiprintf_r+0x6a>
 8007a68:	f04f 30ff 	mov.w	r0, #4294967295
 8007a6c:	b01d      	add	sp, #116	; 0x74
 8007a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a72:	4b7b      	ldr	r3, [pc, #492]	; (8007c60 <_vfiprintf_r+0x244>)
 8007a74:	429d      	cmp	r5, r3
 8007a76:	d101      	bne.n	8007a7c <_vfiprintf_r+0x60>
 8007a78:	68b5      	ldr	r5, [r6, #8]
 8007a7a:	e7df      	b.n	8007a3c <_vfiprintf_r+0x20>
 8007a7c:	4b79      	ldr	r3, [pc, #484]	; (8007c64 <_vfiprintf_r+0x248>)
 8007a7e:	429d      	cmp	r5, r3
 8007a80:	bf08      	it	eq
 8007a82:	68f5      	ldreq	r5, [r6, #12]
 8007a84:	e7da      	b.n	8007a3c <_vfiprintf_r+0x20>
 8007a86:	89ab      	ldrh	r3, [r5, #12]
 8007a88:	0598      	lsls	r0, r3, #22
 8007a8a:	d4ed      	bmi.n	8007a68 <_vfiprintf_r+0x4c>
 8007a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a8e:	f7ff fb05 	bl	800709c <__retarget_lock_release_recursive>
 8007a92:	e7e9      	b.n	8007a68 <_vfiprintf_r+0x4c>
 8007a94:	2300      	movs	r3, #0
 8007a96:	9309      	str	r3, [sp, #36]	; 0x24
 8007a98:	2320      	movs	r3, #32
 8007a9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a9e:	2330      	movs	r3, #48	; 0x30
 8007aa0:	f04f 0901 	mov.w	r9, #1
 8007aa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007aa8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007c68 <_vfiprintf_r+0x24c>
 8007aac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ab0:	4623      	mov	r3, r4
 8007ab2:	469a      	mov	sl, r3
 8007ab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ab8:	b10a      	cbz	r2, 8007abe <_vfiprintf_r+0xa2>
 8007aba:	2a25      	cmp	r2, #37	; 0x25
 8007abc:	d1f9      	bne.n	8007ab2 <_vfiprintf_r+0x96>
 8007abe:	ebba 0b04 	subs.w	fp, sl, r4
 8007ac2:	d00b      	beq.n	8007adc <_vfiprintf_r+0xc0>
 8007ac4:	465b      	mov	r3, fp
 8007ac6:	4622      	mov	r2, r4
 8007ac8:	4629      	mov	r1, r5
 8007aca:	4630      	mov	r0, r6
 8007acc:	f7ff ff93 	bl	80079f6 <__sfputs_r>
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	f000 80aa 	beq.w	8007c2a <_vfiprintf_r+0x20e>
 8007ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ad8:	445a      	add	r2, fp
 8007ada:	9209      	str	r2, [sp, #36]	; 0x24
 8007adc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 80a2 	beq.w	8007c2a <_vfiprintf_r+0x20e>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8007aec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007af0:	f10a 0a01 	add.w	sl, sl, #1
 8007af4:	9304      	str	r3, [sp, #16]
 8007af6:	9307      	str	r3, [sp, #28]
 8007af8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007afc:	931a      	str	r3, [sp, #104]	; 0x68
 8007afe:	4654      	mov	r4, sl
 8007b00:	2205      	movs	r2, #5
 8007b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b06:	4858      	ldr	r0, [pc, #352]	; (8007c68 <_vfiprintf_r+0x24c>)
 8007b08:	f7ff fad2 	bl	80070b0 <memchr>
 8007b0c:	9a04      	ldr	r2, [sp, #16]
 8007b0e:	b9d8      	cbnz	r0, 8007b48 <_vfiprintf_r+0x12c>
 8007b10:	06d1      	lsls	r1, r2, #27
 8007b12:	bf44      	itt	mi
 8007b14:	2320      	movmi	r3, #32
 8007b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b1a:	0713      	lsls	r3, r2, #28
 8007b1c:	bf44      	itt	mi
 8007b1e:	232b      	movmi	r3, #43	; 0x2b
 8007b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b24:	f89a 3000 	ldrb.w	r3, [sl]
 8007b28:	2b2a      	cmp	r3, #42	; 0x2a
 8007b2a:	d015      	beq.n	8007b58 <_vfiprintf_r+0x13c>
 8007b2c:	4654      	mov	r4, sl
 8007b2e:	2000      	movs	r0, #0
 8007b30:	f04f 0c0a 	mov.w	ip, #10
 8007b34:	9a07      	ldr	r2, [sp, #28]
 8007b36:	4621      	mov	r1, r4
 8007b38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b3c:	3b30      	subs	r3, #48	; 0x30
 8007b3e:	2b09      	cmp	r3, #9
 8007b40:	d94e      	bls.n	8007be0 <_vfiprintf_r+0x1c4>
 8007b42:	b1b0      	cbz	r0, 8007b72 <_vfiprintf_r+0x156>
 8007b44:	9207      	str	r2, [sp, #28]
 8007b46:	e014      	b.n	8007b72 <_vfiprintf_r+0x156>
 8007b48:	eba0 0308 	sub.w	r3, r0, r8
 8007b4c:	fa09 f303 	lsl.w	r3, r9, r3
 8007b50:	4313      	orrs	r3, r2
 8007b52:	46a2      	mov	sl, r4
 8007b54:	9304      	str	r3, [sp, #16]
 8007b56:	e7d2      	b.n	8007afe <_vfiprintf_r+0xe2>
 8007b58:	9b03      	ldr	r3, [sp, #12]
 8007b5a:	1d19      	adds	r1, r3, #4
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	9103      	str	r1, [sp, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	bfbb      	ittet	lt
 8007b64:	425b      	neglt	r3, r3
 8007b66:	f042 0202 	orrlt.w	r2, r2, #2
 8007b6a:	9307      	strge	r3, [sp, #28]
 8007b6c:	9307      	strlt	r3, [sp, #28]
 8007b6e:	bfb8      	it	lt
 8007b70:	9204      	strlt	r2, [sp, #16]
 8007b72:	7823      	ldrb	r3, [r4, #0]
 8007b74:	2b2e      	cmp	r3, #46	; 0x2e
 8007b76:	d10c      	bne.n	8007b92 <_vfiprintf_r+0x176>
 8007b78:	7863      	ldrb	r3, [r4, #1]
 8007b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b7c:	d135      	bne.n	8007bea <_vfiprintf_r+0x1ce>
 8007b7e:	9b03      	ldr	r3, [sp, #12]
 8007b80:	3402      	adds	r4, #2
 8007b82:	1d1a      	adds	r2, r3, #4
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	9203      	str	r2, [sp, #12]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	bfb8      	it	lt
 8007b8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b90:	9305      	str	r3, [sp, #20]
 8007b92:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007c6c <_vfiprintf_r+0x250>
 8007b96:	2203      	movs	r2, #3
 8007b98:	4650      	mov	r0, sl
 8007b9a:	7821      	ldrb	r1, [r4, #0]
 8007b9c:	f7ff fa88 	bl	80070b0 <memchr>
 8007ba0:	b140      	cbz	r0, 8007bb4 <_vfiprintf_r+0x198>
 8007ba2:	2340      	movs	r3, #64	; 0x40
 8007ba4:	eba0 000a 	sub.w	r0, r0, sl
 8007ba8:	fa03 f000 	lsl.w	r0, r3, r0
 8007bac:	9b04      	ldr	r3, [sp, #16]
 8007bae:	3401      	adds	r4, #1
 8007bb0:	4303      	orrs	r3, r0
 8007bb2:	9304      	str	r3, [sp, #16]
 8007bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb8:	2206      	movs	r2, #6
 8007bba:	482d      	ldr	r0, [pc, #180]	; (8007c70 <_vfiprintf_r+0x254>)
 8007bbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bc0:	f7ff fa76 	bl	80070b0 <memchr>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d03f      	beq.n	8007c48 <_vfiprintf_r+0x22c>
 8007bc8:	4b2a      	ldr	r3, [pc, #168]	; (8007c74 <_vfiprintf_r+0x258>)
 8007bca:	bb1b      	cbnz	r3, 8007c14 <_vfiprintf_r+0x1f8>
 8007bcc:	9b03      	ldr	r3, [sp, #12]
 8007bce:	3307      	adds	r3, #7
 8007bd0:	f023 0307 	bic.w	r3, r3, #7
 8007bd4:	3308      	adds	r3, #8
 8007bd6:	9303      	str	r3, [sp, #12]
 8007bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bda:	443b      	add	r3, r7
 8007bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8007bde:	e767      	b.n	8007ab0 <_vfiprintf_r+0x94>
 8007be0:	460c      	mov	r4, r1
 8007be2:	2001      	movs	r0, #1
 8007be4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007be8:	e7a5      	b.n	8007b36 <_vfiprintf_r+0x11a>
 8007bea:	2300      	movs	r3, #0
 8007bec:	f04f 0c0a 	mov.w	ip, #10
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	3401      	adds	r4, #1
 8007bf4:	9305      	str	r3, [sp, #20]
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bfc:	3a30      	subs	r2, #48	; 0x30
 8007bfe:	2a09      	cmp	r2, #9
 8007c00:	d903      	bls.n	8007c0a <_vfiprintf_r+0x1ee>
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d0c5      	beq.n	8007b92 <_vfiprintf_r+0x176>
 8007c06:	9105      	str	r1, [sp, #20]
 8007c08:	e7c3      	b.n	8007b92 <_vfiprintf_r+0x176>
 8007c0a:	4604      	mov	r4, r0
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c12:	e7f0      	b.n	8007bf6 <_vfiprintf_r+0x1da>
 8007c14:	ab03      	add	r3, sp, #12
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	462a      	mov	r2, r5
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	4b16      	ldr	r3, [pc, #88]	; (8007c78 <_vfiprintf_r+0x25c>)
 8007c1e:	a904      	add	r1, sp, #16
 8007c20:	f7fd feea 	bl	80059f8 <_printf_float>
 8007c24:	4607      	mov	r7, r0
 8007c26:	1c78      	adds	r0, r7, #1
 8007c28:	d1d6      	bne.n	8007bd8 <_vfiprintf_r+0x1bc>
 8007c2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c2c:	07d9      	lsls	r1, r3, #31
 8007c2e:	d405      	bmi.n	8007c3c <_vfiprintf_r+0x220>
 8007c30:	89ab      	ldrh	r3, [r5, #12]
 8007c32:	059a      	lsls	r2, r3, #22
 8007c34:	d402      	bmi.n	8007c3c <_vfiprintf_r+0x220>
 8007c36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c38:	f7ff fa30 	bl	800709c <__retarget_lock_release_recursive>
 8007c3c:	89ab      	ldrh	r3, [r5, #12]
 8007c3e:	065b      	lsls	r3, r3, #25
 8007c40:	f53f af12 	bmi.w	8007a68 <_vfiprintf_r+0x4c>
 8007c44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c46:	e711      	b.n	8007a6c <_vfiprintf_r+0x50>
 8007c48:	ab03      	add	r3, sp, #12
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	462a      	mov	r2, r5
 8007c4e:	4630      	mov	r0, r6
 8007c50:	4b09      	ldr	r3, [pc, #36]	; (8007c78 <_vfiprintf_r+0x25c>)
 8007c52:	a904      	add	r1, sp, #16
 8007c54:	f7fe f96c 	bl	8005f30 <_printf_i>
 8007c58:	e7e4      	b.n	8007c24 <_vfiprintf_r+0x208>
 8007c5a:	bf00      	nop
 8007c5c:	080084d4 	.word	0x080084d4
 8007c60:	080084f4 	.word	0x080084f4
 8007c64:	080084b4 	.word	0x080084b4
 8007c68:	0800866c 	.word	0x0800866c
 8007c6c:	08008672 	.word	0x08008672
 8007c70:	08008676 	.word	0x08008676
 8007c74:	080059f9 	.word	0x080059f9
 8007c78:	080079f7 	.word	0x080079f7

08007c7c <_sbrk_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	2300      	movs	r3, #0
 8007c80:	4d05      	ldr	r5, [pc, #20]	; (8007c98 <_sbrk_r+0x1c>)
 8007c82:	4604      	mov	r4, r0
 8007c84:	4608      	mov	r0, r1
 8007c86:	602b      	str	r3, [r5, #0]
 8007c88:	f7fa fd66 	bl	8002758 <_sbrk>
 8007c8c:	1c43      	adds	r3, r0, #1
 8007c8e:	d102      	bne.n	8007c96 <_sbrk_r+0x1a>
 8007c90:	682b      	ldr	r3, [r5, #0]
 8007c92:	b103      	cbz	r3, 8007c96 <_sbrk_r+0x1a>
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	2000034c 	.word	0x2000034c

08007c9c <__sread>:
 8007c9c:	b510      	push	{r4, lr}
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca4:	f000 faa4 	bl	80081f0 <_read_r>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	bfab      	itete	ge
 8007cac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cae:	89a3      	ldrhlt	r3, [r4, #12]
 8007cb0:	181b      	addge	r3, r3, r0
 8007cb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cb6:	bfac      	ite	ge
 8007cb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cba:	81a3      	strhlt	r3, [r4, #12]
 8007cbc:	bd10      	pop	{r4, pc}

08007cbe <__swrite>:
 8007cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc2:	461f      	mov	r7, r3
 8007cc4:	898b      	ldrh	r3, [r1, #12]
 8007cc6:	4605      	mov	r5, r0
 8007cc8:	05db      	lsls	r3, r3, #23
 8007cca:	460c      	mov	r4, r1
 8007ccc:	4616      	mov	r6, r2
 8007cce:	d505      	bpl.n	8007cdc <__swrite+0x1e>
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd8:	f000 f9f4 	bl	80080c4 <_lseek_r>
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	4632      	mov	r2, r6
 8007ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ce4:	81a3      	strh	r3, [r4, #12]
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	463b      	mov	r3, r7
 8007cea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf2:	f000 b869 	b.w	8007dc8 <_write_r>

08007cf6 <__sseek>:
 8007cf6:	b510      	push	{r4, lr}
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cfe:	f000 f9e1 	bl	80080c4 <_lseek_r>
 8007d02:	1c43      	adds	r3, r0, #1
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	bf15      	itete	ne
 8007d08:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d12:	81a3      	strheq	r3, [r4, #12]
 8007d14:	bf18      	it	ne
 8007d16:	81a3      	strhne	r3, [r4, #12]
 8007d18:	bd10      	pop	{r4, pc}

08007d1a <__sclose>:
 8007d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d1e:	f000 b8f1 	b.w	8007f04 <_close_r>
	...

08007d24 <__swbuf_r>:
 8007d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d26:	460e      	mov	r6, r1
 8007d28:	4614      	mov	r4, r2
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	b118      	cbz	r0, 8007d36 <__swbuf_r+0x12>
 8007d2e:	6983      	ldr	r3, [r0, #24]
 8007d30:	b90b      	cbnz	r3, 8007d36 <__swbuf_r+0x12>
 8007d32:	f7ff f90f 	bl	8006f54 <__sinit>
 8007d36:	4b21      	ldr	r3, [pc, #132]	; (8007dbc <__swbuf_r+0x98>)
 8007d38:	429c      	cmp	r4, r3
 8007d3a:	d12b      	bne.n	8007d94 <__swbuf_r+0x70>
 8007d3c:	686c      	ldr	r4, [r5, #4]
 8007d3e:	69a3      	ldr	r3, [r4, #24]
 8007d40:	60a3      	str	r3, [r4, #8]
 8007d42:	89a3      	ldrh	r3, [r4, #12]
 8007d44:	071a      	lsls	r2, r3, #28
 8007d46:	d52f      	bpl.n	8007da8 <__swbuf_r+0x84>
 8007d48:	6923      	ldr	r3, [r4, #16]
 8007d4a:	b36b      	cbz	r3, 8007da8 <__swbuf_r+0x84>
 8007d4c:	6923      	ldr	r3, [r4, #16]
 8007d4e:	6820      	ldr	r0, [r4, #0]
 8007d50:	b2f6      	uxtb	r6, r6
 8007d52:	1ac0      	subs	r0, r0, r3
 8007d54:	6963      	ldr	r3, [r4, #20]
 8007d56:	4637      	mov	r7, r6
 8007d58:	4283      	cmp	r3, r0
 8007d5a:	dc04      	bgt.n	8007d66 <__swbuf_r+0x42>
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	4628      	mov	r0, r5
 8007d60:	f000 f962 	bl	8008028 <_fflush_r>
 8007d64:	bb30      	cbnz	r0, 8007db4 <__swbuf_r+0x90>
 8007d66:	68a3      	ldr	r3, [r4, #8]
 8007d68:	3001      	adds	r0, #1
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	60a3      	str	r3, [r4, #8]
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	1c5a      	adds	r2, r3, #1
 8007d72:	6022      	str	r2, [r4, #0]
 8007d74:	701e      	strb	r6, [r3, #0]
 8007d76:	6963      	ldr	r3, [r4, #20]
 8007d78:	4283      	cmp	r3, r0
 8007d7a:	d004      	beq.n	8007d86 <__swbuf_r+0x62>
 8007d7c:	89a3      	ldrh	r3, [r4, #12]
 8007d7e:	07db      	lsls	r3, r3, #31
 8007d80:	d506      	bpl.n	8007d90 <__swbuf_r+0x6c>
 8007d82:	2e0a      	cmp	r6, #10
 8007d84:	d104      	bne.n	8007d90 <__swbuf_r+0x6c>
 8007d86:	4621      	mov	r1, r4
 8007d88:	4628      	mov	r0, r5
 8007d8a:	f000 f94d 	bl	8008028 <_fflush_r>
 8007d8e:	b988      	cbnz	r0, 8007db4 <__swbuf_r+0x90>
 8007d90:	4638      	mov	r0, r7
 8007d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d94:	4b0a      	ldr	r3, [pc, #40]	; (8007dc0 <__swbuf_r+0x9c>)
 8007d96:	429c      	cmp	r4, r3
 8007d98:	d101      	bne.n	8007d9e <__swbuf_r+0x7a>
 8007d9a:	68ac      	ldr	r4, [r5, #8]
 8007d9c:	e7cf      	b.n	8007d3e <__swbuf_r+0x1a>
 8007d9e:	4b09      	ldr	r3, [pc, #36]	; (8007dc4 <__swbuf_r+0xa0>)
 8007da0:	429c      	cmp	r4, r3
 8007da2:	bf08      	it	eq
 8007da4:	68ec      	ldreq	r4, [r5, #12]
 8007da6:	e7ca      	b.n	8007d3e <__swbuf_r+0x1a>
 8007da8:	4621      	mov	r1, r4
 8007daa:	4628      	mov	r0, r5
 8007dac:	f000 f81e 	bl	8007dec <__swsetup_r>
 8007db0:	2800      	cmp	r0, #0
 8007db2:	d0cb      	beq.n	8007d4c <__swbuf_r+0x28>
 8007db4:	f04f 37ff 	mov.w	r7, #4294967295
 8007db8:	e7ea      	b.n	8007d90 <__swbuf_r+0x6c>
 8007dba:	bf00      	nop
 8007dbc:	080084d4 	.word	0x080084d4
 8007dc0:	080084f4 	.word	0x080084f4
 8007dc4:	080084b4 	.word	0x080084b4

08007dc8 <_write_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	4604      	mov	r4, r0
 8007dcc:	4608      	mov	r0, r1
 8007dce:	4611      	mov	r1, r2
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	4d05      	ldr	r5, [pc, #20]	; (8007de8 <_write_r+0x20>)
 8007dd4:	602a      	str	r2, [r5, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f7fa fc72 	bl	80026c0 <_write>
 8007ddc:	1c43      	adds	r3, r0, #1
 8007dde:	d102      	bne.n	8007de6 <_write_r+0x1e>
 8007de0:	682b      	ldr	r3, [r5, #0]
 8007de2:	b103      	cbz	r3, 8007de6 <_write_r+0x1e>
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	bd38      	pop	{r3, r4, r5, pc}
 8007de8:	2000034c 	.word	0x2000034c

08007dec <__swsetup_r>:
 8007dec:	4b32      	ldr	r3, [pc, #200]	; (8007eb8 <__swsetup_r+0xcc>)
 8007dee:	b570      	push	{r4, r5, r6, lr}
 8007df0:	681d      	ldr	r5, [r3, #0]
 8007df2:	4606      	mov	r6, r0
 8007df4:	460c      	mov	r4, r1
 8007df6:	b125      	cbz	r5, 8007e02 <__swsetup_r+0x16>
 8007df8:	69ab      	ldr	r3, [r5, #24]
 8007dfa:	b913      	cbnz	r3, 8007e02 <__swsetup_r+0x16>
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	f7ff f8a9 	bl	8006f54 <__sinit>
 8007e02:	4b2e      	ldr	r3, [pc, #184]	; (8007ebc <__swsetup_r+0xd0>)
 8007e04:	429c      	cmp	r4, r3
 8007e06:	d10f      	bne.n	8007e28 <__swsetup_r+0x3c>
 8007e08:	686c      	ldr	r4, [r5, #4]
 8007e0a:	89a3      	ldrh	r3, [r4, #12]
 8007e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e10:	0719      	lsls	r1, r3, #28
 8007e12:	d42c      	bmi.n	8007e6e <__swsetup_r+0x82>
 8007e14:	06dd      	lsls	r5, r3, #27
 8007e16:	d411      	bmi.n	8007e3c <__swsetup_r+0x50>
 8007e18:	2309      	movs	r3, #9
 8007e1a:	6033      	str	r3, [r6, #0]
 8007e1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e20:	f04f 30ff 	mov.w	r0, #4294967295
 8007e24:	81a3      	strh	r3, [r4, #12]
 8007e26:	e03e      	b.n	8007ea6 <__swsetup_r+0xba>
 8007e28:	4b25      	ldr	r3, [pc, #148]	; (8007ec0 <__swsetup_r+0xd4>)
 8007e2a:	429c      	cmp	r4, r3
 8007e2c:	d101      	bne.n	8007e32 <__swsetup_r+0x46>
 8007e2e:	68ac      	ldr	r4, [r5, #8]
 8007e30:	e7eb      	b.n	8007e0a <__swsetup_r+0x1e>
 8007e32:	4b24      	ldr	r3, [pc, #144]	; (8007ec4 <__swsetup_r+0xd8>)
 8007e34:	429c      	cmp	r4, r3
 8007e36:	bf08      	it	eq
 8007e38:	68ec      	ldreq	r4, [r5, #12]
 8007e3a:	e7e6      	b.n	8007e0a <__swsetup_r+0x1e>
 8007e3c:	0758      	lsls	r0, r3, #29
 8007e3e:	d512      	bpl.n	8007e66 <__swsetup_r+0x7a>
 8007e40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e42:	b141      	cbz	r1, 8007e56 <__swsetup_r+0x6a>
 8007e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e48:	4299      	cmp	r1, r3
 8007e4a:	d002      	beq.n	8007e52 <__swsetup_r+0x66>
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	f7ff fce1 	bl	8007814 <_free_r>
 8007e52:	2300      	movs	r3, #0
 8007e54:	6363      	str	r3, [r4, #52]	; 0x34
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e5c:	81a3      	strh	r3, [r4, #12]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	6063      	str	r3, [r4, #4]
 8007e62:	6923      	ldr	r3, [r4, #16]
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	89a3      	ldrh	r3, [r4, #12]
 8007e68:	f043 0308 	orr.w	r3, r3, #8
 8007e6c:	81a3      	strh	r3, [r4, #12]
 8007e6e:	6923      	ldr	r3, [r4, #16]
 8007e70:	b94b      	cbnz	r3, 8007e86 <__swsetup_r+0x9a>
 8007e72:	89a3      	ldrh	r3, [r4, #12]
 8007e74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e7c:	d003      	beq.n	8007e86 <__swsetup_r+0x9a>
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4630      	mov	r0, r6
 8007e82:	f000 f957 	bl	8008134 <__smakebuf_r>
 8007e86:	89a0      	ldrh	r0, [r4, #12]
 8007e88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e8c:	f010 0301 	ands.w	r3, r0, #1
 8007e90:	d00a      	beq.n	8007ea8 <__swsetup_r+0xbc>
 8007e92:	2300      	movs	r3, #0
 8007e94:	60a3      	str	r3, [r4, #8]
 8007e96:	6963      	ldr	r3, [r4, #20]
 8007e98:	425b      	negs	r3, r3
 8007e9a:	61a3      	str	r3, [r4, #24]
 8007e9c:	6923      	ldr	r3, [r4, #16]
 8007e9e:	b943      	cbnz	r3, 8007eb2 <__swsetup_r+0xc6>
 8007ea0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ea4:	d1ba      	bne.n	8007e1c <__swsetup_r+0x30>
 8007ea6:	bd70      	pop	{r4, r5, r6, pc}
 8007ea8:	0781      	lsls	r1, r0, #30
 8007eaa:	bf58      	it	pl
 8007eac:	6963      	ldrpl	r3, [r4, #20]
 8007eae:	60a3      	str	r3, [r4, #8]
 8007eb0:	e7f4      	b.n	8007e9c <__swsetup_r+0xb0>
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	e7f7      	b.n	8007ea6 <__swsetup_r+0xba>
 8007eb6:	bf00      	nop
 8007eb8:	20000014 	.word	0x20000014
 8007ebc:	080084d4 	.word	0x080084d4
 8007ec0:	080084f4 	.word	0x080084f4
 8007ec4:	080084b4 	.word	0x080084b4

08007ec8 <__assert_func>:
 8007ec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007eca:	4614      	mov	r4, r2
 8007ecc:	461a      	mov	r2, r3
 8007ece:	4b09      	ldr	r3, [pc, #36]	; (8007ef4 <__assert_func+0x2c>)
 8007ed0:	4605      	mov	r5, r0
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68d8      	ldr	r0, [r3, #12]
 8007ed6:	b14c      	cbz	r4, 8007eec <__assert_func+0x24>
 8007ed8:	4b07      	ldr	r3, [pc, #28]	; (8007ef8 <__assert_func+0x30>)
 8007eda:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ede:	9100      	str	r1, [sp, #0]
 8007ee0:	462b      	mov	r3, r5
 8007ee2:	4906      	ldr	r1, [pc, #24]	; (8007efc <__assert_func+0x34>)
 8007ee4:	f000 f8dc 	bl	80080a0 <fiprintf>
 8007ee8:	f000 f9a1 	bl	800822e <abort>
 8007eec:	4b04      	ldr	r3, [pc, #16]	; (8007f00 <__assert_func+0x38>)
 8007eee:	461c      	mov	r4, r3
 8007ef0:	e7f3      	b.n	8007eda <__assert_func+0x12>
 8007ef2:	bf00      	nop
 8007ef4:	20000014 	.word	0x20000014
 8007ef8:	0800867d 	.word	0x0800867d
 8007efc:	0800868a 	.word	0x0800868a
 8007f00:	080086b8 	.word	0x080086b8

08007f04 <_close_r>:
 8007f04:	b538      	push	{r3, r4, r5, lr}
 8007f06:	2300      	movs	r3, #0
 8007f08:	4d05      	ldr	r5, [pc, #20]	; (8007f20 <_close_r+0x1c>)
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	4608      	mov	r0, r1
 8007f0e:	602b      	str	r3, [r5, #0]
 8007f10:	f7fa fbf2 	bl	80026f8 <_close>
 8007f14:	1c43      	adds	r3, r0, #1
 8007f16:	d102      	bne.n	8007f1e <_close_r+0x1a>
 8007f18:	682b      	ldr	r3, [r5, #0]
 8007f1a:	b103      	cbz	r3, 8007f1e <_close_r+0x1a>
 8007f1c:	6023      	str	r3, [r4, #0]
 8007f1e:	bd38      	pop	{r3, r4, r5, pc}
 8007f20:	2000034c 	.word	0x2000034c

08007f24 <__sflush_r>:
 8007f24:	898a      	ldrh	r2, [r1, #12]
 8007f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f28:	4605      	mov	r5, r0
 8007f2a:	0710      	lsls	r0, r2, #28
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	d457      	bmi.n	8007fe0 <__sflush_r+0xbc>
 8007f30:	684b      	ldr	r3, [r1, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	dc04      	bgt.n	8007f40 <__sflush_r+0x1c>
 8007f36:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	dc01      	bgt.n	8007f40 <__sflush_r+0x1c>
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f42:	2e00      	cmp	r6, #0
 8007f44:	d0fa      	beq.n	8007f3c <__sflush_r+0x18>
 8007f46:	2300      	movs	r3, #0
 8007f48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f4c:	682f      	ldr	r7, [r5, #0]
 8007f4e:	602b      	str	r3, [r5, #0]
 8007f50:	d032      	beq.n	8007fb8 <__sflush_r+0x94>
 8007f52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f54:	89a3      	ldrh	r3, [r4, #12]
 8007f56:	075a      	lsls	r2, r3, #29
 8007f58:	d505      	bpl.n	8007f66 <__sflush_r+0x42>
 8007f5a:	6863      	ldr	r3, [r4, #4]
 8007f5c:	1ac0      	subs	r0, r0, r3
 8007f5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f60:	b10b      	cbz	r3, 8007f66 <__sflush_r+0x42>
 8007f62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f64:	1ac0      	subs	r0, r0, r3
 8007f66:	2300      	movs	r3, #0
 8007f68:	4602      	mov	r2, r0
 8007f6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	6a21      	ldr	r1, [r4, #32]
 8007f70:	47b0      	blx	r6
 8007f72:	1c43      	adds	r3, r0, #1
 8007f74:	89a3      	ldrh	r3, [r4, #12]
 8007f76:	d106      	bne.n	8007f86 <__sflush_r+0x62>
 8007f78:	6829      	ldr	r1, [r5, #0]
 8007f7a:	291d      	cmp	r1, #29
 8007f7c:	d82c      	bhi.n	8007fd8 <__sflush_r+0xb4>
 8007f7e:	4a29      	ldr	r2, [pc, #164]	; (8008024 <__sflush_r+0x100>)
 8007f80:	40ca      	lsrs	r2, r1
 8007f82:	07d6      	lsls	r6, r2, #31
 8007f84:	d528      	bpl.n	8007fd8 <__sflush_r+0xb4>
 8007f86:	2200      	movs	r2, #0
 8007f88:	6062      	str	r2, [r4, #4]
 8007f8a:	6922      	ldr	r2, [r4, #16]
 8007f8c:	04d9      	lsls	r1, r3, #19
 8007f8e:	6022      	str	r2, [r4, #0]
 8007f90:	d504      	bpl.n	8007f9c <__sflush_r+0x78>
 8007f92:	1c42      	adds	r2, r0, #1
 8007f94:	d101      	bne.n	8007f9a <__sflush_r+0x76>
 8007f96:	682b      	ldr	r3, [r5, #0]
 8007f98:	b903      	cbnz	r3, 8007f9c <__sflush_r+0x78>
 8007f9a:	6560      	str	r0, [r4, #84]	; 0x54
 8007f9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f9e:	602f      	str	r7, [r5, #0]
 8007fa0:	2900      	cmp	r1, #0
 8007fa2:	d0cb      	beq.n	8007f3c <__sflush_r+0x18>
 8007fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fa8:	4299      	cmp	r1, r3
 8007faa:	d002      	beq.n	8007fb2 <__sflush_r+0x8e>
 8007fac:	4628      	mov	r0, r5
 8007fae:	f7ff fc31 	bl	8007814 <_free_r>
 8007fb2:	2000      	movs	r0, #0
 8007fb4:	6360      	str	r0, [r4, #52]	; 0x34
 8007fb6:	e7c2      	b.n	8007f3e <__sflush_r+0x1a>
 8007fb8:	6a21      	ldr	r1, [r4, #32]
 8007fba:	2301      	movs	r3, #1
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	47b0      	blx	r6
 8007fc0:	1c41      	adds	r1, r0, #1
 8007fc2:	d1c7      	bne.n	8007f54 <__sflush_r+0x30>
 8007fc4:	682b      	ldr	r3, [r5, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d0c4      	beq.n	8007f54 <__sflush_r+0x30>
 8007fca:	2b1d      	cmp	r3, #29
 8007fcc:	d001      	beq.n	8007fd2 <__sflush_r+0xae>
 8007fce:	2b16      	cmp	r3, #22
 8007fd0:	d101      	bne.n	8007fd6 <__sflush_r+0xb2>
 8007fd2:	602f      	str	r7, [r5, #0]
 8007fd4:	e7b2      	b.n	8007f3c <__sflush_r+0x18>
 8007fd6:	89a3      	ldrh	r3, [r4, #12]
 8007fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fdc:	81a3      	strh	r3, [r4, #12]
 8007fde:	e7ae      	b.n	8007f3e <__sflush_r+0x1a>
 8007fe0:	690f      	ldr	r7, [r1, #16]
 8007fe2:	2f00      	cmp	r7, #0
 8007fe4:	d0aa      	beq.n	8007f3c <__sflush_r+0x18>
 8007fe6:	0793      	lsls	r3, r2, #30
 8007fe8:	bf18      	it	ne
 8007fea:	2300      	movne	r3, #0
 8007fec:	680e      	ldr	r6, [r1, #0]
 8007fee:	bf08      	it	eq
 8007ff0:	694b      	ldreq	r3, [r1, #20]
 8007ff2:	1bf6      	subs	r6, r6, r7
 8007ff4:	600f      	str	r7, [r1, #0]
 8007ff6:	608b      	str	r3, [r1, #8]
 8007ff8:	2e00      	cmp	r6, #0
 8007ffa:	dd9f      	ble.n	8007f3c <__sflush_r+0x18>
 8007ffc:	4633      	mov	r3, r6
 8007ffe:	463a      	mov	r2, r7
 8008000:	4628      	mov	r0, r5
 8008002:	6a21      	ldr	r1, [r4, #32]
 8008004:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008008:	47e0      	blx	ip
 800800a:	2800      	cmp	r0, #0
 800800c:	dc06      	bgt.n	800801c <__sflush_r+0xf8>
 800800e:	89a3      	ldrh	r3, [r4, #12]
 8008010:	f04f 30ff 	mov.w	r0, #4294967295
 8008014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008018:	81a3      	strh	r3, [r4, #12]
 800801a:	e790      	b.n	8007f3e <__sflush_r+0x1a>
 800801c:	4407      	add	r7, r0
 800801e:	1a36      	subs	r6, r6, r0
 8008020:	e7ea      	b.n	8007ff8 <__sflush_r+0xd4>
 8008022:	bf00      	nop
 8008024:	20400001 	.word	0x20400001

08008028 <_fflush_r>:
 8008028:	b538      	push	{r3, r4, r5, lr}
 800802a:	690b      	ldr	r3, [r1, #16]
 800802c:	4605      	mov	r5, r0
 800802e:	460c      	mov	r4, r1
 8008030:	b913      	cbnz	r3, 8008038 <_fflush_r+0x10>
 8008032:	2500      	movs	r5, #0
 8008034:	4628      	mov	r0, r5
 8008036:	bd38      	pop	{r3, r4, r5, pc}
 8008038:	b118      	cbz	r0, 8008042 <_fflush_r+0x1a>
 800803a:	6983      	ldr	r3, [r0, #24]
 800803c:	b90b      	cbnz	r3, 8008042 <_fflush_r+0x1a>
 800803e:	f7fe ff89 	bl	8006f54 <__sinit>
 8008042:	4b14      	ldr	r3, [pc, #80]	; (8008094 <_fflush_r+0x6c>)
 8008044:	429c      	cmp	r4, r3
 8008046:	d11b      	bne.n	8008080 <_fflush_r+0x58>
 8008048:	686c      	ldr	r4, [r5, #4]
 800804a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d0ef      	beq.n	8008032 <_fflush_r+0xa>
 8008052:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008054:	07d0      	lsls	r0, r2, #31
 8008056:	d404      	bmi.n	8008062 <_fflush_r+0x3a>
 8008058:	0599      	lsls	r1, r3, #22
 800805a:	d402      	bmi.n	8008062 <_fflush_r+0x3a>
 800805c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800805e:	f7ff f81c 	bl	800709a <__retarget_lock_acquire_recursive>
 8008062:	4628      	mov	r0, r5
 8008064:	4621      	mov	r1, r4
 8008066:	f7ff ff5d 	bl	8007f24 <__sflush_r>
 800806a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800806c:	4605      	mov	r5, r0
 800806e:	07da      	lsls	r2, r3, #31
 8008070:	d4e0      	bmi.n	8008034 <_fflush_r+0xc>
 8008072:	89a3      	ldrh	r3, [r4, #12]
 8008074:	059b      	lsls	r3, r3, #22
 8008076:	d4dd      	bmi.n	8008034 <_fflush_r+0xc>
 8008078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800807a:	f7ff f80f 	bl	800709c <__retarget_lock_release_recursive>
 800807e:	e7d9      	b.n	8008034 <_fflush_r+0xc>
 8008080:	4b05      	ldr	r3, [pc, #20]	; (8008098 <_fflush_r+0x70>)
 8008082:	429c      	cmp	r4, r3
 8008084:	d101      	bne.n	800808a <_fflush_r+0x62>
 8008086:	68ac      	ldr	r4, [r5, #8]
 8008088:	e7df      	b.n	800804a <_fflush_r+0x22>
 800808a:	4b04      	ldr	r3, [pc, #16]	; (800809c <_fflush_r+0x74>)
 800808c:	429c      	cmp	r4, r3
 800808e:	bf08      	it	eq
 8008090:	68ec      	ldreq	r4, [r5, #12]
 8008092:	e7da      	b.n	800804a <_fflush_r+0x22>
 8008094:	080084d4 	.word	0x080084d4
 8008098:	080084f4 	.word	0x080084f4
 800809c:	080084b4 	.word	0x080084b4

080080a0 <fiprintf>:
 80080a0:	b40e      	push	{r1, r2, r3}
 80080a2:	b503      	push	{r0, r1, lr}
 80080a4:	4601      	mov	r1, r0
 80080a6:	ab03      	add	r3, sp, #12
 80080a8:	4805      	ldr	r0, [pc, #20]	; (80080c0 <fiprintf+0x20>)
 80080aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ae:	6800      	ldr	r0, [r0, #0]
 80080b0:	9301      	str	r3, [sp, #4]
 80080b2:	f7ff fcb3 	bl	8007a1c <_vfiprintf_r>
 80080b6:	b002      	add	sp, #8
 80080b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80080bc:	b003      	add	sp, #12
 80080be:	4770      	bx	lr
 80080c0:	20000014 	.word	0x20000014

080080c4 <_lseek_r>:
 80080c4:	b538      	push	{r3, r4, r5, lr}
 80080c6:	4604      	mov	r4, r0
 80080c8:	4608      	mov	r0, r1
 80080ca:	4611      	mov	r1, r2
 80080cc:	2200      	movs	r2, #0
 80080ce:	4d05      	ldr	r5, [pc, #20]	; (80080e4 <_lseek_r+0x20>)
 80080d0:	602a      	str	r2, [r5, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	f7fa fb34 	bl	8002740 <_lseek>
 80080d8:	1c43      	adds	r3, r0, #1
 80080da:	d102      	bne.n	80080e2 <_lseek_r+0x1e>
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	b103      	cbz	r3, 80080e2 <_lseek_r+0x1e>
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	2000034c 	.word	0x2000034c

080080e8 <__swhatbuf_r>:
 80080e8:	b570      	push	{r4, r5, r6, lr}
 80080ea:	460e      	mov	r6, r1
 80080ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f0:	4614      	mov	r4, r2
 80080f2:	2900      	cmp	r1, #0
 80080f4:	461d      	mov	r5, r3
 80080f6:	b096      	sub	sp, #88	; 0x58
 80080f8:	da08      	bge.n	800810c <__swhatbuf_r+0x24>
 80080fa:	2200      	movs	r2, #0
 80080fc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008100:	602a      	str	r2, [r5, #0]
 8008102:	061a      	lsls	r2, r3, #24
 8008104:	d410      	bmi.n	8008128 <__swhatbuf_r+0x40>
 8008106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800810a:	e00e      	b.n	800812a <__swhatbuf_r+0x42>
 800810c:	466a      	mov	r2, sp
 800810e:	f000 f895 	bl	800823c <_fstat_r>
 8008112:	2800      	cmp	r0, #0
 8008114:	dbf1      	blt.n	80080fa <__swhatbuf_r+0x12>
 8008116:	9a01      	ldr	r2, [sp, #4]
 8008118:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800811c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008120:	425a      	negs	r2, r3
 8008122:	415a      	adcs	r2, r3
 8008124:	602a      	str	r2, [r5, #0]
 8008126:	e7ee      	b.n	8008106 <__swhatbuf_r+0x1e>
 8008128:	2340      	movs	r3, #64	; 0x40
 800812a:	2000      	movs	r0, #0
 800812c:	6023      	str	r3, [r4, #0]
 800812e:	b016      	add	sp, #88	; 0x58
 8008130:	bd70      	pop	{r4, r5, r6, pc}
	...

08008134 <__smakebuf_r>:
 8008134:	898b      	ldrh	r3, [r1, #12]
 8008136:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008138:	079d      	lsls	r5, r3, #30
 800813a:	4606      	mov	r6, r0
 800813c:	460c      	mov	r4, r1
 800813e:	d507      	bpl.n	8008150 <__smakebuf_r+0x1c>
 8008140:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	6123      	str	r3, [r4, #16]
 8008148:	2301      	movs	r3, #1
 800814a:	6163      	str	r3, [r4, #20]
 800814c:	b002      	add	sp, #8
 800814e:	bd70      	pop	{r4, r5, r6, pc}
 8008150:	466a      	mov	r2, sp
 8008152:	ab01      	add	r3, sp, #4
 8008154:	f7ff ffc8 	bl	80080e8 <__swhatbuf_r>
 8008158:	9900      	ldr	r1, [sp, #0]
 800815a:	4605      	mov	r5, r0
 800815c:	4630      	mov	r0, r6
 800815e:	f7ff fbc1 	bl	80078e4 <_malloc_r>
 8008162:	b948      	cbnz	r0, 8008178 <__smakebuf_r+0x44>
 8008164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008168:	059a      	lsls	r2, r3, #22
 800816a:	d4ef      	bmi.n	800814c <__smakebuf_r+0x18>
 800816c:	f023 0303 	bic.w	r3, r3, #3
 8008170:	f043 0302 	orr.w	r3, r3, #2
 8008174:	81a3      	strh	r3, [r4, #12]
 8008176:	e7e3      	b.n	8008140 <__smakebuf_r+0xc>
 8008178:	4b0d      	ldr	r3, [pc, #52]	; (80081b0 <__smakebuf_r+0x7c>)
 800817a:	62b3      	str	r3, [r6, #40]	; 0x28
 800817c:	89a3      	ldrh	r3, [r4, #12]
 800817e:	6020      	str	r0, [r4, #0]
 8008180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008184:	81a3      	strh	r3, [r4, #12]
 8008186:	9b00      	ldr	r3, [sp, #0]
 8008188:	6120      	str	r0, [r4, #16]
 800818a:	6163      	str	r3, [r4, #20]
 800818c:	9b01      	ldr	r3, [sp, #4]
 800818e:	b15b      	cbz	r3, 80081a8 <__smakebuf_r+0x74>
 8008190:	4630      	mov	r0, r6
 8008192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008196:	f000 f863 	bl	8008260 <_isatty_r>
 800819a:	b128      	cbz	r0, 80081a8 <__smakebuf_r+0x74>
 800819c:	89a3      	ldrh	r3, [r4, #12]
 800819e:	f023 0303 	bic.w	r3, r3, #3
 80081a2:	f043 0301 	orr.w	r3, r3, #1
 80081a6:	81a3      	strh	r3, [r4, #12]
 80081a8:	89a0      	ldrh	r0, [r4, #12]
 80081aa:	4305      	orrs	r5, r0
 80081ac:	81a5      	strh	r5, [r4, #12]
 80081ae:	e7cd      	b.n	800814c <__smakebuf_r+0x18>
 80081b0:	08006eed 	.word	0x08006eed

080081b4 <__ascii_mbtowc>:
 80081b4:	b082      	sub	sp, #8
 80081b6:	b901      	cbnz	r1, 80081ba <__ascii_mbtowc+0x6>
 80081b8:	a901      	add	r1, sp, #4
 80081ba:	b142      	cbz	r2, 80081ce <__ascii_mbtowc+0x1a>
 80081bc:	b14b      	cbz	r3, 80081d2 <__ascii_mbtowc+0x1e>
 80081be:	7813      	ldrb	r3, [r2, #0]
 80081c0:	600b      	str	r3, [r1, #0]
 80081c2:	7812      	ldrb	r2, [r2, #0]
 80081c4:	1e10      	subs	r0, r2, #0
 80081c6:	bf18      	it	ne
 80081c8:	2001      	movne	r0, #1
 80081ca:	b002      	add	sp, #8
 80081cc:	4770      	bx	lr
 80081ce:	4610      	mov	r0, r2
 80081d0:	e7fb      	b.n	80081ca <__ascii_mbtowc+0x16>
 80081d2:	f06f 0001 	mvn.w	r0, #1
 80081d6:	e7f8      	b.n	80081ca <__ascii_mbtowc+0x16>

080081d8 <__malloc_lock>:
 80081d8:	4801      	ldr	r0, [pc, #4]	; (80081e0 <__malloc_lock+0x8>)
 80081da:	f7fe bf5e 	b.w	800709a <__retarget_lock_acquire_recursive>
 80081de:	bf00      	nop
 80081e0:	20000340 	.word	0x20000340

080081e4 <__malloc_unlock>:
 80081e4:	4801      	ldr	r0, [pc, #4]	; (80081ec <__malloc_unlock+0x8>)
 80081e6:	f7fe bf59 	b.w	800709c <__retarget_lock_release_recursive>
 80081ea:	bf00      	nop
 80081ec:	20000340 	.word	0x20000340

080081f0 <_read_r>:
 80081f0:	b538      	push	{r3, r4, r5, lr}
 80081f2:	4604      	mov	r4, r0
 80081f4:	4608      	mov	r0, r1
 80081f6:	4611      	mov	r1, r2
 80081f8:	2200      	movs	r2, #0
 80081fa:	4d05      	ldr	r5, [pc, #20]	; (8008210 <_read_r+0x20>)
 80081fc:	602a      	str	r2, [r5, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	f7fa fa41 	bl	8002686 <_read>
 8008204:	1c43      	adds	r3, r0, #1
 8008206:	d102      	bne.n	800820e <_read_r+0x1e>
 8008208:	682b      	ldr	r3, [r5, #0]
 800820a:	b103      	cbz	r3, 800820e <_read_r+0x1e>
 800820c:	6023      	str	r3, [r4, #0]
 800820e:	bd38      	pop	{r3, r4, r5, pc}
 8008210:	2000034c 	.word	0x2000034c

08008214 <__ascii_wctomb>:
 8008214:	4603      	mov	r3, r0
 8008216:	4608      	mov	r0, r1
 8008218:	b141      	cbz	r1, 800822c <__ascii_wctomb+0x18>
 800821a:	2aff      	cmp	r2, #255	; 0xff
 800821c:	d904      	bls.n	8008228 <__ascii_wctomb+0x14>
 800821e:	228a      	movs	r2, #138	; 0x8a
 8008220:	f04f 30ff 	mov.w	r0, #4294967295
 8008224:	601a      	str	r2, [r3, #0]
 8008226:	4770      	bx	lr
 8008228:	2001      	movs	r0, #1
 800822a:	700a      	strb	r2, [r1, #0]
 800822c:	4770      	bx	lr

0800822e <abort>:
 800822e:	2006      	movs	r0, #6
 8008230:	b508      	push	{r3, lr}
 8008232:	f000 f84d 	bl	80082d0 <raise>
 8008236:	2001      	movs	r0, #1
 8008238:	f7fa fa1b 	bl	8002672 <_exit>

0800823c <_fstat_r>:
 800823c:	b538      	push	{r3, r4, r5, lr}
 800823e:	2300      	movs	r3, #0
 8008240:	4d06      	ldr	r5, [pc, #24]	; (800825c <_fstat_r+0x20>)
 8008242:	4604      	mov	r4, r0
 8008244:	4608      	mov	r0, r1
 8008246:	4611      	mov	r1, r2
 8008248:	602b      	str	r3, [r5, #0]
 800824a:	f7fa fa60 	bl	800270e <_fstat>
 800824e:	1c43      	adds	r3, r0, #1
 8008250:	d102      	bne.n	8008258 <_fstat_r+0x1c>
 8008252:	682b      	ldr	r3, [r5, #0]
 8008254:	b103      	cbz	r3, 8008258 <_fstat_r+0x1c>
 8008256:	6023      	str	r3, [r4, #0]
 8008258:	bd38      	pop	{r3, r4, r5, pc}
 800825a:	bf00      	nop
 800825c:	2000034c 	.word	0x2000034c

08008260 <_isatty_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	2300      	movs	r3, #0
 8008264:	4d05      	ldr	r5, [pc, #20]	; (800827c <_isatty_r+0x1c>)
 8008266:	4604      	mov	r4, r0
 8008268:	4608      	mov	r0, r1
 800826a:	602b      	str	r3, [r5, #0]
 800826c:	f7fa fa5e 	bl	800272c <_isatty>
 8008270:	1c43      	adds	r3, r0, #1
 8008272:	d102      	bne.n	800827a <_isatty_r+0x1a>
 8008274:	682b      	ldr	r3, [r5, #0]
 8008276:	b103      	cbz	r3, 800827a <_isatty_r+0x1a>
 8008278:	6023      	str	r3, [r4, #0]
 800827a:	bd38      	pop	{r3, r4, r5, pc}
 800827c:	2000034c 	.word	0x2000034c

08008280 <_raise_r>:
 8008280:	291f      	cmp	r1, #31
 8008282:	b538      	push	{r3, r4, r5, lr}
 8008284:	4604      	mov	r4, r0
 8008286:	460d      	mov	r5, r1
 8008288:	d904      	bls.n	8008294 <_raise_r+0x14>
 800828a:	2316      	movs	r3, #22
 800828c:	6003      	str	r3, [r0, #0]
 800828e:	f04f 30ff 	mov.w	r0, #4294967295
 8008292:	bd38      	pop	{r3, r4, r5, pc}
 8008294:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008296:	b112      	cbz	r2, 800829e <_raise_r+0x1e>
 8008298:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800829c:	b94b      	cbnz	r3, 80082b2 <_raise_r+0x32>
 800829e:	4620      	mov	r0, r4
 80082a0:	f000 f830 	bl	8008304 <_getpid_r>
 80082a4:	462a      	mov	r2, r5
 80082a6:	4601      	mov	r1, r0
 80082a8:	4620      	mov	r0, r4
 80082aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082ae:	f000 b817 	b.w	80082e0 <_kill_r>
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d00a      	beq.n	80082cc <_raise_r+0x4c>
 80082b6:	1c59      	adds	r1, r3, #1
 80082b8:	d103      	bne.n	80082c2 <_raise_r+0x42>
 80082ba:	2316      	movs	r3, #22
 80082bc:	6003      	str	r3, [r0, #0]
 80082be:	2001      	movs	r0, #1
 80082c0:	e7e7      	b.n	8008292 <_raise_r+0x12>
 80082c2:	2400      	movs	r4, #0
 80082c4:	4628      	mov	r0, r5
 80082c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082ca:	4798      	blx	r3
 80082cc:	2000      	movs	r0, #0
 80082ce:	e7e0      	b.n	8008292 <_raise_r+0x12>

080082d0 <raise>:
 80082d0:	4b02      	ldr	r3, [pc, #8]	; (80082dc <raise+0xc>)
 80082d2:	4601      	mov	r1, r0
 80082d4:	6818      	ldr	r0, [r3, #0]
 80082d6:	f7ff bfd3 	b.w	8008280 <_raise_r>
 80082da:	bf00      	nop
 80082dc:	20000014 	.word	0x20000014

080082e0 <_kill_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	2300      	movs	r3, #0
 80082e4:	4d06      	ldr	r5, [pc, #24]	; (8008300 <_kill_r+0x20>)
 80082e6:	4604      	mov	r4, r0
 80082e8:	4608      	mov	r0, r1
 80082ea:	4611      	mov	r1, r2
 80082ec:	602b      	str	r3, [r5, #0]
 80082ee:	f7fa f9b0 	bl	8002652 <_kill>
 80082f2:	1c43      	adds	r3, r0, #1
 80082f4:	d102      	bne.n	80082fc <_kill_r+0x1c>
 80082f6:	682b      	ldr	r3, [r5, #0]
 80082f8:	b103      	cbz	r3, 80082fc <_kill_r+0x1c>
 80082fa:	6023      	str	r3, [r4, #0]
 80082fc:	bd38      	pop	{r3, r4, r5, pc}
 80082fe:	bf00      	nop
 8008300:	2000034c 	.word	0x2000034c

08008304 <_getpid_r>:
 8008304:	f7fa b99e 	b.w	8002644 <_getpid>

08008308 <_init>:
 8008308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800830a:	bf00      	nop
 800830c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800830e:	bc08      	pop	{r3}
 8008310:	469e      	mov	lr, r3
 8008312:	4770      	bx	lr

08008314 <_fini>:
 8008314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008316:	bf00      	nop
 8008318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800831a:	bc08      	pop	{r3}
 800831c:	469e      	mov	lr, r3
 800831e:	4770      	bx	lr
