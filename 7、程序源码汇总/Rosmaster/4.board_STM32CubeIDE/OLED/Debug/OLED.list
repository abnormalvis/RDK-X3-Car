
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a20  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  08003c04  08003c04  00013c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043ec  080043ec  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080043ec  080043ec  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043ec  080043ec  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043ec  080043ec  000143ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043f0  080043f0  000143f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080043f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000078  0800446c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  0800446c  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b51  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002179  00000000  00000000  00027bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  00029d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d0  00000000  00000000  0002a670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5a7  00000000  00000000  0002ae40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cdf0  00000000  00000000  000453e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091115  00000000  00000000  000521d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e32ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002460  00000000  00000000  000e333c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000078 	.word	0x20000078
 8000200:	00000000 	.word	0x00000000
 8000204:	08003bec 	.word	0x08003bec

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000007c 	.word	0x2000007c
 8000220:	08003bec 	.word	0x08003bec

08000224 <Bsp_Led_Show_State_Handle>:
#include "stdio.h"

// LED显示当前运行状态，每10毫秒调用一次，LED灯每200毫秒闪烁一次。
// The LED displays the current operating status, which is invoked every 10 milliseconds, and the LED blinks every 200 milliseconds.  
void Bsp_Led_Show_State_Handle(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	static uint8_t led_count = 0;
	led_count++;
 8000228:	4b09      	ldr	r3, [pc, #36]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b07      	ldr	r3, [pc, #28]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 8000232:	701a      	strb	r2, [r3, #0]
	if (led_count > 20)
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b14      	cmp	r3, #20
 800023a:	d907      	bls.n	800024c <Bsp_Led_Show_State_Handle+0x28>
	{
		led_count = 0;
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
		LED_TOGGLE();
 8000242:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000246:	4803      	ldr	r0, [pc, #12]	; (8000254 <Bsp_Led_Show_State_Handle+0x30>)
 8000248:	f001 ff19 	bl	800207e <HAL_GPIO_TogglePin>
	}
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000094 	.word	0x20000094
 8000254:	40011000 	.word	0x40011000

08000258 <Bsp_Init>:


// The peripheral device is initialized  外设设备初始化
void Bsp_Init(void)
{
 8000258:	b590      	push	{r4, r7, lr}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 800025e:	2064      	movs	r0, #100	; 0x64
 8000260:	f001 f824 	bl	80012ac <HAL_Delay>
	char text[] = "Hello Yahboom";
 8000264:	4b0d      	ldr	r3, [pc, #52]	; (800029c <Bsp_Init+0x44>)
 8000266:	463c      	mov	r4, r7
 8000268:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800026a:	c407      	stmia	r4!, {r0, r1, r2}
 800026c:	8023      	strh	r3, [r4, #0]
	SSD1306_Init();
 800026e:	f000 fb17 	bl	80008a0 <SSD1306_Init>
	OLED_Draw_Line(text, 1, 1, 1);
 8000272:	4638      	mov	r0, r7
 8000274:	2301      	movs	r3, #1
 8000276:	2201      	movs	r2, #1
 8000278:	2101      	movs	r1, #1
 800027a:	f000 fae9 	bl	8000850 <OLED_Draw_Line>

	HAL_UART_Transmit(&huart1, (uint8_t*)text, sizeof(text), 1000);
 800027e:	4639      	mov	r1, r7
 8000280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000284:	220e      	movs	r2, #14
 8000286:	4806      	ldr	r0, [pc, #24]	; (80002a0 <Bsp_Init+0x48>)
 8000288:	f002 fb79 	bl	800297e <HAL_UART_Transmit>
	Beep_On_Time(50);
 800028c:	2032      	movs	r0, #50	; 0x32
 800028e:	f000 f88b 	bl	80003a8 <Beep_On_Time>
}
 8000292:	bf00      	nop
 8000294:	3714      	adds	r7, #20
 8000296:	46bd      	mov	sp, r7
 8000298:	bd90      	pop	{r4, r7, pc}
 800029a:	bf00      	nop
 800029c:	08003c04 	.word	0x08003c04
 80002a0:	200002b0 	.word	0x200002b0

080002a4 <Bsp_Loop>:


// main.c中循环调用此函数，避免多次修改main.c文件。
// This function is called in a loop in main.c to avoid multiple modifications to the main.c file
void Bsp_Loop(void)
{
 80002a4:	b590      	push	{r4, r7, lr}
 80002a6:	b08b      	sub	sp, #44	; 0x2c
 80002a8:	af00      	add	r7, sp, #0
	// Detect button down events   检测按键按下事件
	if (Key1_State(KEY_MODE_ONE_TIME))
 80002aa:	2001      	movs	r0, #1
 80002ac:	f000 fa6e 	bl	800078c <Key1_State>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d031      	beq.n	800031a <Bsp_Loop+0x76>
	{
		static int count = 0;
		count++;
 80002b6:	4b1e      	ldr	r3, [pc, #120]	; (8000330 <Bsp_Loop+0x8c>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	3301      	adds	r3, #1
 80002bc:	4a1c      	ldr	r2, [pc, #112]	; (8000330 <Bsp_Loop+0x8c>)
 80002be:	6013      	str	r3, [r2, #0]
		char line_one[] = "Hello Yahboom";
 80002c0:	4b1c      	ldr	r3, [pc, #112]	; (8000334 <Bsp_Loop+0x90>)
 80002c2:	f107 0418 	add.w	r4, r7, #24
 80002c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c8:	c407      	stmia	r4!, {r0, r1, r2}
 80002ca:	8023      	strh	r3, [r4, #0]
		char line_two[] = "Press KEY1";
 80002cc:	4a1a      	ldr	r2, [pc, #104]	; (8000338 <Bsp_Loop+0x94>)
 80002ce:	f107 030c 	add.w	r3, r7, #12
 80002d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d4:	c303      	stmia	r3!, {r0, r1}
 80002d6:	801a      	strh	r2, [r3, #0]
 80002d8:	3302      	adds	r3, #2
 80002da:	0c12      	lsrs	r2, r2, #16
 80002dc:	701a      	strb	r2, [r3, #0]
		char line_three[10];
		sprintf(line_three, "%d", count);
 80002de:	4b14      	ldr	r3, [pc, #80]	; (8000330 <Bsp_Loop+0x8c>)
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	463b      	mov	r3, r7
 80002e4:	4915      	ldr	r1, [pc, #84]	; (800033c <Bsp_Loop+0x98>)
 80002e6:	4618      	mov	r0, r3
 80002e8:	f003 f806 	bl	80032f8 <siprintf>
		OLED_Draw_Line(line_one, 1, 1, 0);
 80002ec:	f107 0018 	add.w	r0, r7, #24
 80002f0:	2300      	movs	r3, #0
 80002f2:	2201      	movs	r2, #1
 80002f4:	2101      	movs	r1, #1
 80002f6:	f000 faab 	bl	8000850 <OLED_Draw_Line>
		OLED_Draw_Line(line_two, 2, 0, 0);
 80002fa:	f107 000c 	add.w	r0, r7, #12
 80002fe:	2300      	movs	r3, #0
 8000300:	2200      	movs	r2, #0
 8000302:	2102      	movs	r1, #2
 8000304:	f000 faa4 	bl	8000850 <OLED_Draw_Line>
		OLED_Draw_Line(line_three, 3, 0, 1);
 8000308:	4638      	mov	r0, r7
 800030a:	2301      	movs	r3, #1
 800030c:	2200      	movs	r2, #0
 800030e:	2103      	movs	r1, #3
 8000310:	f000 fa9e 	bl	8000850 <OLED_Draw_Line>

		Beep_On_Time(50);
 8000314:	2032      	movs	r0, #50	; 0x32
 8000316:	f000 f847 	bl	80003a8 <Beep_On_Time>
	}

	Bsp_Led_Show_State_Handle();
 800031a:	f7ff ff83 	bl	8000224 <Bsp_Led_Show_State_Handle>
	// The buzzer automatically shuts down when times out   蜂鸣器超时自动关闭
	Beep_Timeout_Close_Handle();
 800031e:	f000 f883 	bl	8000428 <Beep_Timeout_Close_Handle>
	HAL_Delay(10);
 8000322:	200a      	movs	r0, #10
 8000324:	f000 ffc2 	bl	80012ac <HAL_Delay>
}
 8000328:	bf00      	nop
 800032a:	372c      	adds	r7, #44	; 0x2c
 800032c:	46bd      	mov	sp, r7
 800032e:	bd90      	pop	{r4, r7, pc}
 8000330:	20000098 	.word	0x20000098
 8000334:	08003c04 	.word	0x08003c04
 8000338:	08003c18 	.word	0x08003c18
 800033c:	08003c14 	.word	0x08003c14

08000340 <Beep_Set_Time>:
uint8_t beep_state = 0;

// 刷新蜂鸣器打开的时间
// Refreshes the buzzer time
static void Beep_Set_Time(uint16_t time)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	80fb      	strh	r3, [r7, #6]
	beep_on_time = time;
 800034a:	4a04      	ldr	r2, [pc, #16]	; (800035c <Beep_Set_Time+0x1c>)
 800034c:	88fb      	ldrh	r3, [r7, #6]
 800034e:	8013      	strh	r3, [r2, #0]
}
 8000350:	bf00      	nop
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	2000009c 	.word	0x2000009c

08000360 <Beep_Get_Time>:

// 获取当前蜂鸣器打开的剩余时间
// Gets the remaining time of the current buzzer on
static uint16_t Beep_Get_Time(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
	return beep_on_time;
 8000364:	4b02      	ldr	r3, [pc, #8]	; (8000370 <Beep_Get_Time+0x10>)
 8000366:	881b      	ldrh	r3, [r3, #0]
}
 8000368:	4618      	mov	r0, r3
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	2000009c 	.word	0x2000009c

08000374 <Beep_Set_State>:

// 刷新蜂鸣器的状态
// Refreshes the buzzer status
static void Beep_Set_State(uint8_t state)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
	beep_state = state;
 800037e:	4a04      	ldr	r2, [pc, #16]	; (8000390 <Beep_Set_State+0x1c>)
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	7013      	strb	r3, [r2, #0]
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	2000009e 	.word	0x2000009e

08000394 <Beep_Get_State>:

// 获取蜂鸣器的状态
// Gets the status of the buzzer
static uint8_t Beep_Get_State(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
	return beep_state;
 8000398:	4b02      	ldr	r3, [pc, #8]	; (80003a4 <Beep_Get_State+0x10>)
 800039a:	781b      	ldrb	r3, [r3, #0]
}
 800039c:	4618      	mov	r0, r3
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr
 80003a4:	2000009e 	.word	0x2000009e

080003a8 <Beep_On_Time>:

// 设置蜂鸣器开启时间，time=0时关闭，time=1时一直响，time>=10，延迟xx毫秒后自动关闭
// Set the buzzer start time. The buzzer is disabled when time is 0, keeps ringing when time is 1, and automatically shuts down after time>=10  
void Beep_On_Time(uint16_t time)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	80fb      	strh	r3, [r7, #6]
	if (time == BEEP_STATE_ON_ALWAYS)
 80003b2:	88fb      	ldrh	r3, [r7, #6]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d10b      	bne.n	80003d0 <Beep_On_Time+0x28>
	{
		Beep_Set_State(BEEP_STATE_ON_ALWAYS);
 80003b8:	2001      	movs	r0, #1
 80003ba:	f7ff ffdb 	bl	8000374 <Beep_Set_State>
		Beep_Set_Time(0);
 80003be:	2000      	movs	r0, #0
 80003c0:	f7ff ffbe 	bl	8000340 <Beep_Set_Time>
		BEEP_ON();
 80003c4:	2201      	movs	r2, #1
 80003c6:	2120      	movs	r1, #32
 80003c8:	4815      	ldr	r0, [pc, #84]	; (8000420 <Beep_On_Time+0x78>)
 80003ca:	f001 fe40 	bl	800204e <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
			Beep_Set_Time(time / 10);
			BEEP_ON();
		}
	}
}
 80003ce:	e022      	b.n	8000416 <Beep_On_Time+0x6e>
	else if (time == BEEP_STATE_OFF)
 80003d0:	88fb      	ldrh	r3, [r7, #6]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d10b      	bne.n	80003ee <Beep_On_Time+0x46>
		Beep_Set_State(BEEP_STATE_OFF);
 80003d6:	2000      	movs	r0, #0
 80003d8:	f7ff ffcc 	bl	8000374 <Beep_Set_State>
		Beep_Set_Time(0);
 80003dc:	2000      	movs	r0, #0
 80003de:	f7ff ffaf 	bl	8000340 <Beep_Set_Time>
		BEEP_OFF();
 80003e2:	2200      	movs	r2, #0
 80003e4:	2120      	movs	r1, #32
 80003e6:	480e      	ldr	r0, [pc, #56]	; (8000420 <Beep_On_Time+0x78>)
 80003e8:	f001 fe31 	bl	800204e <HAL_GPIO_WritePin>
}
 80003ec:	e013      	b.n	8000416 <Beep_On_Time+0x6e>
		if (time >= 10)
 80003ee:	88fb      	ldrh	r3, [r7, #6]
 80003f0:	2b09      	cmp	r3, #9
 80003f2:	d910      	bls.n	8000416 <Beep_On_Time+0x6e>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
 80003f4:	2002      	movs	r0, #2
 80003f6:	f7ff ffbd 	bl	8000374 <Beep_Set_State>
			Beep_Set_Time(time / 10);
 80003fa:	88fb      	ldrh	r3, [r7, #6]
 80003fc:	4a09      	ldr	r2, [pc, #36]	; (8000424 <Beep_On_Time+0x7c>)
 80003fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000402:	08db      	lsrs	r3, r3, #3
 8000404:	b29b      	uxth	r3, r3
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ff9a 	bl	8000340 <Beep_Set_Time>
			BEEP_ON();
 800040c:	2201      	movs	r2, #1
 800040e:	2120      	movs	r1, #32
 8000410:	4803      	ldr	r0, [pc, #12]	; (8000420 <Beep_On_Time+0x78>)
 8000412:	f001 fe1c 	bl	800204e <HAL_GPIO_WritePin>
}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40011000 	.word	0x40011000
 8000424:	cccccccd 	.word	0xcccccccd

08000428 <Beep_Timeout_Close_Handle>:

// 蜂鸣器超时自动关闭程序, 10毫秒调用一次 
// Buzzer timeout automatically shut down the program, 10 milliseconds to call once
void Beep_Timeout_Close_Handle(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	if (Beep_Get_State() == BEEP_STATE_ON_DELAY)
 800042c:	f7ff ffb2 	bl	8000394 <Beep_Get_State>
 8000430:	4603      	mov	r3, r0
 8000432:	2b02      	cmp	r3, #2
 8000434:	d113      	bne.n	800045e <Beep_Timeout_Close_Handle+0x36>
	{
		if (Beep_Get_Time())
 8000436:	f7ff ff93 	bl	8000360 <Beep_Get_Time>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d006      	beq.n	800044e <Beep_Timeout_Close_Handle+0x26>
		{
			beep_on_time--;
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <Beep_Timeout_Close_Handle+0x3c>)
 8000442:	881b      	ldrh	r3, [r3, #0]
 8000444:	3b01      	subs	r3, #1
 8000446:	b29a      	uxth	r2, r3
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <Beep_Timeout_Close_Handle+0x3c>)
 800044a:	801a      	strh	r2, [r3, #0]
		{
			BEEP_OFF();
			Beep_Set_State(BEEP_STATE_OFF);
		}
	}
}
 800044c:	e007      	b.n	800045e <Beep_Timeout_Close_Handle+0x36>
			BEEP_OFF();
 800044e:	2200      	movs	r2, #0
 8000450:	2120      	movs	r1, #32
 8000452:	4805      	ldr	r0, [pc, #20]	; (8000468 <Beep_Timeout_Close_Handle+0x40>)
 8000454:	f001 fdfb 	bl	800204e <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_OFF);
 8000458:	2000      	movs	r0, #0
 800045a:	f7ff ff8b 	bl	8000374 <Beep_Set_State>
}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	2000009c 	.word	0x2000009c
 8000468:	40011000 	.word	0x40011000

0800046c <Delay_For_Pin>:
#include <bsp_io_i2c.h>


// Microsecond delay  微秒级延迟
static void Delay_For_Pin(uint8_t nCount)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 8000476:	2300      	movs	r3, #0
 8000478:	73fb      	strb	r3, [r7, #15]
    for(; nCount != 0; nCount--)
 800047a:	e00b      	b.n	8000494 <Delay_For_Pin+0x28>
    {
        for (i = 0; i < 10; i++);
 800047c:	2300      	movs	r3, #0
 800047e:	73fb      	strb	r3, [r7, #15]
 8000480:	e002      	b.n	8000488 <Delay_For_Pin+0x1c>
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	3301      	adds	r3, #1
 8000486:	73fb      	strb	r3, [r7, #15]
 8000488:	7bfb      	ldrb	r3, [r7, #15]
 800048a:	2b09      	cmp	r3, #9
 800048c:	d9f9      	bls.n	8000482 <Delay_For_Pin+0x16>
    for(; nCount != 0; nCount--)
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	3b01      	subs	r3, #1
 8000492:	71fb      	strb	r3, [r7, #7]
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d1f0      	bne.n	800047c <Delay_For_Pin+0x10>
    }
}
 800049a:	bf00      	nop
 800049c:	bf00      	nop
 800049e:	3714      	adds	r7, #20
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
	...

080004a8 <IIC_Start>:
}


// Generates the IIC initiation signal  产生IIC起始信号
void IIC_Start(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	SDA_OUT();
 80004ac:	4b15      	ldr	r3, [pc, #84]	; (8000504 <IIC_Start+0x5c>)
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	4a14      	ldr	r2, [pc, #80]	; (8000504 <IIC_Start+0x5c>)
 80004b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80004b6:	6053      	str	r3, [r2, #4]
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <IIC_Start+0x5c>)
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	4a11      	ldr	r2, [pc, #68]	; (8000504 <IIC_Start+0x5c>)
 80004be:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80004c2:	6053      	str	r3, [r2, #4]
	IIC_SDA(1);
 80004c4:	2201      	movs	r2, #1
 80004c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ca:	480e      	ldr	r0, [pc, #56]	; (8000504 <IIC_Start+0x5c>)
 80004cc:	f001 fdbf 	bl	800204e <HAL_GPIO_WritePin>
	IIC_SCL(1);
 80004d0:	2201      	movs	r2, #1
 80004d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d6:	480b      	ldr	r0, [pc, #44]	; (8000504 <IIC_Start+0x5c>)
 80004d8:	f001 fdb9 	bl	800204e <HAL_GPIO_WritePin>
	delay_us(4);
 80004dc:	2004      	movs	r0, #4
 80004de:	f7ff ffc5 	bl	800046c <Delay_For_Pin>
 	IIC_SDA(0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004e8:	4806      	ldr	r0, [pc, #24]	; (8000504 <IIC_Start+0x5c>)
 80004ea:	f001 fdb0 	bl	800204e <HAL_GPIO_WritePin>
	delay_us(4);
 80004ee:	2004      	movs	r0, #4
 80004f0:	f7ff ffbc 	bl	800046c <Delay_For_Pin>
	IIC_SCL(0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004fa:	4802      	ldr	r0, [pc, #8]	; (8000504 <IIC_Start+0x5c>)
 80004fc:	f001 fda7 	bl	800204e <HAL_GPIO_WritePin>
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40010c00 	.word	0x40010c00

08000508 <IIC_Stop>:

// Generates an IIC stop signal  产生IIC停止信号
void IIC_Stop(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	SDA_OUT();
 800050c:	4b15      	ldr	r3, [pc, #84]	; (8000564 <IIC_Stop+0x5c>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	4a14      	ldr	r2, [pc, #80]	; (8000564 <IIC_Stop+0x5c>)
 8000512:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000516:	6053      	str	r3, [r2, #4]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <IIC_Stop+0x5c>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	4a11      	ldr	r2, [pc, #68]	; (8000564 <IIC_Stop+0x5c>)
 800051e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000522:	6053      	str	r3, [r2, #4]
	IIC_SCL(0);
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800052a:	480e      	ldr	r0, [pc, #56]	; (8000564 <IIC_Stop+0x5c>)
 800052c:	f001 fd8f 	bl	800204e <HAL_GPIO_WritePin>
	IIC_SDA(0);
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000536:	480b      	ldr	r0, [pc, #44]	; (8000564 <IIC_Stop+0x5c>)
 8000538:	f001 fd89 	bl	800204e <HAL_GPIO_WritePin>
 	delay_us(4);
 800053c:	2004      	movs	r0, #4
 800053e:	f7ff ff95 	bl	800046c <Delay_For_Pin>
	IIC_SCL(1);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000548:	4806      	ldr	r0, [pc, #24]	; (8000564 <IIC_Stop+0x5c>)
 800054a:	f001 fd80 	bl	800204e <HAL_GPIO_WritePin>
	IIC_SDA(1);
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <IIC_Stop+0x5c>)
 8000556:	f001 fd7a 	bl	800204e <HAL_GPIO_WritePin>
	delay_us(4);
 800055a:	2004      	movs	r0, #4
 800055c:	f7ff ff86 	bl	800046c <Delay_For_Pin>
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40010c00 	.word	0x40010c00

08000568 <IIC_Wait_Ack>:
// 等待应答信号到来
// 返回值：1，接收应答失败. 0，接收应答成功
// Wait for the answer signal to arrive.
// Return value: 1, receive and reply failed 0, receive and reply succeeded
uint8_t IIC_Wait_Ack(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
	uint8_t ucErrTime=0;
 800056e:	2300      	movs	r3, #0
 8000570:	71fb      	strb	r3, [r7, #7]
	SDA_IN();
 8000572:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <IIC_Wait_Ack+0x84>)
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	4a1d      	ldr	r2, [pc, #116]	; (80005ec <IIC_Wait_Ack+0x84>)
 8000578:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800057c:	6053      	str	r3, [r2, #4]
 800057e:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <IIC_Wait_Ack+0x84>)
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	4a1a      	ldr	r2, [pc, #104]	; (80005ec <IIC_Wait_Ack+0x84>)
 8000584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000588:	6053      	str	r3, [r2, #4]
	IIC_SDA(1);delay_us(1);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000590:	4816      	ldr	r0, [pc, #88]	; (80005ec <IIC_Wait_Ack+0x84>)
 8000592:	f001 fd5c 	bl	800204e <HAL_GPIO_WritePin>
 8000596:	2001      	movs	r0, #1
 8000598:	f7ff ff68 	bl	800046c <Delay_For_Pin>
	IIC_SCL(1);delay_us(1);
 800059c:	2201      	movs	r2, #1
 800059e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a2:	4812      	ldr	r0, [pc, #72]	; (80005ec <IIC_Wait_Ack+0x84>)
 80005a4:	f001 fd53 	bl	800204e <HAL_GPIO_WritePin>
 80005a8:	2001      	movs	r0, #1
 80005aa:	f7ff ff5f 	bl	800046c <Delay_For_Pin>
	while(READ_SDA)
 80005ae:	e009      	b.n	80005c4 <IIC_Wait_Ack+0x5c>
	{
		ucErrTime++;
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	3301      	adds	r3, #1
 80005b4:	71fb      	strb	r3, [r7, #7]
		if(ucErrTime>250)
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2bfa      	cmp	r3, #250	; 0xfa
 80005ba:	d903      	bls.n	80005c4 <IIC_Wait_Ack+0x5c>
		{
			IIC_Stop();
 80005bc:	f7ff ffa4 	bl	8000508 <IIC_Stop>
			return 1;
 80005c0:	2301      	movs	r3, #1
 80005c2:	e00e      	b.n	80005e2 <IIC_Wait_Ack+0x7a>
	while(READ_SDA)
 80005c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c8:	4808      	ldr	r0, [pc, #32]	; (80005ec <IIC_Wait_Ack+0x84>)
 80005ca:	f001 fd29 	bl	8002020 <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d1ed      	bne.n	80005b0 <IIC_Wait_Ack+0x48>
		}
	}
	IIC_SCL(0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005da:	4804      	ldr	r0, [pc, #16]	; (80005ec <IIC_Wait_Ack+0x84>)
 80005dc:	f001 fd37 	bl	800204e <HAL_GPIO_WritePin>
	return 0;
 80005e0:	2300      	movs	r3, #0
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40010c00 	.word	0x40010c00

080005f0 <IIC_Send_Byte>:
}

// IIC发送一个字节，返回从机有无应答，1，有应答，0，无应答
// The IIC sends a byte that returns whether the slave machine answered, 1, yes, 0, no
void IIC_Send_Byte(uint8_t txd)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
    uint8_t t;
	SDA_OUT();
 80005fa:	4b20      	ldr	r3, [pc, #128]	; (800067c <IIC_Send_Byte+0x8c>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	4a1f      	ldr	r2, [pc, #124]	; (800067c <IIC_Send_Byte+0x8c>)
 8000600:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000604:	6053      	str	r3, [r2, #4]
 8000606:	4b1d      	ldr	r3, [pc, #116]	; (800067c <IIC_Send_Byte+0x8c>)
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	4a1c      	ldr	r2, [pc, #112]	; (800067c <IIC_Send_Byte+0x8c>)
 800060c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000610:	6053      	str	r3, [r2, #4]
    IIC_SCL(0);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000618:	4818      	ldr	r0, [pc, #96]	; (800067c <IIC_Send_Byte+0x8c>)
 800061a:	f001 fd18 	bl	800204e <HAL_GPIO_WritePin>
    for(t=0;t<8;t++)
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
 8000622:	e023      	b.n	800066c <IIC_Send_Byte+0x7c>
    {
        IIC_SDA((txd&0x80)>>7);
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	09db      	lsrs	r3, r3, #7
 8000628:	b2db      	uxtb	r3, r3
 800062a:	461a      	mov	r2, r3
 800062c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000630:	4812      	ldr	r0, [pc, #72]	; (800067c <IIC_Send_Byte+0x8c>)
 8000632:	f001 fd0c 	bl	800204e <HAL_GPIO_WritePin>
        txd<<=1;
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	71fb      	strb	r3, [r7, #7]
		delay_us(2);
 800063c:	2002      	movs	r0, #2
 800063e:	f7ff ff15 	bl	800046c <Delay_For_Pin>
		IIC_SCL(1);
 8000642:	2201      	movs	r2, #1
 8000644:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000648:	480c      	ldr	r0, [pc, #48]	; (800067c <IIC_Send_Byte+0x8c>)
 800064a:	f001 fd00 	bl	800204e <HAL_GPIO_WritePin>
		delay_us(2);
 800064e:	2002      	movs	r0, #2
 8000650:	f7ff ff0c 	bl	800046c <Delay_For_Pin>
		IIC_SCL(0);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800065a:	4808      	ldr	r0, [pc, #32]	; (800067c <IIC_Send_Byte+0x8c>)
 800065c:	f001 fcf7 	bl	800204e <HAL_GPIO_WritePin>
		delay_us(2);
 8000660:	2002      	movs	r0, #2
 8000662:	f7ff ff03 	bl	800046c <Delay_For_Pin>
    for(t=0;t<8;t++)
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	3301      	adds	r3, #1
 800066a:	73fb      	strb	r3, [r7, #15]
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	2b07      	cmp	r3, #7
 8000670:	d9d8      	bls.n	8000624 <IIC_Send_Byte+0x34>
    }
}
 8000672:	bf00      	nop
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40010c00 	.word	0x40010c00

08000680 <IIC_Write_Byte>:
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
// IIC写一个字节, 返回值:0,正常, 其他,错误代码
// IIC writes a byte, return value :0, normal, otherwise, error code
uint8_t IIC_Write_Byte(uint8_t addr, uint8_t reg, uint8_t data)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
 800068a:	460b      	mov	r3, r1
 800068c:	71bb      	strb	r3, [r7, #6]
 800068e:	4613      	mov	r3, r2
 8000690:	717b      	strb	r3, [r7, #5]
	IIC_Start();
 8000692:	f7ff ff09 	bl	80004a8 <IIC_Start>
	IIC_Send_Byte((addr << 1) | 0);
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	b2db      	uxtb	r3, r3
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ffa7 	bl	80005f0 <IIC_Send_Byte>
	if (IIC_Wait_Ack())
 80006a2:	f7ff ff61 	bl	8000568 <IIC_Wait_Ack>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d003      	beq.n	80006b4 <IIC_Write_Byte+0x34>
	{
		IIC_Stop();
 80006ac:	f7ff ff2c 	bl	8000508 <IIC_Stop>
		return 1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	e015      	b.n	80006e0 <IIC_Write_Byte+0x60>
	}
	IIC_Send_Byte(reg);
 80006b4:	79bb      	ldrb	r3, [r7, #6]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ff9a 	bl	80005f0 <IIC_Send_Byte>
	IIC_Wait_Ack();
 80006bc:	f7ff ff54 	bl	8000568 <IIC_Wait_Ack>
	IIC_Send_Byte(data);
 80006c0:	797b      	ldrb	r3, [r7, #5]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff94 	bl	80005f0 <IIC_Send_Byte>
	if (IIC_Wait_Ack())
 80006c8:	f7ff ff4e 	bl	8000568 <IIC_Wait_Ack>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d003      	beq.n	80006da <IIC_Write_Byte+0x5a>
	{
		IIC_Stop();
 80006d2:	f7ff ff19 	bl	8000508 <IIC_Stop>
		return 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e002      	b.n	80006e0 <IIC_Write_Byte+0x60>
	}
	IIC_Stop();
 80006da:	f7ff ff15 	bl	8000508 <IIC_Stop>
	return 0;
 80006de:	2300      	movs	r3, #0
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <IIC_Write_Len>:

// IIC连续写，buf为要写的数据地址。返回值:0,正常，其他,错误代码
// IIC continuous write, buF is the address of the data to be written.  Return value :0, normal, otherwise, error code
uint8_t IIC_Write_Len(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *buf)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	4603      	mov	r3, r0
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	460b      	mov	r3, r1
 80006f6:	71bb      	strb	r3, [r7, #6]
 80006f8:	4613      	mov	r3, r2
 80006fa:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	IIC_Start();
 80006fc:	f7ff fed4 	bl	80004a8 <IIC_Start>
	IIC_Send_Byte((addr << 1) | 0);
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	b2db      	uxtb	r3, r3
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff72 	bl	80005f0 <IIC_Send_Byte>
	if (IIC_Wait_Ack())
 800070c:	f7ff ff2c 	bl	8000568 <IIC_Wait_Ack>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d003      	beq.n	800071e <IIC_Write_Len+0x36>
	{
		IIC_Stop();
 8000716:	f7ff fef7 	bl	8000508 <IIC_Stop>
		return 1;
 800071a:	2301      	movs	r3, #1
 800071c:	e022      	b.n	8000764 <IIC_Write_Len+0x7c>
	}
	IIC_Send_Byte(reg);
 800071e:	79bb      	ldrb	r3, [r7, #6]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff65 	bl	80005f0 <IIC_Send_Byte>
	IIC_Wait_Ack();
 8000726:	f7ff ff1f 	bl	8000568 <IIC_Wait_Ack>
	for (i = 0; i < len; i++)
 800072a:	2300      	movs	r3, #0
 800072c:	73fb      	strb	r3, [r7, #15]
 800072e:	e012      	b.n	8000756 <IIC_Write_Len+0x6e>
	{
		IIC_Send_Byte(buf[i]);
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	683a      	ldr	r2, [r7, #0]
 8000734:	4413      	add	r3, r2
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff59 	bl	80005f0 <IIC_Send_Byte>
		if (IIC_Wait_Ack())
 800073e:	f7ff ff13 	bl	8000568 <IIC_Wait_Ack>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d003      	beq.n	8000750 <IIC_Write_Len+0x68>
		{
			IIC_Stop();
 8000748:	f7ff fede 	bl	8000508 <IIC_Stop>
			return 1;
 800074c:	2301      	movs	r3, #1
 800074e:	e009      	b.n	8000764 <IIC_Write_Len+0x7c>
	for (i = 0; i < len; i++)
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	3301      	adds	r3, #1
 8000754:	73fb      	strb	r3, [r7, #15]
 8000756:	7bfa      	ldrb	r2, [r7, #15]
 8000758:	797b      	ldrb	r3, [r7, #5]
 800075a:	429a      	cmp	r2, r3
 800075c:	d3e8      	bcc.n	8000730 <IIC_Write_Len+0x48>
		}
	}
	IIC_Stop();
 800075e:	f7ff fed3 	bl	8000508 <IIC_Stop>
	return 0;
 8000762:	2300      	movs	r3, #0
}
 8000764:	4618      	mov	r0, r3
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <Key1_is_Press>:


// 判断按键是否被按下，按下返回KEY_PRESS，松开返回KEY_RELEASE
// Determine if the key is pressed, press to return KEY_PRESS, release to return KEY_RELEASE  
static uint8_t Key1_is_Press(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin))
 8000770:	2104      	movs	r1, #4
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <Key1_is_Press+0x1c>)
 8000774:	f001 fc54 	bl	8002020 <HAL_GPIO_ReadPin>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d101      	bne.n	8000782 <Key1_is_Press+0x16>
	{
		return KEY_PRESS; // 如果按键被按下，则返回KEY_PRESS
 800077e:	2301      	movs	r3, #1
 8000780:	e000      	b.n	8000784 <Key1_is_Press+0x18>
	}
	return KEY_RELEASE;   // 如果按键是松开状态，则返回KEY_RELEASE
 8000782:	2300      	movs	r3, #0
}
 8000784:	4618      	mov	r0, r3
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40011400 	.word	0x40011400

0800078c <Key1_State>:
// 读取按键K1的状态，按下返回KEY_PRESS，松开返回KEY_RELEASE. 
// mode:设置模式，0：按下一直返回KEY_PRESS；1：按下只返回一次KEY_PRESS
// Read the state of key K1, press down to return KEY_PRESS, release to return key_release. 
// mode: setting mode, 0: press down to return KEY_PRESS;  1: KEY_PRESS is returned only once  
uint8_t Key1_State(uint8_t mode)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	static uint16_t key1_state = 0;

	if (Key1_is_Press() == KEY_PRESS)
 8000796:	f7ff ffe9 	bl	800076c <Key1_is_Press>
 800079a:	4603      	mov	r3, r0
 800079c:	2b01      	cmp	r3, #1
 800079e:	d10e      	bne.n	80007be <Key1_State+0x32>
	{
		if (key1_state < (mode + 1) * 2)
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <Key1_State+0x50>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	3301      	adds	r3, #1
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	429a      	cmp	r2, r3
 80007ae:	da09      	bge.n	80007c4 <Key1_State+0x38>
		{
			key1_state++;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <Key1_State+0x50>)
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <Key1_State+0x50>)
 80007ba:	801a      	strh	r2, [r3, #0]
 80007bc:	e002      	b.n	80007c4 <Key1_State+0x38>
		}
	}
	else
	{
		key1_state = 0;
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <Key1_State+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	801a      	strh	r2, [r3, #0]
	}
	if (key1_state == 2)
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <Key1_State+0x50>)
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	2b02      	cmp	r3, #2
 80007ca:	d101      	bne.n	80007d0 <Key1_State+0x44>
	{
		return KEY_PRESS;
 80007cc:	2301      	movs	r3, #1
 80007ce:	e000      	b.n	80007d2 <Key1_State+0x46>
	}
	return KEY_RELEASE;
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000a0 	.word	0x200000a0

080007e0 <OLED_Clear>:
#include "bsp_oled.h"
#include "bsp_ssd1306.h"

/* OLED Clear 清除屏幕 */
void OLED_Clear(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80007e4:	2000      	movs	r0, #0
 80007e6:	f000 f937 	bl	8000a58 <SSD1306_Fill>
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}

080007ee <OLED_Refresh>:

/* OLED Refresh 刷新屏幕 */
void OLED_Refresh(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	af00      	add	r7, sp, #0
    SSD1306_UpdateScreen();
 80007f2:	f000 f903 	bl	80009fc <SSD1306_UpdateScreen>
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <OLED_Draw_String>:

/* Draw String 写入字符 */
void OLED_Draw_String(char *data, uint8_t x, uint8_t y, uint8_t clear, uint8_t refresh)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	4608      	mov	r0, r1
 8000806:	4611      	mov	r1, r2
 8000808:	461a      	mov	r2, r3
 800080a:	4603      	mov	r3, r0
 800080c:	70fb      	strb	r3, [r7, #3]
 800080e:	460b      	mov	r3, r1
 8000810:	70bb      	strb	r3, [r7, #2]
 8000812:	4613      	mov	r3, r2
 8000814:	707b      	strb	r3, [r7, #1]
    if (clear) OLED_Clear();
 8000816:	787b      	ldrb	r3, [r7, #1]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <OLED_Draw_String+0x24>
 800081c:	f7ff ffe0 	bl	80007e0 <OLED_Clear>
    SSD1306_GotoXY(x, y);
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	b29b      	uxth	r3, r3
 8000824:	78ba      	ldrb	r2, [r7, #2]
 8000826:	b292      	uxth	r2, r2
 8000828:	4611      	mov	r1, r2
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f98a 	bl	8000b44 <SSD1306_GotoXY>
    SSD1306_Puts(data, &Font_7x10, SSD1306_COLOR_WHITE);
 8000830:	2201      	movs	r2, #1
 8000832:	4906      	ldr	r1, [pc, #24]	; (800084c <OLED_Draw_String+0x50>)
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f000 fa1b 	bl	8000c70 <SSD1306_Puts>
    if (refresh) OLED_Refresh();
 800083a:	7c3b      	ldrb	r3, [r7, #16]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <OLED_Draw_String+0x48>
 8000840:	f7ff ffd5 	bl	80007ee <OLED_Refresh>
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000000 	.word	0x20000000

08000850 <OLED_Draw_Line>:

/* Draw Line 写入一行字符 */
void OLED_Draw_Line(char *data, uint8_t line, uint8_t clear, uint8_t refresh)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af02      	add	r7, sp, #8
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	4608      	mov	r0, r1
 800085a:	4611      	mov	r1, r2
 800085c:	461a      	mov	r2, r3
 800085e:	4603      	mov	r3, r0
 8000860:	70fb      	strb	r3, [r7, #3]
 8000862:	460b      	mov	r3, r1
 8000864:	70bb      	strb	r3, [r7, #2]
 8000866:	4613      	mov	r3, r2
 8000868:	707b      	strb	r3, [r7, #1]
    if (line > 0 && line <= 3)
 800086a:	78fb      	ldrb	r3, [r7, #3]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d012      	beq.n	8000896 <OLED_Draw_Line+0x46>
 8000870:	78fb      	ldrb	r3, [r7, #3]
 8000872:	2b03      	cmp	r3, #3
 8000874:	d80f      	bhi.n	8000896 <OLED_Draw_Line+0x46>
    {
        OLED_Draw_String(data, 0, 10 * (line - 1), clear, refresh);
 8000876:	78fb      	ldrb	r3, [r7, #3]
 8000878:	461a      	mov	r2, r3
 800087a:	0092      	lsls	r2, r2, #2
 800087c:	4413      	add	r3, r2
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	b2db      	uxtb	r3, r3
 8000882:	3b0a      	subs	r3, #10
 8000884:	b2da      	uxtb	r2, r3
 8000886:	78b9      	ldrb	r1, [r7, #2]
 8000888:	787b      	ldrb	r3, [r7, #1]
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	460b      	mov	r3, r1
 800088e:	2100      	movs	r1, #0
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff ffb3 	bl	80007fc <OLED_Draw_String>
    }
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <SSD1306_Init>:
	return temp;
}


uint8_t SSD1306_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
    /* A little delay */
    uint32_t p = 2500;
 80008a6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80008aa:	607b      	str	r3, [r7, #4]
    while (p > 0)
 80008ac:	e002      	b.n	80008b4 <SSD1306_Init+0x14>
        p--;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
    while (p > 0)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1f9      	bne.n	80008ae <SSD1306_Init+0xe>

    /* Init LCD */
    SSD1306_WRITECOMMAND(0xae);		      // display off
 80008ba:	22ae      	movs	r2, #174	; 0xae
 80008bc:	2100      	movs	r1, #0
 80008be:	203c      	movs	r0, #60	; 0x3c
 80008c0:	f000 fa11 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xa6);          // Set Normal Display (default)
 80008c4:	22a6      	movs	r2, #166	; 0xa6
 80008c6:	2100      	movs	r1, #0
 80008c8:	203c      	movs	r0, #60	; 0x3c
 80008ca:	f000 fa0c 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xAE);        	// DISPLAYOFF
 80008ce:	22ae      	movs	r2, #174	; 0xae
 80008d0:	2100      	movs	r1, #0
 80008d2:	203c      	movs	r0, #60	; 0x3c
 80008d4:	f000 fa07 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xD5);        	// SETDISPLAYCLOCKDIV
 80008d8:	22d5      	movs	r2, #213	; 0xd5
 80008da:	2100      	movs	r1, #0
 80008dc:	203c      	movs	r0, #60	; 0x3c
 80008de:	f000 fa02 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x80);        	// the suggested ratio 0x80
 80008e2:	2280      	movs	r2, #128	; 0x80
 80008e4:	2100      	movs	r1, #0
 80008e6:	203c      	movs	r0, #60	; 0x3c
 80008e8:	f000 f9fd 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xA8);        	// SSD1306_SETMULTIPLEX
 80008ec:	22a8      	movs	r2, #168	; 0xa8
 80008ee:	2100      	movs	r1, #0
 80008f0:	203c      	movs	r0, #60	; 0x3c
 80008f2:	f000 f9f8 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x1F);
 80008f6:	221f      	movs	r2, #31
 80008f8:	2100      	movs	r1, #0
 80008fa:	203c      	movs	r0, #60	; 0x3c
 80008fc:	f000 f9f3 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xD3);        	// SETDISPLAYOFFSET
 8000900:	22d3      	movs	r2, #211	; 0xd3
 8000902:	2100      	movs	r1, #0
 8000904:	203c      	movs	r0, #60	; 0x3c
 8000906:	f000 f9ee 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x00);         	// no offset
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	203c      	movs	r0, #60	; 0x3c
 8000910:	f000 f9e9 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x40 | 0x0);  	// SETSTARTLINE
 8000914:	2240      	movs	r2, #64	; 0x40
 8000916:	2100      	movs	r1, #0
 8000918:	203c      	movs	r0, #60	; 0x3c
 800091a:	f000 f9e4 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x8D);        	// CHARGEPUMP
 800091e:	228d      	movs	r2, #141	; 0x8d
 8000920:	2100      	movs	r1, #0
 8000922:	203c      	movs	r0, #60	; 0x3c
 8000924:	f000 f9df 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x14);          // 0x014 enable, 0x010 disable
 8000928:	2214      	movs	r2, #20
 800092a:	2100      	movs	r1, #0
 800092c:	203c      	movs	r0, #60	; 0x3c
 800092e:	f000 f9da 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x20);          // com pin HW config, sequential com pin config (bit 4), disable left/right remap (bit 5),
 8000932:	2220      	movs	r2, #32
 8000934:	2100      	movs	r1, #0
 8000936:	203c      	movs	r0, #60	; 0x3c
 8000938:	f000 f9d5 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x02);          // 0x12 //128x32 OLED: 0x002,  128x32 OLED 0x012
 800093c:	2202      	movs	r2, #2
 800093e:	2100      	movs	r1, #0
 8000940:	203c      	movs	r0, #60	; 0x3c
 8000942:	f000 f9d0 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xa1);          // segment remap a0/a1
 8000946:	22a1      	movs	r2, #161	; 0xa1
 8000948:	2100      	movs	r1, #0
 800094a:	203c      	movs	r0, #60	; 0x3c
 800094c:	f000 f9cb 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xc8);          // c0: scan dir normal, c8: reverse
 8000950:	22c8      	movs	r2, #200	; 0xc8
 8000952:	2100      	movs	r1, #0
 8000954:	203c      	movs	r0, #60	; 0x3c
 8000956:	f000 f9c6 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xda);
 800095a:	22da      	movs	r2, #218	; 0xda
 800095c:	2100      	movs	r1, #0
 800095e:	203c      	movs	r0, #60	; 0x3c
 8000960:	f000 f9c1 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x02);          // com pin HW config, sequential com pin config (bit 4), disable left/right remap (bit 5)
 8000964:	2202      	movs	r2, #2
 8000966:	2100      	movs	r1, #0
 8000968:	203c      	movs	r0, #60	; 0x3c
 800096a:	f000 f9bc 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x81);
 800096e:	2281      	movs	r2, #129	; 0x81
 8000970:	2100      	movs	r1, #0
 8000972:	203c      	movs	r0, #60	; 0x3c
 8000974:	f000 f9b7 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xcf);          // [2] set contrast control
 8000978:	22cf      	movs	r2, #207	; 0xcf
 800097a:	2100      	movs	r1, #0
 800097c:	203c      	movs	r0, #60	; 0x3c
 800097e:	f000 f9b2 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xd9);
 8000982:	22d9      	movs	r2, #217	; 0xd9
 8000984:	2100      	movs	r1, #0
 8000986:	203c      	movs	r0, #60	; 0x3c
 8000988:	f000 f9ad 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xf1);          // [2] pre-charge period 0x022/f1
 800098c:	22f1      	movs	r2, #241	; 0xf1
 800098e:	2100      	movs	r1, #0
 8000990:	203c      	movs	r0, #60	; 0x3c
 8000992:	f000 f9a8 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xdb);
 8000996:	22db      	movs	r2, #219	; 0xdb
 8000998:	2100      	movs	r1, #0
 800099a:	203c      	movs	r0, #60	; 0x3c
 800099c:	f000 f9a3 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x40);          // vcomh deselect level
 80009a0:	2240      	movs	r2, #64	; 0x40
 80009a2:	2100      	movs	r1, #0
 80009a4:	203c      	movs	r0, #60	; 0x3c
 80009a6:	f000 f99e 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x2e);          // Disable scroll
 80009aa:	222e      	movs	r2, #46	; 0x2e
 80009ac:	2100      	movs	r1, #0
 80009ae:	203c      	movs	r0, #60	; 0x3c
 80009b0:	f000 f999 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xa4);          // output ram to display
 80009b4:	22a4      	movs	r2, #164	; 0xa4
 80009b6:	2100      	movs	r1, #0
 80009b8:	203c      	movs	r0, #60	; 0x3c
 80009ba:	f000 f994 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xa6);          // none inverted normal display mode
 80009be:	22a6      	movs	r2, #166	; 0xa6
 80009c0:	2100      	movs	r1, #0
 80009c2:	203c      	movs	r0, #60	; 0x3c
 80009c4:	f000 f98f 	bl	8000ce6 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0xaf);          // display on
 80009c8:	22af      	movs	r2, #175	; 0xaf
 80009ca:	2100      	movs	r1, #0
 80009cc:	203c      	movs	r0, #60	; 0x3c
 80009ce:	f000 f98a 	bl	8000ce6 <ssd1306_I2C_Write>
    
    /* Clear screen */
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f000 f840 	bl	8000a58 <SSD1306_Fill>

    /* Update screen */
    SSD1306_UpdateScreen();
 80009d8:	f000 f810 	bl	80009fc <SSD1306_UpdateScreen>

    /* Set default values */
    SSD1306.CurrentX = 0;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <SSD1306_Init+0x158>)
 80009de:	2200      	movs	r2, #0
 80009e0:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <SSD1306_Init+0x158>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	805a      	strh	r2, [r3, #2]

    /* Initialized OK */
    SSD1306.Initialized = 1;
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <SSD1306_Init+0x158>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	715a      	strb	r2, [r3, #5]

    /* Return OK */
    return 1;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200002a4 	.word	0x200002a4

080009fc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
    uint8_t m;

    for (m = 0; m < 8; m++)
 8000a02:	2300      	movs	r3, #0
 8000a04:	71fb      	strb	r3, [r7, #7]
 8000a06:	e01d      	b.n	8000a44 <SSD1306_UpdateScreen+0x48>
    {
        SSD1306_WRITECOMMAND(0xB0 + m);
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	3b50      	subs	r3, #80	; 0x50
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	461a      	mov	r2, r3
 8000a10:	2100      	movs	r1, #0
 8000a12:	203c      	movs	r0, #60	; 0x3c
 8000a14:	f000 f967 	bl	8000ce6 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x00);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	203c      	movs	r0, #60	; 0x3c
 8000a1e:	f000 f962 	bl	8000ce6 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x10);
 8000a22:	2210      	movs	r2, #16
 8000a24:	2100      	movs	r1, #0
 8000a26:	203c      	movs	r0, #60	; 0x3c
 8000a28:	f000 f95d 	bl	8000ce6 <ssd1306_I2C_Write>

        /* Write multi data */
        ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	01db      	lsls	r3, r3, #7
 8000a30:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <SSD1306_UpdateScreen+0x58>)
 8000a32:	441a      	add	r2, r3
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	2140      	movs	r1, #64	; 0x40
 8000a38:	203c      	movs	r0, #60	; 0x3c
 8000a3a:	f000 f93e 	bl	8000cba <ssd1306_I2C_WriteMulti>
    for (m = 0; m < 8; m++)
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	3301      	adds	r3, #1
 8000a42:	71fb      	strb	r3, [r7, #7]
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	2b07      	cmp	r3, #7
 8000a48:	d9de      	bls.n	8000a08 <SSD1306_UpdateScreen+0xc>
    }
}
 8000a4a:	bf00      	nop
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200000a4 	.word	0x200000a4

08000a58 <SSD1306_Fill>:
        SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
    }
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d101      	bne.n	8000a6c <SSD1306_Fill+0x14>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	e000      	b.n	8000a6e <SSD1306_Fill+0x16>
 8000a6c:	23ff      	movs	r3, #255	; 0xff
 8000a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a72:	4619      	mov	r1, r3
 8000a74:	4803      	ldr	r0, [pc, #12]	; (8000a84 <SSD1306_Fill+0x2c>)
 8000a76:	f002 fc37 	bl	80032e8 <memset>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200000a4 	.word	0x200000a4

08000a88 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	80fb      	strh	r3, [r7, #6]
 8000a92:	460b      	mov	r3, r1
 8000a94:	80bb      	strh	r3, [r7, #4]
 8000a96:	4613      	mov	r3, r2
 8000a98:	70fb      	strb	r3, [r7, #3]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	2b7f      	cmp	r3, #127	; 0x7f
 8000a9e:	d848      	bhi.n	8000b32 <SSD1306_DrawPixel+0xaa>
 8000aa0:	88bb      	ldrh	r3, [r7, #4]
 8000aa2:	2b1f      	cmp	r3, #31
 8000aa4:	d845      	bhi.n	8000b32 <SSD1306_DrawPixel+0xaa>
    {
        return; // 出错，超出范围
    }

    /* 检查像素是否倒置 */
    if (SSD1306.Inverted)
 8000aa6:	4b25      	ldr	r3, [pc, #148]	; (8000b3c <SSD1306_DrawPixel+0xb4>)
 8000aa8:	791b      	ldrb	r3, [r3, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d006      	beq.n	8000abc <SSD1306_DrawPixel+0x34>
    {
        color = (SSD1306_COLOR_t)!color;
 8000aae:	78fb      	ldrb	r3, [r7, #3]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	bf0c      	ite	eq
 8000ab4:	2301      	moveq	r3, #1
 8000ab6:	2300      	movne	r3, #0
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	70fb      	strb	r3, [r7, #3]
    }

    /* 设置颜色 */
    if (color == SSD1306_COLOR_WHITE)
 8000abc:	78fb      	ldrb	r3, [r7, #3]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d11a      	bne.n	8000af8 <SSD1306_DrawPixel+0x70>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000ac2:	88fa      	ldrh	r2, [r7, #6]
 8000ac4:	88bb      	ldrh	r3, [r7, #4]
 8000ac6:	08db      	lsrs	r3, r3, #3
 8000ac8:	b298      	uxth	r0, r3
 8000aca:	4603      	mov	r3, r0
 8000acc:	01db      	lsls	r3, r3, #7
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a1b      	ldr	r2, [pc, #108]	; (8000b40 <SSD1306_DrawPixel+0xb8>)
 8000ad2:	5cd3      	ldrb	r3, [r2, r3]
 8000ad4:	b25a      	sxtb	r2, r3
 8000ad6:	88bb      	ldrh	r3, [r7, #4]
 8000ad8:	f003 0307 	and.w	r3, r3, #7
 8000adc:	2101      	movs	r1, #1
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	b259      	sxtb	r1, r3
 8000ae8:	88fa      	ldrh	r2, [r7, #6]
 8000aea:	4603      	mov	r3, r0
 8000aec:	01db      	lsls	r3, r3, #7
 8000aee:	4413      	add	r3, r2
 8000af0:	b2c9      	uxtb	r1, r1
 8000af2:	4a13      	ldr	r2, [pc, #76]	; (8000b40 <SSD1306_DrawPixel+0xb8>)
 8000af4:	54d1      	strb	r1, [r2, r3]
 8000af6:	e01d      	b.n	8000b34 <SSD1306_DrawPixel+0xac>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000af8:	88fa      	ldrh	r2, [r7, #6]
 8000afa:	88bb      	ldrh	r3, [r7, #4]
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	b298      	uxth	r0, r3
 8000b00:	4603      	mov	r3, r0
 8000b02:	01db      	lsls	r3, r3, #7
 8000b04:	4413      	add	r3, r2
 8000b06:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <SSD1306_DrawPixel+0xb8>)
 8000b08:	5cd3      	ldrb	r3, [r2, r3]
 8000b0a:	b25a      	sxtb	r2, r3
 8000b0c:	88bb      	ldrh	r3, [r7, #4]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	2101      	movs	r1, #1
 8000b14:	fa01 f303 	lsl.w	r3, r1, r3
 8000b18:	b25b      	sxtb	r3, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	b25b      	sxtb	r3, r3
 8000b1e:	4013      	ands	r3, r2
 8000b20:	b259      	sxtb	r1, r3
 8000b22:	88fa      	ldrh	r2, [r7, #6]
 8000b24:	4603      	mov	r3, r0
 8000b26:	01db      	lsls	r3, r3, #7
 8000b28:	4413      	add	r3, r2
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <SSD1306_DrawPixel+0xb8>)
 8000b2e:	54d1      	strb	r1, [r2, r3]
 8000b30:	e000      	b.n	8000b34 <SSD1306_DrawPixel+0xac>
        return; // 出错，超出范围
 8000b32:	bf00      	nop
    }
}
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	200002a4 	.word	0x200002a4
 8000b40:	200000a4 	.word	0x200000a4

08000b44 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	460a      	mov	r2, r1
 8000b4e:	80fb      	strh	r3, [r7, #6]
 8000b50:	4613      	mov	r3, r2
 8000b52:	80bb      	strh	r3, [r7, #4]
    SSD1306.CurrentX = x;
 8000b54:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <SSD1306_GotoXY+0x28>)
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	8013      	strh	r3, [r2, #0]
    SSD1306.CurrentY = y;
 8000b5a:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <SSD1306_GotoXY+0x28>)
 8000b5c:	88bb      	ldrh	r3, [r7, #4]
 8000b5e:	8053      	strh	r3, [r2, #2]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	200002a4 	.word	0x200002a4

08000b70 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t *Font, SSD1306_COLOR_t color)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	71bb      	strb	r3, [r7, #6]
    uint32_t i, b, j;

    if (
        SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000b80:	4b3a      	ldr	r3, [pc, #232]	; (8000c6c <SSD1306_Putc+0xfc>)
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
    if (
 8000b8c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b8e:	dc07      	bgt.n	8000ba0 <SSD1306_Putc+0x30>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight))
 8000b90:	4b36      	ldr	r3, [pc, #216]	; (8000c6c <SSD1306_Putc+0xfc>)
 8000b92:	885b      	ldrh	r3, [r3, #2]
 8000b94:	461a      	mov	r2, r3
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	785b      	ldrb	r3, [r3, #1]
 8000b9a:	4413      	add	r3, r2
        SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000b9c:	2b1f      	cmp	r3, #31
 8000b9e:	dd01      	ble.n	8000ba4 <SSD1306_Putc+0x34>
    {
        return 0; // 出错，超出范围
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	e05e      	b.n	8000c62 <SSD1306_Putc+0xf2>
    }

    for (i = 0; i < Font->FontHeight; i++)
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	e04b      	b.n	8000c42 <SSD1306_Putc+0xd2>
    {
        b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685a      	ldr	r2, [r3, #4]
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	3b20      	subs	r3, #32
 8000bb2:	6839      	ldr	r1, [r7, #0]
 8000bb4:	7849      	ldrb	r1, [r1, #1]
 8000bb6:	fb01 f303 	mul.w	r3, r1, r3
 8000bba:	4619      	mov	r1, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	440b      	add	r3, r1
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	4413      	add	r3, r2
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	60fb      	str	r3, [r7, #12]
        for (j = 0; j < Font->FontWidth; j++)
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	e030      	b.n	8000c30 <SSD1306_Putc+0xc0>
        {
            if ((b << j) & 0x8000)
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d010      	beq.n	8000c00 <SSD1306_Putc+0x90>
            {
                SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)color);
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <SSD1306_Putc+0xfc>)
 8000be0:	881a      	ldrh	r2, [r3, #0]
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	4413      	add	r3, r2
 8000be8:	b298      	uxth	r0, r3
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <SSD1306_Putc+0xfc>)
 8000bec:	885a      	ldrh	r2, [r3, #2]
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	4413      	add	r3, r2
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	79ba      	ldrb	r2, [r7, #6]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f7ff ff45 	bl	8000a88 <SSD1306_DrawPixel>
 8000bfe:	e014      	b.n	8000c2a <SSD1306_Putc+0xba>
            }
            else
            {
                SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <SSD1306_Putc+0xfc>)
 8000c02:	881a      	ldrh	r2, [r3, #0]
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	4413      	add	r3, r2
 8000c0a:	b298      	uxth	r0, r3
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <SSD1306_Putc+0xfc>)
 8000c0e:	885a      	ldrh	r2, [r3, #2]
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	4413      	add	r3, r2
 8000c16:	b299      	uxth	r1, r3
 8000c18:	79bb      	ldrb	r3, [r7, #6]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	bf0c      	ite	eq
 8000c1e:	2301      	moveq	r3, #1
 8000c20:	2300      	movne	r3, #0
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	461a      	mov	r2, r3
 8000c26:	f7ff ff2f 	bl	8000a88 <SSD1306_DrawPixel>
        for (j = 0; j < Font->FontWidth; j++)
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d3c8      	bcc.n	8000bce <SSD1306_Putc+0x5e>
    for (i = 0; i < Font->FontHeight; i++)
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	785b      	ldrb	r3, [r3, #1]
 8000c46:	461a      	mov	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d3ad      	bcc.n	8000baa <SSD1306_Putc+0x3a>
            }
        }
    }

    /* Increase pointer */
    SSD1306.CurrentX += Font->FontWidth;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <SSD1306_Putc+0xfc>)
 8000c50:	881a      	ldrh	r2, [r3, #0]
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	4413      	add	r3, r2
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <SSD1306_Putc+0xfc>)
 8000c5e:	801a      	strh	r2, [r3, #0]

    /* Return character written */
    return ch;
 8000c60:	79fb      	ldrb	r3, [r7, #7]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200002a4 	.word	0x200002a4

08000c70 <SSD1306_Puts>:

char SSD1306_Puts(char *str, FontDef_t *Font, SSD1306_COLOR_t color)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	71fb      	strb	r3, [r7, #7]
    /* Write characters */
    while (*str)
 8000c7e:	e012      	b.n	8000ca6 <SSD1306_Puts+0x36>
    {
        /* Write character by character */
        if (SSD1306_Putc(*str, Font, color) != *str)
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	79fa      	ldrb	r2, [r7, #7]
 8000c86:	68b9      	ldr	r1, [r7, #8]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff71 	bl	8000b70 <SSD1306_Putc>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	461a      	mov	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d002      	beq.n	8000ca0 <SSD1306_Puts+0x30>
        {
            /* Return error */
            return *str;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	e008      	b.n	8000cb2 <SSD1306_Puts+0x42>
        }

        /* Increase string pointer */
        str++;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	60fb      	str	r3, [r7, #12]
    while (*str)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1e8      	bne.n	8000c80 <SSD1306_Puts+0x10>
    }

    /* Everything OK, zero should be returned */
    return *str;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <ssd1306_I2C_WriteMulti>:
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t *data, uint16_t count)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	603a      	str	r2, [r7, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	71fb      	strb	r3, [r7, #7]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	71bb      	strb	r3, [r7, #6]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	80bb      	strh	r3, [r7, #4]
    IIC_Write_Len(address, reg, count, data);
 8000cd0:	88bb      	ldrh	r3, [r7, #4]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	79b9      	ldrb	r1, [r7, #6]
 8000cd6:	79f8      	ldrb	r0, [r7, #7]
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	f7ff fd05 	bl	80006e8 <IIC_Write_Len>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	71fb      	strb	r3, [r7, #7]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	71bb      	strb	r3, [r7, #6]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	717b      	strb	r3, [r7, #5]
    IIC_Write_Byte(address, reg, data);
 8000cf8:	797a      	ldrb	r2, [r7, #5]
 8000cfa:	79b9      	ldrb	r1, [r7, #6]
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fcbe 	bl	8000680 <IIC_Write_Byte>
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_DMA_Init+0x38>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <MX_DMA_Init+0x38>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6153      	str	r3, [r2, #20]
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_DMA_Init+0x38>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	200e      	movs	r0, #14
 8000d30:	f000 fbb7 	bl	80014a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000d34:	200e      	movs	r0, #14
 8000d36:	f000 fbd0 	bl	80014da <HAL_NVIC_EnableIRQ>

}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40021000 	.word	0x40021000

08000d48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	4b34      	ldr	r3, [pc, #208]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a33      	ldr	r2, [pc, #204]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d62:	f043 0310 	orr.w	r3, r3, #16
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b31      	ldr	r3, [pc, #196]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0310 	and.w	r3, r3, #16
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d74:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a2d      	ldr	r2, [pc, #180]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d7a:	f043 0320 	orr.w	r3, r3, #32
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b2b      	ldr	r3, [pc, #172]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0320 	and.w	r3, r3, #32
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	4b28      	ldr	r3, [pc, #160]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a27      	ldr	r2, [pc, #156]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d92:	f043 0308 	orr.w	r3, r3, #8
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b25      	ldr	r3, [pc, #148]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <MX_GPIO_Init+0xe8>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|BEEP_Pin, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f242 0120 	movw	r1, #8224	; 0x2020
 8000dc2:	481c      	ldr	r0, [pc, #112]	; (8000e34 <MX_GPIO_Init+0xec>)
 8000dc4:	f001 f943 	bl	800204e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCL_Pin|SDA_Pin, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000dce:	481a      	ldr	r0, [pc, #104]	; (8000e38 <MX_GPIO_Init+0xf0>)
 8000dd0:	f001 f93d 	bl	800204e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|BEEP_Pin;
 8000dd4:	f242 0320 	movw	r3, #8224	; 0x2020
 8000dd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	4619      	mov	r1, r3
 8000dec:	4811      	ldr	r0, [pc, #68]	; (8000e34 <MX_GPIO_Init+0xec>)
 8000dee:	f000 ff83 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8000df2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480b      	ldr	r0, [pc, #44]	; (8000e38 <MX_GPIO_Init+0xf0>)
 8000e0c:	f000 ff74 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000e10:	2304      	movs	r3, #4
 8000e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	; (8000e3c <MX_GPIO_Init+0xf4>)
 8000e24:	f000 ff68 	bl	8001cf8 <HAL_GPIO_Init>

}
 8000e28:	bf00      	nop
 8000e2a:	3720      	adds	r7, #32
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40011000 	.word	0x40011000
 8000e38:	40010c00 	.word	0x40010c00
 8000e3c:	40011400 	.word	0x40011400

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e44:	f000 f9d0 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e48:	f000 f80b 	bl	8000e62 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4c:	f7ff ff7c 	bl	8000d48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e50:	f7ff ff5c 	bl	8000d0c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000e54:	f000 f8fa 	bl	800104c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Bsp_Init();
 8000e58:	f7ff f9fe 	bl	8000258 <Bsp_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Bsp_Loop();
 8000e5c:	f7ff fa22 	bl	80002a4 <Bsp_Loop>
 8000e60:	e7fc      	b.n	8000e5c <main+0x1c>

08000e62 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b090      	sub	sp, #64	; 0x40
 8000e66:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e68:	f107 0318 	add.w	r3, r7, #24
 8000e6c:	2228      	movs	r2, #40	; 0x28
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f002 fa39 	bl	80032e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e84:	2301      	movs	r3, #1
 8000e86:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e8c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e92:	2301      	movs	r3, #1
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e96:	2302      	movs	r3, #2
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ea0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea6:	f107 0318 	add.w	r3, r7, #24
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 f900 	bl	80020b0 <HAL_RCC_OscConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000eb6:	f000 f819 	bl	8000eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eba:	230f      	movs	r3, #15
 8000ebc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	2102      	movs	r1, #2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f001 fb6d 	bl	80025b4 <HAL_RCC_ClockConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ee0:	f000 f804 	bl	8000eec <Error_Handler>
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	3740      	adds	r7, #64	; 0x40
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
}
 8000ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <Error_Handler+0x8>
	...

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_MspInit+0x5c>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <HAL_MspInit+0x5c>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6193      	str	r3, [r2, #24]
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_MspInit+0x5c>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <HAL_MspInit+0x5c>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <HAL_MspInit+0x5c>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f20:	61d3      	str	r3, [r2, #28]
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <HAL_MspInit+0x5c>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_MspInit+0x60>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_MspInit+0x60>)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40010000 	.word	0x40010000

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <NMI_Handler+0x4>

08000f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <HardFault_Handler+0x4>

08000f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <MemManage_Handler+0x4>

08000f6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <BusFault_Handler+0x4>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <UsageFault_Handler+0x4>

08000f7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr

08000f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr

08000f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr

08000f9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa2:	f000 f967 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <DMA1_Channel4_IRQHandler+0x10>)
 8000fb2:	f000 fc65 	bl	8001880 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200002f4 	.word	0x200002f4

08000fc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <USART1_IRQHandler+0x10>)
 8000fc6:	f001 fd6d 	bl	8002aa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200002b0 	.word	0x200002b0

08000fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fdc:	4a14      	ldr	r2, [pc, #80]	; (8001030 <_sbrk+0x5c>)
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <_sbrk+0x60>)
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <_sbrk+0x64>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <_sbrk+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	429a      	cmp	r2, r3
 8001002:	d207      	bcs.n	8001014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001004:	f002 f946 	bl	8003294 <__errno>
 8001008:	4603      	mov	r3, r0
 800100a:	220c      	movs	r2, #12
 800100c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	e009      	b.n	8001028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	4a05      	ldr	r2, [pc, #20]	; (8001038 <_sbrk+0x64>)
 8001024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000c000 	.word	0x2000c000
 8001034:	00000400 	.word	0x00000400
 8001038:	200002ac 	.word	0x200002ac
 800103c:	20000350 	.word	0x20000350

08001040 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_USART1_UART_Init+0x4c>)
 8001052:	4a12      	ldr	r2, [pc, #72]	; (800109c <MX_USART1_UART_Init+0x50>)
 8001054:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <MX_USART1_UART_Init+0x4c>)
 8001058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800105c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_USART1_UART_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_USART1_UART_Init+0x4c>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <MX_USART1_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_USART1_UART_Init+0x4c>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <MX_USART1_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <MX_USART1_UART_Init+0x4c>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_USART1_UART_Init+0x4c>)
 8001084:	f001 fc2e 	bl	80028e4 <HAL_UART_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800108e:	f7ff ff2d 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200002b0 	.word	0x200002b0
 800109c:	40013800 	.word	0x40013800

080010a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a33      	ldr	r2, [pc, #204]	; (8001188 <HAL_UART_MspInit+0xe8>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d15f      	bne.n	8001180 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010c0:	4b32      	ldr	r3, [pc, #200]	; (800118c <HAL_UART_MspInit+0xec>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a31      	ldr	r2, [pc, #196]	; (800118c <HAL_UART_MspInit+0xec>)
 80010c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b2f      	ldr	r3, [pc, #188]	; (800118c <HAL_UART_MspInit+0xec>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	4b2c      	ldr	r3, [pc, #176]	; (800118c <HAL_UART_MspInit+0xec>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a2b      	ldr	r2, [pc, #172]	; (800118c <HAL_UART_MspInit+0xec>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b29      	ldr	r3, [pc, #164]	; (800118c <HAL_UART_MspInit+0xec>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	4619      	mov	r1, r3
 8001104:	4822      	ldr	r0, [pc, #136]	; (8001190 <HAL_UART_MspInit+0xf0>)
 8001106:	f000 fdf7 	bl	8001cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800110a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800110e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	4619      	mov	r1, r3
 800111e:	481c      	ldr	r0, [pc, #112]	; (8001190 <HAL_UART_MspInit+0xf0>)
 8001120:	f000 fdea 	bl	8001cf8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <HAL_UART_MspInit+0xf4>)
 8001126:	4a1c      	ldr	r2, [pc, #112]	; (8001198 <HAL_UART_MspInit+0xf8>)
 8001128:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <HAL_UART_MspInit+0xf4>)
 800112c:	2210      	movs	r2, #16
 800112e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_UART_MspInit+0xf4>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <HAL_UART_MspInit+0xf4>)
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_UART_MspInit+0xf4>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <HAL_UART_MspInit+0xf4>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_UART_MspInit+0xf4>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_UART_MspInit+0xf4>)
 8001150:	2200      	movs	r2, #0
 8001152:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001154:	480f      	ldr	r0, [pc, #60]	; (8001194 <HAL_UART_MspInit+0xf4>)
 8001156:	f000 f9db 	bl	8001510 <HAL_DMA_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001160:	f7ff fec4 	bl	8000eec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <HAL_UART_MspInit+0xf4>)
 8001168:	635a      	str	r2, [r3, #52]	; 0x34
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <HAL_UART_MspInit+0xf4>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	2025      	movs	r0, #37	; 0x25
 8001176:	f000 f994 	bl	80014a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800117a:	2025      	movs	r0, #37	; 0x25
 800117c:	f000 f9ad 	bl	80014da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001180:	bf00      	nop
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40013800 	.word	0x40013800
 800118c:	40021000 	.word	0x40021000
 8001190:	40010800 	.word	0x40010800
 8001194:	200002f4 	.word	0x200002f4
 8001198:	40020044 	.word	0x40020044

0800119c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800119c:	480c      	ldr	r0, [pc, #48]	; (80011d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800119e:	490d      	ldr	r1, [pc, #52]	; (80011d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a0:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b4:	4c0a      	ldr	r4, [pc, #40]	; (80011e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011c2:	f7ff ff3d 	bl	8001040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011c6:	f002 f86b 	bl	80032a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ca:	f7ff fe39 	bl	8000e40 <main>
  bx lr
 80011ce:	4770      	bx	lr
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80011d8:	080043f4 	.word	0x080043f4
  ldr r2, =_sbss
 80011dc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80011e0:	2000034c 	.word	0x2000034c

080011e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC1_2_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_Init+0x28>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a07      	ldr	r2, [pc, #28]	; (8001210 <HAL_Init+0x28>)
 80011f2:	f043 0310 	orr.w	r3, r3, #16
 80011f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 f947 	bl	800148c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fe:	200f      	movs	r0, #15
 8001200:	f000 f808 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001204:	f7ff fe78 	bl	8000ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40022000 	.word	0x40022000

08001214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_InitTick+0x54>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_InitTick+0x58>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f95f 	bl	80014f6 <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e00e      	b.n	8001260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d80a      	bhi.n	800125e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f000 f927 	bl	80014a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001254:	4a06      	ldr	r2, [pc, #24]	; (8001270 <HAL_InitTick+0x5c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000008 	.word	0x20000008
 800126c:	20000010 	.word	0x20000010
 8001270:	2000000c 	.word	0x2000000c

08001274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <HAL_IncTick+0x1c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_IncTick+0x20>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a03      	ldr	r2, [pc, #12]	; (8001294 <HAL_IncTick+0x20>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	20000010 	.word	0x20000010
 8001294:	20000338 	.word	0x20000338

08001298 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b02      	ldr	r3, [pc, #8]	; (80012a8 <HAL_GetTick+0x10>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	20000338 	.word	0x20000338

080012ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b4:	f7ff fff0 	bl	8001298 <HAL_GetTick>
 80012b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c4:	d005      	beq.n	80012d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_Delay+0x44>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4413      	add	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012d2:	bf00      	nop
 80012d4:	f7ff ffe0 	bl	8001298 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d8f7      	bhi.n	80012d4 <HAL_Delay+0x28>
  {
  }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000010 	.word	0x20000010

080012f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001310:	4013      	ands	r3, r2
 8001312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800131c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001326:	4a04      	ldr	r2, [pc, #16]	; (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	60d3      	str	r3, [r2, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <__NVIC_GetPriorityGrouping+0x18>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	f003 0307 	and.w	r3, r3, #7
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	2b00      	cmp	r3, #0
 8001368:	db0b      	blt.n	8001382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	f003 021f 	and.w	r2, r3, #31
 8001370:	4906      	ldr	r1, [pc, #24]	; (800138c <__NVIC_EnableIRQ+0x34>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	095b      	lsrs	r3, r3, #5
 8001378:	2001      	movs	r0, #1
 800137a:	fa00 f202 	lsl.w	r2, r0, r2
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	e000e100 	.word	0xe000e100

08001390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db0a      	blt.n	80013ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	490c      	ldr	r1, [pc, #48]	; (80013dc <__NVIC_SetPriority+0x4c>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	0112      	lsls	r2, r2, #4
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	440b      	add	r3, r1
 80013b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b8:	e00a      	b.n	80013d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4908      	ldr	r1, [pc, #32]	; (80013e0 <__NVIC_SetPriority+0x50>)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	3b04      	subs	r3, #4
 80013c8:	0112      	lsls	r2, r2, #4
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	761a      	strb	r2, [r3, #24]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f1c3 0307 	rsb	r3, r3, #7
 80013fe:	2b04      	cmp	r3, #4
 8001400:	bf28      	it	cs
 8001402:	2304      	movcs	r3, #4
 8001404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3304      	adds	r3, #4
 800140a:	2b06      	cmp	r3, #6
 800140c:	d902      	bls.n	8001414 <NVIC_EncodePriority+0x30>
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3b03      	subs	r3, #3
 8001412:	e000      	b.n	8001416 <NVIC_EncodePriority+0x32>
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	f04f 32ff 	mov.w	r2, #4294967295
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800142c:	f04f 31ff 	mov.w	r1, #4294967295
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43d9      	mvns	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	4313      	orrs	r3, r2
         );
}
 800143e:	4618      	mov	r0, r3
 8001440:	3724      	adds	r7, #36	; 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001458:	d301      	bcc.n	800145e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145a:	2301      	movs	r3, #1
 800145c:	e00f      	b.n	800147e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <SysTick_Config+0x40>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001466:	210f      	movs	r1, #15
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f7ff ff90 	bl	8001390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <SysTick_Config+0x40>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <SysTick_Config+0x40>)
 8001478:	2207      	movs	r2, #7
 800147a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	e000e010 	.word	0xe000e010

0800148c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff2d 	bl	80012f4 <__NVIC_SetPriorityGrouping>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b4:	f7ff ff42 	bl	800133c <__NVIC_GetPriorityGrouping>
 80014b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff ff90 	bl	80013e4 <NVIC_EncodePriority>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff5f 	bl	8001390 <__NVIC_SetPriority>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff35 	bl	8001358 <__NVIC_EnableIRQ>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ffa2 	bl	8001448 <SysTick_Config>
 8001504:	4603      	mov	r3, r0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e059      	b.n	80015da <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	4b2d      	ldr	r3, [pc, #180]	; (80015e4 <HAL_DMA_Init+0xd4>)
 800152e:	429a      	cmp	r2, r3
 8001530:	d80f      	bhi.n	8001552 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <HAL_DMA_Init+0xd8>)
 800153a:	4413      	add	r3, r2
 800153c:	4a2b      	ldr	r2, [pc, #172]	; (80015ec <HAL_DMA_Init+0xdc>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	009a      	lsls	r2, r3, #2
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a28      	ldr	r2, [pc, #160]	; (80015f0 <HAL_DMA_Init+0xe0>)
 800154e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001550:	e00e      	b.n	8001570 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <HAL_DMA_Init+0xe4>)
 800155a:	4413      	add	r3, r2
 800155c:	4a23      	ldr	r2, [pc, #140]	; (80015ec <HAL_DMA_Init+0xdc>)
 800155e:	fba2 2303 	umull	r2, r3, r2, r3
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	009a      	lsls	r2, r3, #2
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a22      	ldr	r2, [pc, #136]	; (80015f8 <HAL_DMA_Init+0xe8>)
 800156e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2202      	movs	r2, #2
 8001574:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001586:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800158a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001594:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	40020407 	.word	0x40020407
 80015e8:	bffdfff8 	.word	0xbffdfff8
 80015ec:	cccccccd 	.word	0xcccccccd
 80015f0:	40020000 	.word	0x40020000
 80015f4:	bffdfbf8 	.word	0xbffdfbf8
 80015f8:	40020400 	.word	0x40020400

080015fc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800160e:	2b02      	cmp	r3, #2
 8001610:	d008      	beq.n	8001624 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2204      	movs	r2, #4
 8001616:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e020      	b.n	8001666 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 020e 	bic.w	r2, r2, #14
 8001632:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0201 	bic.w	r2, r2, #1
 8001642:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800164c:	2101      	movs	r1, #1
 800164e:	fa01 f202 	lsl.w	r2, r1, r2
 8001652:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001664:	7bfb      	ldrb	r3, [r7, #15]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001682:	2b02      	cmp	r3, #2
 8001684:	d005      	beq.n	8001692 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2204      	movs	r2, #4
 800168a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	e0d6      	b.n	8001840 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 020e 	bic.w	r2, r2, #14
 80016a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 0201 	bic.w	r2, r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	4b64      	ldr	r3, [pc, #400]	; (800184c <HAL_DMA_Abort_IT+0x1dc>)
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d958      	bls.n	8001770 <HAL_DMA_Abort_IT+0x100>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a63      	ldr	r2, [pc, #396]	; (8001850 <HAL_DMA_Abort_IT+0x1e0>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d04f      	beq.n	8001768 <HAL_DMA_Abort_IT+0xf8>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a61      	ldr	r2, [pc, #388]	; (8001854 <HAL_DMA_Abort_IT+0x1e4>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d048      	beq.n	8001764 <HAL_DMA_Abort_IT+0xf4>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a60      	ldr	r2, [pc, #384]	; (8001858 <HAL_DMA_Abort_IT+0x1e8>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d040      	beq.n	800175e <HAL_DMA_Abort_IT+0xee>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a5e      	ldr	r2, [pc, #376]	; (800185c <HAL_DMA_Abort_IT+0x1ec>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d038      	beq.n	8001758 <HAL_DMA_Abort_IT+0xe8>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a5d      	ldr	r2, [pc, #372]	; (8001860 <HAL_DMA_Abort_IT+0x1f0>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d030      	beq.n	8001752 <HAL_DMA_Abort_IT+0xe2>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a5b      	ldr	r2, [pc, #364]	; (8001864 <HAL_DMA_Abort_IT+0x1f4>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d028      	beq.n	800174c <HAL_DMA_Abort_IT+0xdc>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a53      	ldr	r2, [pc, #332]	; (800184c <HAL_DMA_Abort_IT+0x1dc>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d020      	beq.n	8001746 <HAL_DMA_Abort_IT+0xd6>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a57      	ldr	r2, [pc, #348]	; (8001868 <HAL_DMA_Abort_IT+0x1f8>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d019      	beq.n	8001742 <HAL_DMA_Abort_IT+0xd2>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a56      	ldr	r2, [pc, #344]	; (800186c <HAL_DMA_Abort_IT+0x1fc>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d012      	beq.n	800173e <HAL_DMA_Abort_IT+0xce>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a54      	ldr	r2, [pc, #336]	; (8001870 <HAL_DMA_Abort_IT+0x200>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d00a      	beq.n	8001738 <HAL_DMA_Abort_IT+0xc8>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a53      	ldr	r2, [pc, #332]	; (8001874 <HAL_DMA_Abort_IT+0x204>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d102      	bne.n	8001732 <HAL_DMA_Abort_IT+0xc2>
 800172c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001730:	e01b      	b.n	800176a <HAL_DMA_Abort_IT+0xfa>
 8001732:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001736:	e018      	b.n	800176a <HAL_DMA_Abort_IT+0xfa>
 8001738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173c:	e015      	b.n	800176a <HAL_DMA_Abort_IT+0xfa>
 800173e:	2310      	movs	r3, #16
 8001740:	e013      	b.n	800176a <HAL_DMA_Abort_IT+0xfa>
 8001742:	2301      	movs	r3, #1
 8001744:	e011      	b.n	800176a <HAL_DMA_Abort_IT+0xfa>
 8001746:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800174a:	e00e      	b.n	800176a <HAL_DMA_Abort_IT+0xfa>
 800174c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001750:	e00b      	b.n	800176a <HAL_DMA_Abort_IT+0xfa>
 8001752:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001756:	e008      	b.n	800176a <HAL_DMA_Abort_IT+0xfa>
 8001758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175c:	e005      	b.n	800176a <HAL_DMA_Abort_IT+0xfa>
 800175e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001762:	e002      	b.n	800176a <HAL_DMA_Abort_IT+0xfa>
 8001764:	2310      	movs	r3, #16
 8001766:	e000      	b.n	800176a <HAL_DMA_Abort_IT+0xfa>
 8001768:	2301      	movs	r3, #1
 800176a:	4a43      	ldr	r2, [pc, #268]	; (8001878 <HAL_DMA_Abort_IT+0x208>)
 800176c:	6053      	str	r3, [r2, #4]
 800176e:	e057      	b.n	8001820 <HAL_DMA_Abort_IT+0x1b0>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a36      	ldr	r2, [pc, #216]	; (8001850 <HAL_DMA_Abort_IT+0x1e0>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d04f      	beq.n	800181a <HAL_DMA_Abort_IT+0x1aa>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a35      	ldr	r2, [pc, #212]	; (8001854 <HAL_DMA_Abort_IT+0x1e4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d048      	beq.n	8001816 <HAL_DMA_Abort_IT+0x1a6>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a33      	ldr	r2, [pc, #204]	; (8001858 <HAL_DMA_Abort_IT+0x1e8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d040      	beq.n	8001810 <HAL_DMA_Abort_IT+0x1a0>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a32      	ldr	r2, [pc, #200]	; (800185c <HAL_DMA_Abort_IT+0x1ec>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d038      	beq.n	800180a <HAL_DMA_Abort_IT+0x19a>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a30      	ldr	r2, [pc, #192]	; (8001860 <HAL_DMA_Abort_IT+0x1f0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d030      	beq.n	8001804 <HAL_DMA_Abort_IT+0x194>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a2f      	ldr	r2, [pc, #188]	; (8001864 <HAL_DMA_Abort_IT+0x1f4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d028      	beq.n	80017fe <HAL_DMA_Abort_IT+0x18e>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a26      	ldr	r2, [pc, #152]	; (800184c <HAL_DMA_Abort_IT+0x1dc>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d020      	beq.n	80017f8 <HAL_DMA_Abort_IT+0x188>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a2b      	ldr	r2, [pc, #172]	; (8001868 <HAL_DMA_Abort_IT+0x1f8>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d019      	beq.n	80017f4 <HAL_DMA_Abort_IT+0x184>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a29      	ldr	r2, [pc, #164]	; (800186c <HAL_DMA_Abort_IT+0x1fc>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d012      	beq.n	80017f0 <HAL_DMA_Abort_IT+0x180>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a28      	ldr	r2, [pc, #160]	; (8001870 <HAL_DMA_Abort_IT+0x200>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d00a      	beq.n	80017ea <HAL_DMA_Abort_IT+0x17a>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a26      	ldr	r2, [pc, #152]	; (8001874 <HAL_DMA_Abort_IT+0x204>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d102      	bne.n	80017e4 <HAL_DMA_Abort_IT+0x174>
 80017de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e2:	e01b      	b.n	800181c <HAL_DMA_Abort_IT+0x1ac>
 80017e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017e8:	e018      	b.n	800181c <HAL_DMA_Abort_IT+0x1ac>
 80017ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ee:	e015      	b.n	800181c <HAL_DMA_Abort_IT+0x1ac>
 80017f0:	2310      	movs	r3, #16
 80017f2:	e013      	b.n	800181c <HAL_DMA_Abort_IT+0x1ac>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e011      	b.n	800181c <HAL_DMA_Abort_IT+0x1ac>
 80017f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017fc:	e00e      	b.n	800181c <HAL_DMA_Abort_IT+0x1ac>
 80017fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001802:	e00b      	b.n	800181c <HAL_DMA_Abort_IT+0x1ac>
 8001804:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001808:	e008      	b.n	800181c <HAL_DMA_Abort_IT+0x1ac>
 800180a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180e:	e005      	b.n	800181c <HAL_DMA_Abort_IT+0x1ac>
 8001810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001814:	e002      	b.n	800181c <HAL_DMA_Abort_IT+0x1ac>
 8001816:	2310      	movs	r3, #16
 8001818:	e000      	b.n	800181c <HAL_DMA_Abort_IT+0x1ac>
 800181a:	2301      	movs	r3, #1
 800181c:	4a17      	ldr	r2, [pc, #92]	; (800187c <HAL_DMA_Abort_IT+0x20c>)
 800181e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	4798      	blx	r3
    } 
  }
  return status;
 8001840:	7bfb      	ldrb	r3, [r7, #15]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40020080 	.word	0x40020080
 8001850:	40020008 	.word	0x40020008
 8001854:	4002001c 	.word	0x4002001c
 8001858:	40020030 	.word	0x40020030
 800185c:	40020044 	.word	0x40020044
 8001860:	40020058 	.word	0x40020058
 8001864:	4002006c 	.word	0x4002006c
 8001868:	40020408 	.word	0x40020408
 800186c:	4002041c 	.word	0x4002041c
 8001870:	40020430 	.word	0x40020430
 8001874:	40020444 	.word	0x40020444
 8001878:	40020400 	.word	0x40020400
 800187c:	40020000 	.word	0x40020000

08001880 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	2204      	movs	r2, #4
 800189e:	409a      	lsls	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 80f1 	beq.w	8001a8c <HAL_DMA_IRQHandler+0x20c>
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80eb 	beq.w	8001a8c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0320 	and.w	r3, r3, #32
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d107      	bne.n	80018d4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0204 	bic.w	r2, r2, #4
 80018d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b5f      	ldr	r3, [pc, #380]	; (8001a58 <HAL_DMA_IRQHandler+0x1d8>)
 80018dc:	429a      	cmp	r2, r3
 80018de:	d958      	bls.n	8001992 <HAL_DMA_IRQHandler+0x112>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a5d      	ldr	r2, [pc, #372]	; (8001a5c <HAL_DMA_IRQHandler+0x1dc>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d04f      	beq.n	800198a <HAL_DMA_IRQHandler+0x10a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a5c      	ldr	r2, [pc, #368]	; (8001a60 <HAL_DMA_IRQHandler+0x1e0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d048      	beq.n	8001986 <HAL_DMA_IRQHandler+0x106>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a5a      	ldr	r2, [pc, #360]	; (8001a64 <HAL_DMA_IRQHandler+0x1e4>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d040      	beq.n	8001980 <HAL_DMA_IRQHandler+0x100>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a59      	ldr	r2, [pc, #356]	; (8001a68 <HAL_DMA_IRQHandler+0x1e8>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d038      	beq.n	800197a <HAL_DMA_IRQHandler+0xfa>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a57      	ldr	r2, [pc, #348]	; (8001a6c <HAL_DMA_IRQHandler+0x1ec>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d030      	beq.n	8001974 <HAL_DMA_IRQHandler+0xf4>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a56      	ldr	r2, [pc, #344]	; (8001a70 <HAL_DMA_IRQHandler+0x1f0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d028      	beq.n	800196e <HAL_DMA_IRQHandler+0xee>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a4d      	ldr	r2, [pc, #308]	; (8001a58 <HAL_DMA_IRQHandler+0x1d8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d020      	beq.n	8001968 <HAL_DMA_IRQHandler+0xe8>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a52      	ldr	r2, [pc, #328]	; (8001a74 <HAL_DMA_IRQHandler+0x1f4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d019      	beq.n	8001964 <HAL_DMA_IRQHandler+0xe4>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a50      	ldr	r2, [pc, #320]	; (8001a78 <HAL_DMA_IRQHandler+0x1f8>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d012      	beq.n	8001960 <HAL_DMA_IRQHandler+0xe0>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a4f      	ldr	r2, [pc, #316]	; (8001a7c <HAL_DMA_IRQHandler+0x1fc>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d00a      	beq.n	800195a <HAL_DMA_IRQHandler+0xda>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a4d      	ldr	r2, [pc, #308]	; (8001a80 <HAL_DMA_IRQHandler+0x200>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d102      	bne.n	8001954 <HAL_DMA_IRQHandler+0xd4>
 800194e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001952:	e01b      	b.n	800198c <HAL_DMA_IRQHandler+0x10c>
 8001954:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001958:	e018      	b.n	800198c <HAL_DMA_IRQHandler+0x10c>
 800195a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800195e:	e015      	b.n	800198c <HAL_DMA_IRQHandler+0x10c>
 8001960:	2340      	movs	r3, #64	; 0x40
 8001962:	e013      	b.n	800198c <HAL_DMA_IRQHandler+0x10c>
 8001964:	2304      	movs	r3, #4
 8001966:	e011      	b.n	800198c <HAL_DMA_IRQHandler+0x10c>
 8001968:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800196c:	e00e      	b.n	800198c <HAL_DMA_IRQHandler+0x10c>
 800196e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001972:	e00b      	b.n	800198c <HAL_DMA_IRQHandler+0x10c>
 8001974:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001978:	e008      	b.n	800198c <HAL_DMA_IRQHandler+0x10c>
 800197a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800197e:	e005      	b.n	800198c <HAL_DMA_IRQHandler+0x10c>
 8001980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001984:	e002      	b.n	800198c <HAL_DMA_IRQHandler+0x10c>
 8001986:	2340      	movs	r3, #64	; 0x40
 8001988:	e000      	b.n	800198c <HAL_DMA_IRQHandler+0x10c>
 800198a:	2304      	movs	r3, #4
 800198c:	4a3d      	ldr	r2, [pc, #244]	; (8001a84 <HAL_DMA_IRQHandler+0x204>)
 800198e:	6053      	str	r3, [r2, #4]
 8001990:	e057      	b.n	8001a42 <HAL_DMA_IRQHandler+0x1c2>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a31      	ldr	r2, [pc, #196]	; (8001a5c <HAL_DMA_IRQHandler+0x1dc>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d04f      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x1bc>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a2f      	ldr	r2, [pc, #188]	; (8001a60 <HAL_DMA_IRQHandler+0x1e0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d048      	beq.n	8001a38 <HAL_DMA_IRQHandler+0x1b8>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a2e      	ldr	r2, [pc, #184]	; (8001a64 <HAL_DMA_IRQHandler+0x1e4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d040      	beq.n	8001a32 <HAL_DMA_IRQHandler+0x1b2>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a2c      	ldr	r2, [pc, #176]	; (8001a68 <HAL_DMA_IRQHandler+0x1e8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d038      	beq.n	8001a2c <HAL_DMA_IRQHandler+0x1ac>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a2b      	ldr	r2, [pc, #172]	; (8001a6c <HAL_DMA_IRQHandler+0x1ec>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d030      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x1a6>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a29      	ldr	r2, [pc, #164]	; (8001a70 <HAL_DMA_IRQHandler+0x1f0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d028      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x1a0>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a21      	ldr	r2, [pc, #132]	; (8001a58 <HAL_DMA_IRQHandler+0x1d8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d020      	beq.n	8001a1a <HAL_DMA_IRQHandler+0x19a>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a25      	ldr	r2, [pc, #148]	; (8001a74 <HAL_DMA_IRQHandler+0x1f4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d019      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x196>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a24      	ldr	r2, [pc, #144]	; (8001a78 <HAL_DMA_IRQHandler+0x1f8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d012      	beq.n	8001a12 <HAL_DMA_IRQHandler+0x192>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a22      	ldr	r2, [pc, #136]	; (8001a7c <HAL_DMA_IRQHandler+0x1fc>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d00a      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x18c>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a21      	ldr	r2, [pc, #132]	; (8001a80 <HAL_DMA_IRQHandler+0x200>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d102      	bne.n	8001a06 <HAL_DMA_IRQHandler+0x186>
 8001a00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a04:	e01b      	b.n	8001a3e <HAL_DMA_IRQHandler+0x1be>
 8001a06:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a0a:	e018      	b.n	8001a3e <HAL_DMA_IRQHandler+0x1be>
 8001a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a10:	e015      	b.n	8001a3e <HAL_DMA_IRQHandler+0x1be>
 8001a12:	2340      	movs	r3, #64	; 0x40
 8001a14:	e013      	b.n	8001a3e <HAL_DMA_IRQHandler+0x1be>
 8001a16:	2304      	movs	r3, #4
 8001a18:	e011      	b.n	8001a3e <HAL_DMA_IRQHandler+0x1be>
 8001a1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a1e:	e00e      	b.n	8001a3e <HAL_DMA_IRQHandler+0x1be>
 8001a20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a24:	e00b      	b.n	8001a3e <HAL_DMA_IRQHandler+0x1be>
 8001a26:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a2a:	e008      	b.n	8001a3e <HAL_DMA_IRQHandler+0x1be>
 8001a2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a30:	e005      	b.n	8001a3e <HAL_DMA_IRQHandler+0x1be>
 8001a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a36:	e002      	b.n	8001a3e <HAL_DMA_IRQHandler+0x1be>
 8001a38:	2340      	movs	r3, #64	; 0x40
 8001a3a:	e000      	b.n	8001a3e <HAL_DMA_IRQHandler+0x1be>
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <HAL_DMA_IRQHandler+0x208>)
 8001a40:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 8136 	beq.w	8001cb8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a54:	e130      	b.n	8001cb8 <HAL_DMA_IRQHandler+0x438>
 8001a56:	bf00      	nop
 8001a58:	40020080 	.word	0x40020080
 8001a5c:	40020008 	.word	0x40020008
 8001a60:	4002001c 	.word	0x4002001c
 8001a64:	40020030 	.word	0x40020030
 8001a68:	40020044 	.word	0x40020044
 8001a6c:	40020058 	.word	0x40020058
 8001a70:	4002006c 	.word	0x4002006c
 8001a74:	40020408 	.word	0x40020408
 8001a78:	4002041c 	.word	0x4002041c
 8001a7c:	40020430 	.word	0x40020430
 8001a80:	40020444 	.word	0x40020444
 8001a84:	40020400 	.word	0x40020400
 8001a88:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	2202      	movs	r2, #2
 8001a92:	409a      	lsls	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80dd 	beq.w	8001c58 <HAL_DMA_IRQHandler+0x3d8>
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80d7 	beq.w	8001c58 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0320 	and.w	r3, r3, #32
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10b      	bne.n	8001ad0 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 020a 	bic.w	r2, r2, #10
 8001ac6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b7b      	ldr	r3, [pc, #492]	; (8001cc4 <HAL_DMA_IRQHandler+0x444>)
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d958      	bls.n	8001b8e <HAL_DMA_IRQHandler+0x30e>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a79      	ldr	r2, [pc, #484]	; (8001cc8 <HAL_DMA_IRQHandler+0x448>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d04f      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x306>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a78      	ldr	r2, [pc, #480]	; (8001ccc <HAL_DMA_IRQHandler+0x44c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d048      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x302>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a76      	ldr	r2, [pc, #472]	; (8001cd0 <HAL_DMA_IRQHandler+0x450>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d040      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x2fc>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a75      	ldr	r2, [pc, #468]	; (8001cd4 <HAL_DMA_IRQHandler+0x454>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d038      	beq.n	8001b76 <HAL_DMA_IRQHandler+0x2f6>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a73      	ldr	r2, [pc, #460]	; (8001cd8 <HAL_DMA_IRQHandler+0x458>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d030      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x2f0>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a72      	ldr	r2, [pc, #456]	; (8001cdc <HAL_DMA_IRQHandler+0x45c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d028      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x2ea>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a69      	ldr	r2, [pc, #420]	; (8001cc4 <HAL_DMA_IRQHandler+0x444>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d020      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x2e4>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a6e      	ldr	r2, [pc, #440]	; (8001ce0 <HAL_DMA_IRQHandler+0x460>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d019      	beq.n	8001b60 <HAL_DMA_IRQHandler+0x2e0>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a6c      	ldr	r2, [pc, #432]	; (8001ce4 <HAL_DMA_IRQHandler+0x464>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d012      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x2dc>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a6b      	ldr	r2, [pc, #428]	; (8001ce8 <HAL_DMA_IRQHandler+0x468>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d00a      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x2d6>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a69      	ldr	r2, [pc, #420]	; (8001cec <HAL_DMA_IRQHandler+0x46c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d102      	bne.n	8001b50 <HAL_DMA_IRQHandler+0x2d0>
 8001b4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b4e:	e01b      	b.n	8001b88 <HAL_DMA_IRQHandler+0x308>
 8001b50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b54:	e018      	b.n	8001b88 <HAL_DMA_IRQHandler+0x308>
 8001b56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b5a:	e015      	b.n	8001b88 <HAL_DMA_IRQHandler+0x308>
 8001b5c:	2320      	movs	r3, #32
 8001b5e:	e013      	b.n	8001b88 <HAL_DMA_IRQHandler+0x308>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e011      	b.n	8001b88 <HAL_DMA_IRQHandler+0x308>
 8001b64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b68:	e00e      	b.n	8001b88 <HAL_DMA_IRQHandler+0x308>
 8001b6a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b6e:	e00b      	b.n	8001b88 <HAL_DMA_IRQHandler+0x308>
 8001b70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b74:	e008      	b.n	8001b88 <HAL_DMA_IRQHandler+0x308>
 8001b76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b7a:	e005      	b.n	8001b88 <HAL_DMA_IRQHandler+0x308>
 8001b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b80:	e002      	b.n	8001b88 <HAL_DMA_IRQHandler+0x308>
 8001b82:	2320      	movs	r3, #32
 8001b84:	e000      	b.n	8001b88 <HAL_DMA_IRQHandler+0x308>
 8001b86:	2302      	movs	r3, #2
 8001b88:	4a59      	ldr	r2, [pc, #356]	; (8001cf0 <HAL_DMA_IRQHandler+0x470>)
 8001b8a:	6053      	str	r3, [r2, #4]
 8001b8c:	e057      	b.n	8001c3e <HAL_DMA_IRQHandler+0x3be>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a4d      	ldr	r2, [pc, #308]	; (8001cc8 <HAL_DMA_IRQHandler+0x448>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d04f      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x3b8>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a4b      	ldr	r2, [pc, #300]	; (8001ccc <HAL_DMA_IRQHandler+0x44c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d048      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x3b4>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a4a      	ldr	r2, [pc, #296]	; (8001cd0 <HAL_DMA_IRQHandler+0x450>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d040      	beq.n	8001c2e <HAL_DMA_IRQHandler+0x3ae>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a48      	ldr	r2, [pc, #288]	; (8001cd4 <HAL_DMA_IRQHandler+0x454>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d038      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x3a8>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a47      	ldr	r2, [pc, #284]	; (8001cd8 <HAL_DMA_IRQHandler+0x458>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d030      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x3a2>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a45      	ldr	r2, [pc, #276]	; (8001cdc <HAL_DMA_IRQHandler+0x45c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d028      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x39c>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a3d      	ldr	r2, [pc, #244]	; (8001cc4 <HAL_DMA_IRQHandler+0x444>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d020      	beq.n	8001c16 <HAL_DMA_IRQHandler+0x396>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a41      	ldr	r2, [pc, #260]	; (8001ce0 <HAL_DMA_IRQHandler+0x460>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d019      	beq.n	8001c12 <HAL_DMA_IRQHandler+0x392>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a40      	ldr	r2, [pc, #256]	; (8001ce4 <HAL_DMA_IRQHandler+0x464>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d012      	beq.n	8001c0e <HAL_DMA_IRQHandler+0x38e>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a3e      	ldr	r2, [pc, #248]	; (8001ce8 <HAL_DMA_IRQHandler+0x468>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00a      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x388>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a3d      	ldr	r2, [pc, #244]	; (8001cec <HAL_DMA_IRQHandler+0x46c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d102      	bne.n	8001c02 <HAL_DMA_IRQHandler+0x382>
 8001bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c00:	e01b      	b.n	8001c3a <HAL_DMA_IRQHandler+0x3ba>
 8001c02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c06:	e018      	b.n	8001c3a <HAL_DMA_IRQHandler+0x3ba>
 8001c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c0c:	e015      	b.n	8001c3a <HAL_DMA_IRQHandler+0x3ba>
 8001c0e:	2320      	movs	r3, #32
 8001c10:	e013      	b.n	8001c3a <HAL_DMA_IRQHandler+0x3ba>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e011      	b.n	8001c3a <HAL_DMA_IRQHandler+0x3ba>
 8001c16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c1a:	e00e      	b.n	8001c3a <HAL_DMA_IRQHandler+0x3ba>
 8001c1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c20:	e00b      	b.n	8001c3a <HAL_DMA_IRQHandler+0x3ba>
 8001c22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c26:	e008      	b.n	8001c3a <HAL_DMA_IRQHandler+0x3ba>
 8001c28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c2c:	e005      	b.n	8001c3a <HAL_DMA_IRQHandler+0x3ba>
 8001c2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c32:	e002      	b.n	8001c3a <HAL_DMA_IRQHandler+0x3ba>
 8001c34:	2320      	movs	r3, #32
 8001c36:	e000      	b.n	8001c3a <HAL_DMA_IRQHandler+0x3ba>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	4a2e      	ldr	r2, [pc, #184]	; (8001cf4 <HAL_DMA_IRQHandler+0x474>)
 8001c3c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d034      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c56:	e02f      	b.n	8001cb8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	2208      	movs	r2, #8
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d028      	beq.n	8001cba <HAL_DMA_IRQHandler+0x43a>
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d023      	beq.n	8001cba <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 020e 	bic.w	r2, r2, #14
 8001c80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c90:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d004      	beq.n	8001cba <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	4798      	blx	r3
    }
  }
  return;
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
}
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40020080 	.word	0x40020080
 8001cc8:	40020008 	.word	0x40020008
 8001ccc:	4002001c 	.word	0x4002001c
 8001cd0:	40020030 	.word	0x40020030
 8001cd4:	40020044 	.word	0x40020044
 8001cd8:	40020058 	.word	0x40020058
 8001cdc:	4002006c 	.word	0x4002006c
 8001ce0:	40020408 	.word	0x40020408
 8001ce4:	4002041c 	.word	0x4002041c
 8001ce8:	40020430 	.word	0x40020430
 8001cec:	40020444 	.word	0x40020444
 8001cf0:	40020400 	.word	0x40020400
 8001cf4:	40020000 	.word	0x40020000

08001cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b08b      	sub	sp, #44	; 0x2c
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d06:	2300      	movs	r3, #0
 8001d08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0a:	e179      	b.n	8002000 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	69fa      	ldr	r2, [r7, #28]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	f040 8168 	bne.w	8001ffa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4a96      	ldr	r2, [pc, #600]	; (8001f88 <HAL_GPIO_Init+0x290>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d05e      	beq.n	8001df2 <HAL_GPIO_Init+0xfa>
 8001d34:	4a94      	ldr	r2, [pc, #592]	; (8001f88 <HAL_GPIO_Init+0x290>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d875      	bhi.n	8001e26 <HAL_GPIO_Init+0x12e>
 8001d3a:	4a94      	ldr	r2, [pc, #592]	; (8001f8c <HAL_GPIO_Init+0x294>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d058      	beq.n	8001df2 <HAL_GPIO_Init+0xfa>
 8001d40:	4a92      	ldr	r2, [pc, #584]	; (8001f8c <HAL_GPIO_Init+0x294>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d86f      	bhi.n	8001e26 <HAL_GPIO_Init+0x12e>
 8001d46:	4a92      	ldr	r2, [pc, #584]	; (8001f90 <HAL_GPIO_Init+0x298>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d052      	beq.n	8001df2 <HAL_GPIO_Init+0xfa>
 8001d4c:	4a90      	ldr	r2, [pc, #576]	; (8001f90 <HAL_GPIO_Init+0x298>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d869      	bhi.n	8001e26 <HAL_GPIO_Init+0x12e>
 8001d52:	4a90      	ldr	r2, [pc, #576]	; (8001f94 <HAL_GPIO_Init+0x29c>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d04c      	beq.n	8001df2 <HAL_GPIO_Init+0xfa>
 8001d58:	4a8e      	ldr	r2, [pc, #568]	; (8001f94 <HAL_GPIO_Init+0x29c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d863      	bhi.n	8001e26 <HAL_GPIO_Init+0x12e>
 8001d5e:	4a8e      	ldr	r2, [pc, #568]	; (8001f98 <HAL_GPIO_Init+0x2a0>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d046      	beq.n	8001df2 <HAL_GPIO_Init+0xfa>
 8001d64:	4a8c      	ldr	r2, [pc, #560]	; (8001f98 <HAL_GPIO_Init+0x2a0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d85d      	bhi.n	8001e26 <HAL_GPIO_Init+0x12e>
 8001d6a:	2b12      	cmp	r3, #18
 8001d6c:	d82a      	bhi.n	8001dc4 <HAL_GPIO_Init+0xcc>
 8001d6e:	2b12      	cmp	r3, #18
 8001d70:	d859      	bhi.n	8001e26 <HAL_GPIO_Init+0x12e>
 8001d72:	a201      	add	r2, pc, #4	; (adr r2, 8001d78 <HAL_GPIO_Init+0x80>)
 8001d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d78:	08001df3 	.word	0x08001df3
 8001d7c:	08001dcd 	.word	0x08001dcd
 8001d80:	08001ddf 	.word	0x08001ddf
 8001d84:	08001e21 	.word	0x08001e21
 8001d88:	08001e27 	.word	0x08001e27
 8001d8c:	08001e27 	.word	0x08001e27
 8001d90:	08001e27 	.word	0x08001e27
 8001d94:	08001e27 	.word	0x08001e27
 8001d98:	08001e27 	.word	0x08001e27
 8001d9c:	08001e27 	.word	0x08001e27
 8001da0:	08001e27 	.word	0x08001e27
 8001da4:	08001e27 	.word	0x08001e27
 8001da8:	08001e27 	.word	0x08001e27
 8001dac:	08001e27 	.word	0x08001e27
 8001db0:	08001e27 	.word	0x08001e27
 8001db4:	08001e27 	.word	0x08001e27
 8001db8:	08001e27 	.word	0x08001e27
 8001dbc:	08001dd5 	.word	0x08001dd5
 8001dc0:	08001de9 	.word	0x08001de9
 8001dc4:	4a75      	ldr	r2, [pc, #468]	; (8001f9c <HAL_GPIO_Init+0x2a4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dca:	e02c      	b.n	8001e26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	623b      	str	r3, [r7, #32]
          break;
 8001dd2:	e029      	b.n	8001e28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	623b      	str	r3, [r7, #32]
          break;
 8001ddc:	e024      	b.n	8001e28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	3308      	adds	r3, #8
 8001de4:	623b      	str	r3, [r7, #32]
          break;
 8001de6:	e01f      	b.n	8001e28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	330c      	adds	r3, #12
 8001dee:	623b      	str	r3, [r7, #32]
          break;
 8001df0:	e01a      	b.n	8001e28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d102      	bne.n	8001e00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	623b      	str	r3, [r7, #32]
          break;
 8001dfe:	e013      	b.n	8001e28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d105      	bne.n	8001e14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e08:	2308      	movs	r3, #8
 8001e0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69fa      	ldr	r2, [r7, #28]
 8001e10:	611a      	str	r2, [r3, #16]
          break;
 8001e12:	e009      	b.n	8001e28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e14:	2308      	movs	r3, #8
 8001e16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	615a      	str	r2, [r3, #20]
          break;
 8001e1e:	e003      	b.n	8001e28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e20:	2300      	movs	r3, #0
 8001e22:	623b      	str	r3, [r7, #32]
          break;
 8001e24:	e000      	b.n	8001e28 <HAL_GPIO_Init+0x130>
          break;
 8001e26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2bff      	cmp	r3, #255	; 0xff
 8001e2c:	d801      	bhi.n	8001e32 <HAL_GPIO_Init+0x13a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	e001      	b.n	8001e36 <HAL_GPIO_Init+0x13e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3304      	adds	r3, #4
 8001e36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	2bff      	cmp	r3, #255	; 0xff
 8001e3c:	d802      	bhi.n	8001e44 <HAL_GPIO_Init+0x14c>
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	e002      	b.n	8001e4a <HAL_GPIO_Init+0x152>
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	3b08      	subs	r3, #8
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	210f      	movs	r1, #15
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	6a39      	ldr	r1, [r7, #32]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	fa01 f303 	lsl.w	r3, r1, r3
 8001e64:	431a      	orrs	r2, r3
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 80c1 	beq.w	8001ffa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e78:	4b49      	ldr	r3, [pc, #292]	; (8001fa0 <HAL_GPIO_Init+0x2a8>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	4a48      	ldr	r2, [pc, #288]	; (8001fa0 <HAL_GPIO_Init+0x2a8>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6193      	str	r3, [r2, #24]
 8001e84:	4b46      	ldr	r3, [pc, #280]	; (8001fa0 <HAL_GPIO_Init+0x2a8>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e90:	4a44      	ldr	r2, [pc, #272]	; (8001fa4 <HAL_GPIO_Init+0x2ac>)
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	3302      	adds	r3, #2
 8001e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	220f      	movs	r2, #15
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a3c      	ldr	r2, [pc, #240]	; (8001fa8 <HAL_GPIO_Init+0x2b0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d01f      	beq.n	8001efc <HAL_GPIO_Init+0x204>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a3b      	ldr	r2, [pc, #236]	; (8001fac <HAL_GPIO_Init+0x2b4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d019      	beq.n	8001ef8 <HAL_GPIO_Init+0x200>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a3a      	ldr	r2, [pc, #232]	; (8001fb0 <HAL_GPIO_Init+0x2b8>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d013      	beq.n	8001ef4 <HAL_GPIO_Init+0x1fc>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a39      	ldr	r2, [pc, #228]	; (8001fb4 <HAL_GPIO_Init+0x2bc>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d00d      	beq.n	8001ef0 <HAL_GPIO_Init+0x1f8>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a38      	ldr	r2, [pc, #224]	; (8001fb8 <HAL_GPIO_Init+0x2c0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d007      	beq.n	8001eec <HAL_GPIO_Init+0x1f4>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a37      	ldr	r2, [pc, #220]	; (8001fbc <HAL_GPIO_Init+0x2c4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d101      	bne.n	8001ee8 <HAL_GPIO_Init+0x1f0>
 8001ee4:	2305      	movs	r3, #5
 8001ee6:	e00a      	b.n	8001efe <HAL_GPIO_Init+0x206>
 8001ee8:	2306      	movs	r3, #6
 8001eea:	e008      	b.n	8001efe <HAL_GPIO_Init+0x206>
 8001eec:	2304      	movs	r3, #4
 8001eee:	e006      	b.n	8001efe <HAL_GPIO_Init+0x206>
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e004      	b.n	8001efe <HAL_GPIO_Init+0x206>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e002      	b.n	8001efe <HAL_GPIO_Init+0x206>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <HAL_GPIO_Init+0x206>
 8001efc:	2300      	movs	r3, #0
 8001efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f00:	f002 0203 	and.w	r2, r2, #3
 8001f04:	0092      	lsls	r2, r2, #2
 8001f06:	4093      	lsls	r3, r2
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f0e:	4925      	ldr	r1, [pc, #148]	; (8001fa4 <HAL_GPIO_Init+0x2ac>)
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	3302      	adds	r3, #2
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d006      	beq.n	8001f36 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f28:	4b25      	ldr	r3, [pc, #148]	; (8001fc0 <HAL_GPIO_Init+0x2c8>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4924      	ldr	r1, [pc, #144]	; (8001fc0 <HAL_GPIO_Init+0x2c8>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f36:	4b22      	ldr	r3, [pc, #136]	; (8001fc0 <HAL_GPIO_Init+0x2c8>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	4920      	ldr	r1, [pc, #128]	; (8001fc0 <HAL_GPIO_Init+0x2c8>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f50:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <HAL_GPIO_Init+0x2c8>)
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	491a      	ldr	r1, [pc, #104]	; (8001fc0 <HAL_GPIO_Init+0x2c8>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f5e:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_GPIO_Init+0x2c8>)
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	4916      	ldr	r1, [pc, #88]	; (8001fc0 <HAL_GPIO_Init+0x2c8>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d025      	beq.n	8001fc4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_GPIO_Init+0x2c8>)
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	4910      	ldr	r1, [pc, #64]	; (8001fc0 <HAL_GPIO_Init+0x2c8>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	608b      	str	r3, [r1, #8]
 8001f84:	e025      	b.n	8001fd2 <HAL_GPIO_Init+0x2da>
 8001f86:	bf00      	nop
 8001f88:	10320000 	.word	0x10320000
 8001f8c:	10310000 	.word	0x10310000
 8001f90:	10220000 	.word	0x10220000
 8001f94:	10210000 	.word	0x10210000
 8001f98:	10120000 	.word	0x10120000
 8001f9c:	10110000 	.word	0x10110000
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40010000 	.word	0x40010000
 8001fa8:	40010800 	.word	0x40010800
 8001fac:	40010c00 	.word	0x40010c00
 8001fb0:	40011000 	.word	0x40011000
 8001fb4:	40011400 	.word	0x40011400
 8001fb8:	40011800 	.word	0x40011800
 8001fbc:	40011c00 	.word	0x40011c00
 8001fc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fc4:	4b15      	ldr	r3, [pc, #84]	; (800201c <HAL_GPIO_Init+0x324>)
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	4913      	ldr	r1, [pc, #76]	; (800201c <HAL_GPIO_Init+0x324>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d006      	beq.n	8001fec <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <HAL_GPIO_Init+0x324>)
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	490e      	ldr	r1, [pc, #56]	; (800201c <HAL_GPIO_Init+0x324>)
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60cb      	str	r3, [r1, #12]
 8001fea:	e006      	b.n	8001ffa <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_GPIO_Init+0x324>)
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	4909      	ldr	r1, [pc, #36]	; (800201c <HAL_GPIO_Init+0x324>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	fa22 f303 	lsr.w	r3, r2, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	f47f ae7e 	bne.w	8001d0c <HAL_GPIO_Init+0x14>
  }
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	372c      	adds	r7, #44	; 0x2c
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	40010400 	.word	0x40010400

08002020 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	887b      	ldrh	r3, [r7, #2]
 8002032:	4013      	ands	r3, r2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
 800203c:	e001      	b.n	8002042 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr

0800204e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	807b      	strh	r3, [r7, #2]
 800205a:	4613      	mov	r3, r2
 800205c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800205e:	787b      	ldrb	r3, [r7, #1]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002064:	887a      	ldrh	r2, [r7, #2]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800206a:	e003      	b.n	8002074 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800206c:	887b      	ldrh	r3, [r7, #2]
 800206e:	041a      	lsls	r2, r3, #16
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	611a      	str	r2, [r3, #16]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr

0800207e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800207e:	b480      	push	{r7}
 8002080:	b085      	sub	sp, #20
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	460b      	mov	r3, r1
 8002088:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002090:	887a      	ldrh	r2, [r7, #2]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4013      	ands	r3, r2
 8002096:	041a      	lsls	r2, r3, #16
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	43d9      	mvns	r1, r3
 800209c:	887b      	ldrh	r3, [r7, #2]
 800209e:	400b      	ands	r3, r1
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	611a      	str	r2, [r3, #16]
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e272      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 8087 	beq.w	80021de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d0:	4b92      	ldr	r3, [pc, #584]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d00c      	beq.n	80020f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020dc:	4b8f      	ldr	r3, [pc, #572]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d112      	bne.n	800210e <HAL_RCC_OscConfig+0x5e>
 80020e8:	4b8c      	ldr	r3, [pc, #560]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f4:	d10b      	bne.n	800210e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f6:	4b89      	ldr	r3, [pc, #548]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d06c      	beq.n	80021dc <HAL_RCC_OscConfig+0x12c>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d168      	bne.n	80021dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e24c      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x76>
 8002118:	4b80      	ldr	r3, [pc, #512]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a7f      	ldr	r2, [pc, #508]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800211e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	e02e      	b.n	8002184 <HAL_RCC_OscConfig+0xd4>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x98>
 800212e:	4b7b      	ldr	r3, [pc, #492]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a7a      	ldr	r2, [pc, #488]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	4b78      	ldr	r3, [pc, #480]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a77      	ldr	r2, [pc, #476]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002140:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e01d      	b.n	8002184 <HAL_RCC_OscConfig+0xd4>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0xbc>
 8002152:	4b72      	ldr	r3, [pc, #456]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a71      	ldr	r2, [pc, #452]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b6f      	ldr	r3, [pc, #444]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a6e      	ldr	r2, [pc, #440]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e00b      	b.n	8002184 <HAL_RCC_OscConfig+0xd4>
 800216c:	4b6b      	ldr	r3, [pc, #428]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a6a      	ldr	r2, [pc, #424]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b68      	ldr	r3, [pc, #416]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a67      	ldr	r2, [pc, #412]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800217e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002182:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d013      	beq.n	80021b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7ff f884 	bl	8001298 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002194:	f7ff f880 	bl	8001298 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	; 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e200      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a6:	4b5d      	ldr	r3, [pc, #372]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0xe4>
 80021b2:	e014      	b.n	80021de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7ff f870 	bl	8001298 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021bc:	f7ff f86c 	bl	8001298 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	; 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e1ec      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ce:	4b53      	ldr	r3, [pc, #332]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x10c>
 80021da:	e000      	b.n	80021de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d063      	beq.n	80022b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ea:	4b4c      	ldr	r3, [pc, #304]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00b      	beq.n	800220e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021f6:	4b49      	ldr	r3, [pc, #292]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d11c      	bne.n	800223c <HAL_RCC_OscConfig+0x18c>
 8002202:	4b46      	ldr	r3, [pc, #280]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d116      	bne.n	800223c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220e:	4b43      	ldr	r3, [pc, #268]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <HAL_RCC_OscConfig+0x176>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d001      	beq.n	8002226 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e1c0      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002226:	4b3d      	ldr	r3, [pc, #244]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4939      	ldr	r1, [pc, #228]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	e03a      	b.n	80022b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d020      	beq.n	8002286 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002244:	4b36      	ldr	r3, [pc, #216]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002246:	2201      	movs	r2, #1
 8002248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224a:	f7ff f825 	bl	8001298 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002252:	f7ff f821 	bl	8001298 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e1a1      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002264:	4b2d      	ldr	r3, [pc, #180]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002270:	4b2a      	ldr	r3, [pc, #168]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4927      	ldr	r1, [pc, #156]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002280:	4313      	orrs	r3, r2
 8002282:	600b      	str	r3, [r1, #0]
 8002284:	e015      	b.n	80022b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002286:	4b26      	ldr	r3, [pc, #152]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7ff f804 	bl	8001298 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002294:	f7ff f800 	bl	8001298 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e180      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a6:	4b1d      	ldr	r3, [pc, #116]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d03a      	beq.n	8002334 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d019      	beq.n	80022fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c6:	4b17      	ldr	r3, [pc, #92]	; (8002324 <HAL_RCC_OscConfig+0x274>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022cc:	f7fe ffe4 	bl	8001298 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d4:	f7fe ffe0 	bl	8001298 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e160      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e6:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022f2:	2001      	movs	r0, #1
 80022f4:	f000 fad8 	bl	80028a8 <RCC_Delay>
 80022f8:	e01c      	b.n	8002334 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_RCC_OscConfig+0x274>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002300:	f7fe ffca 	bl	8001298 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002306:	e00f      	b.n	8002328 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002308:	f7fe ffc6 	bl	8001298 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d908      	bls.n	8002328 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e146      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
 8002320:	42420000 	.word	0x42420000
 8002324:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002328:	4b92      	ldr	r3, [pc, #584]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1e9      	bne.n	8002308 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80a6 	beq.w	800248e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002346:	4b8b      	ldr	r3, [pc, #556]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10d      	bne.n	800236e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	4b88      	ldr	r3, [pc, #544]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	4a87      	ldr	r2, [pc, #540]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235c:	61d3      	str	r3, [r2, #28]
 800235e:	4b85      	ldr	r3, [pc, #532]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236a:	2301      	movs	r3, #1
 800236c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236e:	4b82      	ldr	r3, [pc, #520]	; (8002578 <HAL_RCC_OscConfig+0x4c8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002376:	2b00      	cmp	r3, #0
 8002378:	d118      	bne.n	80023ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237a:	4b7f      	ldr	r3, [pc, #508]	; (8002578 <HAL_RCC_OscConfig+0x4c8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a7e      	ldr	r2, [pc, #504]	; (8002578 <HAL_RCC_OscConfig+0x4c8>)
 8002380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002386:	f7fe ff87 	bl	8001298 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238e:	f7fe ff83 	bl	8001298 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b64      	cmp	r3, #100	; 0x64
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e103      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a0:	4b75      	ldr	r3, [pc, #468]	; (8002578 <HAL_RCC_OscConfig+0x4c8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d106      	bne.n	80023c2 <HAL_RCC_OscConfig+0x312>
 80023b4:	4b6f      	ldr	r3, [pc, #444]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4a6e      	ldr	r2, [pc, #440]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6213      	str	r3, [r2, #32]
 80023c0:	e02d      	b.n	800241e <HAL_RCC_OscConfig+0x36e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x334>
 80023ca:	4b6a      	ldr	r3, [pc, #424]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	4a69      	ldr	r2, [pc, #420]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	f023 0301 	bic.w	r3, r3, #1
 80023d4:	6213      	str	r3, [r2, #32]
 80023d6:	4b67      	ldr	r3, [pc, #412]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	4a66      	ldr	r2, [pc, #408]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	f023 0304 	bic.w	r3, r3, #4
 80023e0:	6213      	str	r3, [r2, #32]
 80023e2:	e01c      	b.n	800241e <HAL_RCC_OscConfig+0x36e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b05      	cmp	r3, #5
 80023ea:	d10c      	bne.n	8002406 <HAL_RCC_OscConfig+0x356>
 80023ec:	4b61      	ldr	r3, [pc, #388]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4a60      	ldr	r2, [pc, #384]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	6213      	str	r3, [r2, #32]
 80023f8:	4b5e      	ldr	r3, [pc, #376]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4a5d      	ldr	r2, [pc, #372]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6213      	str	r3, [r2, #32]
 8002404:	e00b      	b.n	800241e <HAL_RCC_OscConfig+0x36e>
 8002406:	4b5b      	ldr	r3, [pc, #364]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4a5a      	ldr	r2, [pc, #360]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	6213      	str	r3, [r2, #32]
 8002412:	4b58      	ldr	r3, [pc, #352]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4a57      	ldr	r2, [pc, #348]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	f023 0304 	bic.w	r3, r3, #4
 800241c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d015      	beq.n	8002452 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002426:	f7fe ff37 	bl	8001298 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242c:	e00a      	b.n	8002444 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242e:	f7fe ff33 	bl	8001298 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f241 3288 	movw	r2, #5000	; 0x1388
 800243c:	4293      	cmp	r3, r2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e0b1      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002444:	4b4b      	ldr	r3, [pc, #300]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0ee      	beq.n	800242e <HAL_RCC_OscConfig+0x37e>
 8002450:	e014      	b.n	800247c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002452:	f7fe ff21 	bl	8001298 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002458:	e00a      	b.n	8002470 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245a:	f7fe ff1d 	bl	8001298 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	f241 3288 	movw	r2, #5000	; 0x1388
 8002468:	4293      	cmp	r3, r2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e09b      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002470:	4b40      	ldr	r3, [pc, #256]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ee      	bne.n	800245a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800247c:	7dfb      	ldrb	r3, [r7, #23]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d105      	bne.n	800248e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002482:	4b3c      	ldr	r3, [pc, #240]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	4a3b      	ldr	r2, [pc, #236]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800248c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 8087 	beq.w	80025a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002498:	4b36      	ldr	r3, [pc, #216]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 030c 	and.w	r3, r3, #12
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d061      	beq.n	8002568 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d146      	bne.n	800253a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ac:	4b33      	ldr	r3, [pc, #204]	; (800257c <HAL_RCC_OscConfig+0x4cc>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7fe fef1 	bl	8001298 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ba:	f7fe feed 	bl	8001298 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e06d      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024cc:	4b29      	ldr	r3, [pc, #164]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e0:	d108      	bne.n	80024f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024e2:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	4921      	ldr	r1, [pc, #132]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f4:	4b1f      	ldr	r3, [pc, #124]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a19      	ldr	r1, [r3, #32]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	430b      	orrs	r3, r1
 8002506:	491b      	ldr	r1, [pc, #108]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	4313      	orrs	r3, r2
 800250a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <HAL_RCC_OscConfig+0x4cc>)
 800250e:	2201      	movs	r2, #1
 8002510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002512:	f7fe fec1 	bl	8001298 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251a:	f7fe febd 	bl	8001298 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e03d      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x46a>
 8002538:	e035      	b.n	80025a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <HAL_RCC_OscConfig+0x4cc>)
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7fe feaa 	bl	8001298 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002548:	f7fe fea6 	bl	8001298 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e026      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x498>
 8002566:	e01e      	b.n	80025a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d107      	bne.n	8002580 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e019      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
 8002574:	40021000 	.word	0x40021000
 8002578:	40007000 	.word	0x40007000
 800257c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_RCC_OscConfig+0x500>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	429a      	cmp	r2, r3
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d001      	beq.n	80025a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000

080025b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0d0      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c8:	4b6a      	ldr	r3, [pc, #424]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d910      	bls.n	80025f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b67      	ldr	r3, [pc, #412]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 0207 	bic.w	r2, r3, #7
 80025de:	4965      	ldr	r1, [pc, #404]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e6:	4b63      	ldr	r3, [pc, #396]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0b8      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002610:	4b59      	ldr	r3, [pc, #356]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4a58      	ldr	r2, [pc, #352]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800261a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002628:	4b53      	ldr	r3, [pc, #332]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4a52      	ldr	r2, [pc, #328]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002632:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002634:	4b50      	ldr	r3, [pc, #320]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	494d      	ldr	r1, [pc, #308]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d040      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d107      	bne.n	800266a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	4b47      	ldr	r3, [pc, #284]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d115      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e07f      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d107      	bne.n	8002682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002672:	4b41      	ldr	r3, [pc, #260]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e073      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002682:	4b3d      	ldr	r3, [pc, #244]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e06b      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002692:	4b39      	ldr	r3, [pc, #228]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f023 0203 	bic.w	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4936      	ldr	r1, [pc, #216]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a4:	f7fe fdf8 	bl	8001298 <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ac:	f7fe fdf4 	bl	8001298 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e053      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 020c 	and.w	r2, r3, #12
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d1eb      	bne.n	80026ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d4:	4b27      	ldr	r3, [pc, #156]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d210      	bcs.n	8002704 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b24      	ldr	r3, [pc, #144]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 0207 	bic.w	r2, r3, #7
 80026ea:	4922      	ldr	r1, [pc, #136]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e032      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4916      	ldr	r1, [pc, #88]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	490e      	ldr	r1, [pc, #56]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002742:	f000 f821 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 8002746:	4602      	mov	r2, r0
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	490a      	ldr	r1, [pc, #40]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002754:	5ccb      	ldrb	r3, [r1, r3]
 8002756:	fa22 f303 	lsr.w	r3, r2, r3
 800275a:	4a09      	ldr	r2, [pc, #36]	; (8002780 <HAL_RCC_ClockConfig+0x1cc>)
 800275c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800275e:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HAL_RCC_ClockConfig+0x1d0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe fd56 	bl	8001214 <HAL_InitTick>

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40022000 	.word	0x40022000
 8002778:	40021000 	.word	0x40021000
 800277c:	080043a0 	.word	0x080043a0
 8002780:	20000008 	.word	0x20000008
 8002784:	2000000c 	.word	0x2000000c

08002788 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002788:	b490      	push	{r4, r7}
 800278a:	b08a      	sub	sp, #40	; 0x28
 800278c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800278e:	4b29      	ldr	r3, [pc, #164]	; (8002834 <HAL_RCC_GetSysClockFreq+0xac>)
 8002790:	1d3c      	adds	r4, r7, #4
 8002792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002794:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002798:	f240 2301 	movw	r3, #513	; 0x201
 800279c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	2300      	movs	r3, #0
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027b2:	4b21      	ldr	r3, [pc, #132]	; (8002838 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d002      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0x40>
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d003      	beq.n	80027ce <HAL_RCC_GetSysClockFreq+0x46>
 80027c6:	e02b      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027c8:	4b1c      	ldr	r3, [pc, #112]	; (800283c <HAL_RCC_GetSysClockFreq+0xb4>)
 80027ca:	623b      	str	r3, [r7, #32]
      break;
 80027cc:	e02b      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	0c9b      	lsrs	r3, r3, #18
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	3328      	adds	r3, #40	; 0x28
 80027d8:	443b      	add	r3, r7
 80027da:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027de:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d012      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027ea:	4b13      	ldr	r3, [pc, #76]	; (8002838 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	0c5b      	lsrs	r3, r3, #17
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	3328      	adds	r3, #40	; 0x28
 80027f6:	443b      	add	r3, r7
 80027f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	4a0e      	ldr	r2, [pc, #56]	; (800283c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002802:	fb03 f202 	mul.w	r2, r3, r2
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
 800280e:	e004      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	4a0b      	ldr	r2, [pc, #44]	; (8002840 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002814:	fb02 f303 	mul.w	r3, r2, r3
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	623b      	str	r3, [r7, #32]
      break;
 800281e:	e002      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002822:	623b      	str	r3, [r7, #32]
      break;
 8002824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002826:	6a3b      	ldr	r3, [r7, #32]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3728      	adds	r7, #40	; 0x28
 800282c:	46bd      	mov	sp, r7
 800282e:	bc90      	pop	{r4, r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	08003c24 	.word	0x08003c24
 8002838:	40021000 	.word	0x40021000
 800283c:	007a1200 	.word	0x007a1200
 8002840:	003d0900 	.word	0x003d0900

08002844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002848:	4b02      	ldr	r3, [pc, #8]	; (8002854 <HAL_RCC_GetHCLKFreq+0x10>)
 800284a:	681b      	ldr	r3, [r3, #0]
}
 800284c:	4618      	mov	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	20000008 	.word	0x20000008

08002858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800285c:	f7ff fff2 	bl	8002844 <HAL_RCC_GetHCLKFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	4903      	ldr	r1, [pc, #12]	; (800287c <HAL_RCC_GetPCLK1Freq+0x24>)
 800286e:	5ccb      	ldrb	r3, [r1, r3]
 8002870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002874:	4618      	mov	r0, r3
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000
 800287c:	080043b0 	.word	0x080043b0

08002880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002884:	f7ff ffde 	bl	8002844 <HAL_RCC_GetHCLKFreq>
 8002888:	4602      	mov	r2, r0
 800288a:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	0adb      	lsrs	r3, r3, #11
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	4903      	ldr	r1, [pc, #12]	; (80028a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002896:	5ccb      	ldrb	r3, [r1, r3]
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800289c:	4618      	mov	r0, r3
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000
 80028a4:	080043b0 	.word	0x080043b0

080028a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028b0:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <RCC_Delay+0x34>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <RCC_Delay+0x38>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	0a5b      	lsrs	r3, r3, #9
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	fb02 f303 	mul.w	r3, r2, r3
 80028c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028c4:	bf00      	nop
  }
  while (Delay --);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1e5a      	subs	r2, r3, #1
 80028ca:	60fa      	str	r2, [r7, #12]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f9      	bne.n	80028c4 <RCC_Delay+0x1c>
}
 80028d0:	bf00      	nop
 80028d2:	bf00      	nop
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	20000008 	.word	0x20000008
 80028e0:	10624dd3 	.word	0x10624dd3

080028e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e03f      	b.n	8002976 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7fe fbc8 	bl	80010a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2224      	movs	r2, #36	; 0x24
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002926:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 fc25 	bl	8003178 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800293c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800294c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800295c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b08a      	sub	sp, #40	; 0x28
 8002982:	af02      	add	r7, sp, #8
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	4613      	mov	r3, r2
 800298c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b20      	cmp	r3, #32
 800299c:	d17c      	bne.n	8002a98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <HAL_UART_Transmit+0x2c>
 80029a4:	88fb      	ldrh	r3, [r7, #6]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e075      	b.n	8002a9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_UART_Transmit+0x3e>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e06e      	b.n	8002a9a <HAL_UART_Transmit+0x11c>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2221      	movs	r2, #33	; 0x21
 80029ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029d2:	f7fe fc61 	bl	8001298 <HAL_GetTick>
 80029d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	88fa      	ldrh	r2, [r7, #6]
 80029dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	88fa      	ldrh	r2, [r7, #6]
 80029e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ec:	d108      	bne.n	8002a00 <HAL_UART_Transmit+0x82>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d104      	bne.n	8002a00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	61bb      	str	r3, [r7, #24]
 80029fe:	e003      	b.n	8002a08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a10:	e02a      	b.n	8002a68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2180      	movs	r1, #128	; 0x80
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 fa11 	bl	8002e44 <UART_WaitOnFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e036      	b.n	8002a9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10b      	bne.n	8002a4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	3302      	adds	r3, #2
 8002a46:	61bb      	str	r3, [r7, #24]
 8002a48:	e007      	b.n	8002a5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	781a      	ldrb	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	3301      	adds	r3, #1
 8002a58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1cf      	bne.n	8002a12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2140      	movs	r1, #64	; 0x40
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f9e1 	bl	8002e44 <UART_WaitOnFlagUntilTimeout>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e006      	b.n	8002a9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	e000      	b.n	8002a9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a98:	2302      	movs	r3, #2
  }
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3720      	adds	r7, #32
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08a      	sub	sp, #40	; 0x28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10d      	bne.n	8002af6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <HAL_UART_IRQHandler+0x52>
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fa99 	bl	8003026 <UART_Receive_IT>
      return;
 8002af4:	e17b      	b.n	8002dee <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80b1 	beq.w	8002c60 <HAL_UART_IRQHandler+0x1bc>
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d105      	bne.n	8002b14 <HAL_UART_IRQHandler+0x70>
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 80a6 	beq.w	8002c60 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_UART_IRQHandler+0x90>
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	f043 0201 	orr.w	r2, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <HAL_UART_IRQHandler+0xb0>
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	f043 0202 	orr.w	r2, r3, #2
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_UART_IRQHandler+0xd0>
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	f043 0204 	orr.w	r2, r3, #4
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00f      	beq.n	8002b9e <HAL_UART_IRQHandler+0xfa>
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d104      	bne.n	8002b92 <HAL_UART_IRQHandler+0xee>
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f043 0208 	orr.w	r2, r3, #8
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 811e 	beq.w	8002de4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x11e>
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 fa32 	bl	8003026 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d102      	bne.n	8002bea <HAL_UART_IRQHandler+0x146>
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d031      	beq.n	8002c4e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f974 	bl	8002ed8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d023      	beq.n	8002c46 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695a      	ldr	r2, [r3, #20]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c0c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d013      	beq.n	8002c3e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1a:	4a76      	ldr	r2, [pc, #472]	; (8002df4 <HAL_UART_IRQHandler+0x350>)
 8002c1c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe fd24 	bl	8001670 <HAL_DMA_Abort_IT>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d016      	beq.n	8002c5c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c3c:	e00e      	b.n	8002c5c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f8ec 	bl	8002e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c44:	e00a      	b.n	8002c5c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f8e8 	bl	8002e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c4c:	e006      	b.n	8002c5c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f8e4 	bl	8002e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c5a:	e0c3      	b.n	8002de4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5c:	bf00      	nop
    return;
 8002c5e:	e0c1      	b.n	8002de4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	f040 80a1 	bne.w	8002dac <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 809b 	beq.w	8002dac <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 8095 	beq.w	8002dac <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d04e      	beq.n	8002d44 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002cb0:	8a3b      	ldrh	r3, [r7, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 8098 	beq.w	8002de8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cbc:	8a3a      	ldrh	r2, [r7, #16]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	f080 8092 	bcs.w	8002de8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	8a3a      	ldrh	r2, [r7, #16]
 8002cc8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	d02b      	beq.n	8002d2c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ce2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d02:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0210 	bic.w	r2, r2, #16
 8002d20:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fc68 	bl	80015fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f876 	bl	8002e2e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d42:	e051      	b.n	8002de8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d047      	beq.n	8002dec <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002d5c:	8a7b      	ldrh	r3, [r7, #18]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d044      	beq.n	8002dec <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d70:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0201 	bic.w	r2, r2, #1
 8002d80:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2220      	movs	r2, #32
 8002d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0210 	bic.w	r2, r2, #16
 8002d9e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002da0:	8a7b      	ldrh	r3, [r7, #18]
 8002da2:	4619      	mov	r1, r3
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f842 	bl	8002e2e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002daa:	e01f      	b.n	8002dec <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d008      	beq.n	8002dc8 <HAL_UART_IRQHandler+0x324>
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f8c9 	bl	8002f58 <UART_Transmit_IT>
    return;
 8002dc6:	e012      	b.n	8002dee <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00d      	beq.n	8002dee <HAL_UART_IRQHandler+0x34a>
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f90a 	bl	8002ff6 <UART_EndTransmit_IT>
    return;
 8002de2:	e004      	b.n	8002dee <HAL_UART_IRQHandler+0x34a>
    return;
 8002de4:	bf00      	nop
 8002de6:	e002      	b.n	8002dee <HAL_UART_IRQHandler+0x34a>
      return;
 8002de8:	bf00      	nop
 8002dea:	e000      	b.n	8002dee <HAL_UART_IRQHandler+0x34a>
      return;
 8002dec:	bf00      	nop
  }
}
 8002dee:	3728      	adds	r7, #40	; 0x28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	08002f31 	.word	0x08002f31

08002df8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr

08002e2e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	460b      	mov	r3, r1
 8002e38:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e54:	e02c      	b.n	8002eb0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5c:	d028      	beq.n	8002eb0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d007      	beq.n	8002e74 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e64:	f7fe fa18 	bl	8001298 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d21d      	bcs.n	8002eb0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e82:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0201 	bic.w	r2, r2, #1
 8002e92:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e00f      	b.n	8002ed0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d0c3      	beq.n	8002e56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002eee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d107      	bne.n	8002f18 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0210 	bic.w	r2, r2, #16
 8002f16:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f7ff ff66 	bl	8002e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f50:	bf00      	nop
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b21      	cmp	r3, #33	; 0x21
 8002f6a:	d13e      	bne.n	8002fea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f74:	d114      	bne.n	8002fa0 <UART_Transmit_IT+0x48>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d110      	bne.n	8002fa0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f92:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	1c9a      	adds	r2, r3, #2
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	621a      	str	r2, [r3, #32]
 8002f9e:	e008      	b.n	8002fb2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	1c59      	adds	r1, r3, #1
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6211      	str	r1, [r2, #32]
 8002faa:	781a      	ldrb	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10f      	bne.n	8002fe6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fd4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fe4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e000      	b.n	8002fec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fea:	2302      	movs	r3, #2
  }
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800300c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff feee 	bl	8002df8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b086      	sub	sp, #24
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b22      	cmp	r3, #34	; 0x22
 8003038:	f040 8099 	bne.w	800316e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003044:	d117      	bne.n	8003076 <UART_Receive_IT+0x50>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d113      	bne.n	8003076 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	b29b      	uxth	r3, r3
 8003060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003064:	b29a      	uxth	r2, r3
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	1c9a      	adds	r2, r3, #2
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	629a      	str	r2, [r3, #40]	; 0x28
 8003074:	e026      	b.n	80030c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800307c:	2300      	movs	r3, #0
 800307e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003088:	d007      	beq.n	800309a <UART_Receive_IT+0x74>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10a      	bne.n	80030a8 <UART_Receive_IT+0x82>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	701a      	strb	r2, [r3, #0]
 80030a6:	e008      	b.n	80030ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	4619      	mov	r1, r3
 80030d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d148      	bne.n	800316a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0220 	bic.w	r2, r2, #32
 80030e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	2b01      	cmp	r3, #1
 8003116:	d123      	bne.n	8003160 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0210 	bic.w	r2, r2, #16
 800312c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b10      	cmp	r3, #16
 800313a:	d10a      	bne.n	8003152 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800313c:	2300      	movs	r3, #0
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003156:	4619      	mov	r1, r3
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff fe68 	bl	8002e2e <HAL_UARTEx_RxEventCallback>
 800315e:	e002      	b.n	8003166 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff fe52 	bl	8002e0a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	e002      	b.n	8003170 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e000      	b.n	8003170 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800316e:	2302      	movs	r3, #2
  }
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031b2:	f023 030c 	bic.w	r3, r3, #12
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	68b9      	ldr	r1, [r7, #8]
 80031bc:	430b      	orrs	r3, r1
 80031be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a2c      	ldr	r2, [pc, #176]	; (800328c <UART_SetConfig+0x114>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d103      	bne.n	80031e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031e0:	f7ff fb4e 	bl	8002880 <HAL_RCC_GetPCLK2Freq>
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	e002      	b.n	80031ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031e8:	f7ff fb36 	bl	8002858 <HAL_RCC_GetPCLK1Freq>
 80031ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	009a      	lsls	r2, r3, #2
 80031f8:	441a      	add	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	fbb2 f3f3 	udiv	r3, r2, r3
 8003204:	4a22      	ldr	r2, [pc, #136]	; (8003290 <UART_SetConfig+0x118>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	0119      	lsls	r1, r3, #4
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	009a      	lsls	r2, r3, #2
 8003218:	441a      	add	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	fbb2 f2f3 	udiv	r2, r2, r3
 8003224:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <UART_SetConfig+0x118>)
 8003226:	fba3 0302 	umull	r0, r3, r3, r2
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	2064      	movs	r0, #100	; 0x64
 800322e:	fb00 f303 	mul.w	r3, r0, r3
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	3332      	adds	r3, #50	; 0x32
 8003238:	4a15      	ldr	r2, [pc, #84]	; (8003290 <UART_SetConfig+0x118>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003244:	4419      	add	r1, r3
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	009a      	lsls	r2, r3, #2
 8003250:	441a      	add	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	fbb2 f2f3 	udiv	r2, r2, r3
 800325c:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <UART_SetConfig+0x118>)
 800325e:	fba3 0302 	umull	r0, r3, r3, r2
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	2064      	movs	r0, #100	; 0x64
 8003266:	fb00 f303 	mul.w	r3, r0, r3
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	3332      	adds	r3, #50	; 0x32
 8003270:	4a07      	ldr	r2, [pc, #28]	; (8003290 <UART_SetConfig+0x118>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	f003 020f 	and.w	r2, r3, #15
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	440a      	add	r2, r1
 8003282:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003284:	bf00      	nop
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40013800 	.word	0x40013800
 8003290:	51eb851f 	.word	0x51eb851f

08003294 <__errno>:
 8003294:	4b01      	ldr	r3, [pc, #4]	; (800329c <__errno+0x8>)
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20000014 	.word	0x20000014

080032a0 <__libc_init_array>:
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	2600      	movs	r6, #0
 80032a4:	4d0c      	ldr	r5, [pc, #48]	; (80032d8 <__libc_init_array+0x38>)
 80032a6:	4c0d      	ldr	r4, [pc, #52]	; (80032dc <__libc_init_array+0x3c>)
 80032a8:	1b64      	subs	r4, r4, r5
 80032aa:	10a4      	asrs	r4, r4, #2
 80032ac:	42a6      	cmp	r6, r4
 80032ae:	d109      	bne.n	80032c4 <__libc_init_array+0x24>
 80032b0:	f000 fc9c 	bl	8003bec <_init>
 80032b4:	2600      	movs	r6, #0
 80032b6:	4d0a      	ldr	r5, [pc, #40]	; (80032e0 <__libc_init_array+0x40>)
 80032b8:	4c0a      	ldr	r4, [pc, #40]	; (80032e4 <__libc_init_array+0x44>)
 80032ba:	1b64      	subs	r4, r4, r5
 80032bc:	10a4      	asrs	r4, r4, #2
 80032be:	42a6      	cmp	r6, r4
 80032c0:	d105      	bne.n	80032ce <__libc_init_array+0x2e>
 80032c2:	bd70      	pop	{r4, r5, r6, pc}
 80032c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c8:	4798      	blx	r3
 80032ca:	3601      	adds	r6, #1
 80032cc:	e7ee      	b.n	80032ac <__libc_init_array+0xc>
 80032ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d2:	4798      	blx	r3
 80032d4:	3601      	adds	r6, #1
 80032d6:	e7f2      	b.n	80032be <__libc_init_array+0x1e>
 80032d8:	080043ec 	.word	0x080043ec
 80032dc:	080043ec 	.word	0x080043ec
 80032e0:	080043ec 	.word	0x080043ec
 80032e4:	080043f0 	.word	0x080043f0

080032e8 <memset>:
 80032e8:	4603      	mov	r3, r0
 80032ea:	4402      	add	r2, r0
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d100      	bne.n	80032f2 <memset+0xa>
 80032f0:	4770      	bx	lr
 80032f2:	f803 1b01 	strb.w	r1, [r3], #1
 80032f6:	e7f9      	b.n	80032ec <memset+0x4>

080032f8 <siprintf>:
 80032f8:	b40e      	push	{r1, r2, r3}
 80032fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80032fe:	b500      	push	{lr}
 8003300:	b09c      	sub	sp, #112	; 0x70
 8003302:	ab1d      	add	r3, sp, #116	; 0x74
 8003304:	9002      	str	r0, [sp, #8]
 8003306:	9006      	str	r0, [sp, #24]
 8003308:	9107      	str	r1, [sp, #28]
 800330a:	9104      	str	r1, [sp, #16]
 800330c:	4808      	ldr	r0, [pc, #32]	; (8003330 <siprintf+0x38>)
 800330e:	4909      	ldr	r1, [pc, #36]	; (8003334 <siprintf+0x3c>)
 8003310:	f853 2b04 	ldr.w	r2, [r3], #4
 8003314:	9105      	str	r1, [sp, #20]
 8003316:	6800      	ldr	r0, [r0, #0]
 8003318:	a902      	add	r1, sp, #8
 800331a:	9301      	str	r3, [sp, #4]
 800331c:	f000 f868 	bl	80033f0 <_svfiprintf_r>
 8003320:	2200      	movs	r2, #0
 8003322:	9b02      	ldr	r3, [sp, #8]
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	b01c      	add	sp, #112	; 0x70
 8003328:	f85d eb04 	ldr.w	lr, [sp], #4
 800332c:	b003      	add	sp, #12
 800332e:	4770      	bx	lr
 8003330:	20000014 	.word	0x20000014
 8003334:	ffff0208 	.word	0xffff0208

08003338 <__ssputs_r>:
 8003338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800333c:	688e      	ldr	r6, [r1, #8]
 800333e:	4682      	mov	sl, r0
 8003340:	429e      	cmp	r6, r3
 8003342:	460c      	mov	r4, r1
 8003344:	4690      	mov	r8, r2
 8003346:	461f      	mov	r7, r3
 8003348:	d838      	bhi.n	80033bc <__ssputs_r+0x84>
 800334a:	898a      	ldrh	r2, [r1, #12]
 800334c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003350:	d032      	beq.n	80033b8 <__ssputs_r+0x80>
 8003352:	6825      	ldr	r5, [r4, #0]
 8003354:	6909      	ldr	r1, [r1, #16]
 8003356:	3301      	adds	r3, #1
 8003358:	eba5 0901 	sub.w	r9, r5, r1
 800335c:	6965      	ldr	r5, [r4, #20]
 800335e:	444b      	add	r3, r9
 8003360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003364:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003368:	106d      	asrs	r5, r5, #1
 800336a:	429d      	cmp	r5, r3
 800336c:	bf38      	it	cc
 800336e:	461d      	movcc	r5, r3
 8003370:	0553      	lsls	r3, r2, #21
 8003372:	d531      	bpl.n	80033d8 <__ssputs_r+0xa0>
 8003374:	4629      	mov	r1, r5
 8003376:	f000 fb6f 	bl	8003a58 <_malloc_r>
 800337a:	4606      	mov	r6, r0
 800337c:	b950      	cbnz	r0, 8003394 <__ssputs_r+0x5c>
 800337e:	230c      	movs	r3, #12
 8003380:	f04f 30ff 	mov.w	r0, #4294967295
 8003384:	f8ca 3000 	str.w	r3, [sl]
 8003388:	89a3      	ldrh	r3, [r4, #12]
 800338a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800338e:	81a3      	strh	r3, [r4, #12]
 8003390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003394:	464a      	mov	r2, r9
 8003396:	6921      	ldr	r1, [r4, #16]
 8003398:	f000 face 	bl	8003938 <memcpy>
 800339c:	89a3      	ldrh	r3, [r4, #12]
 800339e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033a6:	81a3      	strh	r3, [r4, #12]
 80033a8:	6126      	str	r6, [r4, #16]
 80033aa:	444e      	add	r6, r9
 80033ac:	6026      	str	r6, [r4, #0]
 80033ae:	463e      	mov	r6, r7
 80033b0:	6165      	str	r5, [r4, #20]
 80033b2:	eba5 0509 	sub.w	r5, r5, r9
 80033b6:	60a5      	str	r5, [r4, #8]
 80033b8:	42be      	cmp	r6, r7
 80033ba:	d900      	bls.n	80033be <__ssputs_r+0x86>
 80033bc:	463e      	mov	r6, r7
 80033be:	4632      	mov	r2, r6
 80033c0:	4641      	mov	r1, r8
 80033c2:	6820      	ldr	r0, [r4, #0]
 80033c4:	f000 fac6 	bl	8003954 <memmove>
 80033c8:	68a3      	ldr	r3, [r4, #8]
 80033ca:	2000      	movs	r0, #0
 80033cc:	1b9b      	subs	r3, r3, r6
 80033ce:	60a3      	str	r3, [r4, #8]
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	4433      	add	r3, r6
 80033d4:	6023      	str	r3, [r4, #0]
 80033d6:	e7db      	b.n	8003390 <__ssputs_r+0x58>
 80033d8:	462a      	mov	r2, r5
 80033da:	f000 fbb1 	bl	8003b40 <_realloc_r>
 80033de:	4606      	mov	r6, r0
 80033e0:	2800      	cmp	r0, #0
 80033e2:	d1e1      	bne.n	80033a8 <__ssputs_r+0x70>
 80033e4:	4650      	mov	r0, sl
 80033e6:	6921      	ldr	r1, [r4, #16]
 80033e8:	f000 face 	bl	8003988 <_free_r>
 80033ec:	e7c7      	b.n	800337e <__ssputs_r+0x46>
	...

080033f0 <_svfiprintf_r>:
 80033f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f4:	4698      	mov	r8, r3
 80033f6:	898b      	ldrh	r3, [r1, #12]
 80033f8:	4607      	mov	r7, r0
 80033fa:	061b      	lsls	r3, r3, #24
 80033fc:	460d      	mov	r5, r1
 80033fe:	4614      	mov	r4, r2
 8003400:	b09d      	sub	sp, #116	; 0x74
 8003402:	d50e      	bpl.n	8003422 <_svfiprintf_r+0x32>
 8003404:	690b      	ldr	r3, [r1, #16]
 8003406:	b963      	cbnz	r3, 8003422 <_svfiprintf_r+0x32>
 8003408:	2140      	movs	r1, #64	; 0x40
 800340a:	f000 fb25 	bl	8003a58 <_malloc_r>
 800340e:	6028      	str	r0, [r5, #0]
 8003410:	6128      	str	r0, [r5, #16]
 8003412:	b920      	cbnz	r0, 800341e <_svfiprintf_r+0x2e>
 8003414:	230c      	movs	r3, #12
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	f04f 30ff 	mov.w	r0, #4294967295
 800341c:	e0d1      	b.n	80035c2 <_svfiprintf_r+0x1d2>
 800341e:	2340      	movs	r3, #64	; 0x40
 8003420:	616b      	str	r3, [r5, #20]
 8003422:	2300      	movs	r3, #0
 8003424:	9309      	str	r3, [sp, #36]	; 0x24
 8003426:	2320      	movs	r3, #32
 8003428:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800342c:	2330      	movs	r3, #48	; 0x30
 800342e:	f04f 0901 	mov.w	r9, #1
 8003432:	f8cd 800c 	str.w	r8, [sp, #12]
 8003436:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80035dc <_svfiprintf_r+0x1ec>
 800343a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800343e:	4623      	mov	r3, r4
 8003440:	469a      	mov	sl, r3
 8003442:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003446:	b10a      	cbz	r2, 800344c <_svfiprintf_r+0x5c>
 8003448:	2a25      	cmp	r2, #37	; 0x25
 800344a:	d1f9      	bne.n	8003440 <_svfiprintf_r+0x50>
 800344c:	ebba 0b04 	subs.w	fp, sl, r4
 8003450:	d00b      	beq.n	800346a <_svfiprintf_r+0x7a>
 8003452:	465b      	mov	r3, fp
 8003454:	4622      	mov	r2, r4
 8003456:	4629      	mov	r1, r5
 8003458:	4638      	mov	r0, r7
 800345a:	f7ff ff6d 	bl	8003338 <__ssputs_r>
 800345e:	3001      	adds	r0, #1
 8003460:	f000 80aa 	beq.w	80035b8 <_svfiprintf_r+0x1c8>
 8003464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003466:	445a      	add	r2, fp
 8003468:	9209      	str	r2, [sp, #36]	; 0x24
 800346a:	f89a 3000 	ldrb.w	r3, [sl]
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 80a2 	beq.w	80035b8 <_svfiprintf_r+0x1c8>
 8003474:	2300      	movs	r3, #0
 8003476:	f04f 32ff 	mov.w	r2, #4294967295
 800347a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800347e:	f10a 0a01 	add.w	sl, sl, #1
 8003482:	9304      	str	r3, [sp, #16]
 8003484:	9307      	str	r3, [sp, #28]
 8003486:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800348a:	931a      	str	r3, [sp, #104]	; 0x68
 800348c:	4654      	mov	r4, sl
 800348e:	2205      	movs	r2, #5
 8003490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003494:	4851      	ldr	r0, [pc, #324]	; (80035dc <_svfiprintf_r+0x1ec>)
 8003496:	f000 fa41 	bl	800391c <memchr>
 800349a:	9a04      	ldr	r2, [sp, #16]
 800349c:	b9d8      	cbnz	r0, 80034d6 <_svfiprintf_r+0xe6>
 800349e:	06d0      	lsls	r0, r2, #27
 80034a0:	bf44      	itt	mi
 80034a2:	2320      	movmi	r3, #32
 80034a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034a8:	0711      	lsls	r1, r2, #28
 80034aa:	bf44      	itt	mi
 80034ac:	232b      	movmi	r3, #43	; 0x2b
 80034ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034b2:	f89a 3000 	ldrb.w	r3, [sl]
 80034b6:	2b2a      	cmp	r3, #42	; 0x2a
 80034b8:	d015      	beq.n	80034e6 <_svfiprintf_r+0xf6>
 80034ba:	4654      	mov	r4, sl
 80034bc:	2000      	movs	r0, #0
 80034be:	f04f 0c0a 	mov.w	ip, #10
 80034c2:	9a07      	ldr	r2, [sp, #28]
 80034c4:	4621      	mov	r1, r4
 80034c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034ca:	3b30      	subs	r3, #48	; 0x30
 80034cc:	2b09      	cmp	r3, #9
 80034ce:	d94e      	bls.n	800356e <_svfiprintf_r+0x17e>
 80034d0:	b1b0      	cbz	r0, 8003500 <_svfiprintf_r+0x110>
 80034d2:	9207      	str	r2, [sp, #28]
 80034d4:	e014      	b.n	8003500 <_svfiprintf_r+0x110>
 80034d6:	eba0 0308 	sub.w	r3, r0, r8
 80034da:	fa09 f303 	lsl.w	r3, r9, r3
 80034de:	4313      	orrs	r3, r2
 80034e0:	46a2      	mov	sl, r4
 80034e2:	9304      	str	r3, [sp, #16]
 80034e4:	e7d2      	b.n	800348c <_svfiprintf_r+0x9c>
 80034e6:	9b03      	ldr	r3, [sp, #12]
 80034e8:	1d19      	adds	r1, r3, #4
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	9103      	str	r1, [sp, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bfbb      	ittet	lt
 80034f2:	425b      	neglt	r3, r3
 80034f4:	f042 0202 	orrlt.w	r2, r2, #2
 80034f8:	9307      	strge	r3, [sp, #28]
 80034fa:	9307      	strlt	r3, [sp, #28]
 80034fc:	bfb8      	it	lt
 80034fe:	9204      	strlt	r2, [sp, #16]
 8003500:	7823      	ldrb	r3, [r4, #0]
 8003502:	2b2e      	cmp	r3, #46	; 0x2e
 8003504:	d10c      	bne.n	8003520 <_svfiprintf_r+0x130>
 8003506:	7863      	ldrb	r3, [r4, #1]
 8003508:	2b2a      	cmp	r3, #42	; 0x2a
 800350a:	d135      	bne.n	8003578 <_svfiprintf_r+0x188>
 800350c:	9b03      	ldr	r3, [sp, #12]
 800350e:	3402      	adds	r4, #2
 8003510:	1d1a      	adds	r2, r3, #4
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	9203      	str	r2, [sp, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	bfb8      	it	lt
 800351a:	f04f 33ff 	movlt.w	r3, #4294967295
 800351e:	9305      	str	r3, [sp, #20]
 8003520:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80035e0 <_svfiprintf_r+0x1f0>
 8003524:	2203      	movs	r2, #3
 8003526:	4650      	mov	r0, sl
 8003528:	7821      	ldrb	r1, [r4, #0]
 800352a:	f000 f9f7 	bl	800391c <memchr>
 800352e:	b140      	cbz	r0, 8003542 <_svfiprintf_r+0x152>
 8003530:	2340      	movs	r3, #64	; 0x40
 8003532:	eba0 000a 	sub.w	r0, r0, sl
 8003536:	fa03 f000 	lsl.w	r0, r3, r0
 800353a:	9b04      	ldr	r3, [sp, #16]
 800353c:	3401      	adds	r4, #1
 800353e:	4303      	orrs	r3, r0
 8003540:	9304      	str	r3, [sp, #16]
 8003542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003546:	2206      	movs	r2, #6
 8003548:	4826      	ldr	r0, [pc, #152]	; (80035e4 <_svfiprintf_r+0x1f4>)
 800354a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800354e:	f000 f9e5 	bl	800391c <memchr>
 8003552:	2800      	cmp	r0, #0
 8003554:	d038      	beq.n	80035c8 <_svfiprintf_r+0x1d8>
 8003556:	4b24      	ldr	r3, [pc, #144]	; (80035e8 <_svfiprintf_r+0x1f8>)
 8003558:	bb1b      	cbnz	r3, 80035a2 <_svfiprintf_r+0x1b2>
 800355a:	9b03      	ldr	r3, [sp, #12]
 800355c:	3307      	adds	r3, #7
 800355e:	f023 0307 	bic.w	r3, r3, #7
 8003562:	3308      	adds	r3, #8
 8003564:	9303      	str	r3, [sp, #12]
 8003566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003568:	4433      	add	r3, r6
 800356a:	9309      	str	r3, [sp, #36]	; 0x24
 800356c:	e767      	b.n	800343e <_svfiprintf_r+0x4e>
 800356e:	460c      	mov	r4, r1
 8003570:	2001      	movs	r0, #1
 8003572:	fb0c 3202 	mla	r2, ip, r2, r3
 8003576:	e7a5      	b.n	80034c4 <_svfiprintf_r+0xd4>
 8003578:	2300      	movs	r3, #0
 800357a:	f04f 0c0a 	mov.w	ip, #10
 800357e:	4619      	mov	r1, r3
 8003580:	3401      	adds	r4, #1
 8003582:	9305      	str	r3, [sp, #20]
 8003584:	4620      	mov	r0, r4
 8003586:	f810 2b01 	ldrb.w	r2, [r0], #1
 800358a:	3a30      	subs	r2, #48	; 0x30
 800358c:	2a09      	cmp	r2, #9
 800358e:	d903      	bls.n	8003598 <_svfiprintf_r+0x1a8>
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0c5      	beq.n	8003520 <_svfiprintf_r+0x130>
 8003594:	9105      	str	r1, [sp, #20]
 8003596:	e7c3      	b.n	8003520 <_svfiprintf_r+0x130>
 8003598:	4604      	mov	r4, r0
 800359a:	2301      	movs	r3, #1
 800359c:	fb0c 2101 	mla	r1, ip, r1, r2
 80035a0:	e7f0      	b.n	8003584 <_svfiprintf_r+0x194>
 80035a2:	ab03      	add	r3, sp, #12
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	462a      	mov	r2, r5
 80035a8:	4638      	mov	r0, r7
 80035aa:	4b10      	ldr	r3, [pc, #64]	; (80035ec <_svfiprintf_r+0x1fc>)
 80035ac:	a904      	add	r1, sp, #16
 80035ae:	f3af 8000 	nop.w
 80035b2:	1c42      	adds	r2, r0, #1
 80035b4:	4606      	mov	r6, r0
 80035b6:	d1d6      	bne.n	8003566 <_svfiprintf_r+0x176>
 80035b8:	89ab      	ldrh	r3, [r5, #12]
 80035ba:	065b      	lsls	r3, r3, #25
 80035bc:	f53f af2c 	bmi.w	8003418 <_svfiprintf_r+0x28>
 80035c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035c2:	b01d      	add	sp, #116	; 0x74
 80035c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035c8:	ab03      	add	r3, sp, #12
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	462a      	mov	r2, r5
 80035ce:	4638      	mov	r0, r7
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <_svfiprintf_r+0x1fc>)
 80035d2:	a904      	add	r1, sp, #16
 80035d4:	f000 f87c 	bl	80036d0 <_printf_i>
 80035d8:	e7eb      	b.n	80035b2 <_svfiprintf_r+0x1c2>
 80035da:	bf00      	nop
 80035dc:	080043b8 	.word	0x080043b8
 80035e0:	080043be 	.word	0x080043be
 80035e4:	080043c2 	.word	0x080043c2
 80035e8:	00000000 	.word	0x00000000
 80035ec:	08003339 	.word	0x08003339

080035f0 <_printf_common>:
 80035f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035f4:	4616      	mov	r6, r2
 80035f6:	4699      	mov	r9, r3
 80035f8:	688a      	ldr	r2, [r1, #8]
 80035fa:	690b      	ldr	r3, [r1, #16]
 80035fc:	4607      	mov	r7, r0
 80035fe:	4293      	cmp	r3, r2
 8003600:	bfb8      	it	lt
 8003602:	4613      	movlt	r3, r2
 8003604:	6033      	str	r3, [r6, #0]
 8003606:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800360a:	460c      	mov	r4, r1
 800360c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003610:	b10a      	cbz	r2, 8003616 <_printf_common+0x26>
 8003612:	3301      	adds	r3, #1
 8003614:	6033      	str	r3, [r6, #0]
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	0699      	lsls	r1, r3, #26
 800361a:	bf42      	ittt	mi
 800361c:	6833      	ldrmi	r3, [r6, #0]
 800361e:	3302      	addmi	r3, #2
 8003620:	6033      	strmi	r3, [r6, #0]
 8003622:	6825      	ldr	r5, [r4, #0]
 8003624:	f015 0506 	ands.w	r5, r5, #6
 8003628:	d106      	bne.n	8003638 <_printf_common+0x48>
 800362a:	f104 0a19 	add.w	sl, r4, #25
 800362e:	68e3      	ldr	r3, [r4, #12]
 8003630:	6832      	ldr	r2, [r6, #0]
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	42ab      	cmp	r3, r5
 8003636:	dc28      	bgt.n	800368a <_printf_common+0x9a>
 8003638:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800363c:	1e13      	subs	r3, r2, #0
 800363e:	6822      	ldr	r2, [r4, #0]
 8003640:	bf18      	it	ne
 8003642:	2301      	movne	r3, #1
 8003644:	0692      	lsls	r2, r2, #26
 8003646:	d42d      	bmi.n	80036a4 <_printf_common+0xb4>
 8003648:	4649      	mov	r1, r9
 800364a:	4638      	mov	r0, r7
 800364c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003650:	47c0      	blx	r8
 8003652:	3001      	adds	r0, #1
 8003654:	d020      	beq.n	8003698 <_printf_common+0xa8>
 8003656:	6823      	ldr	r3, [r4, #0]
 8003658:	68e5      	ldr	r5, [r4, #12]
 800365a:	f003 0306 	and.w	r3, r3, #6
 800365e:	2b04      	cmp	r3, #4
 8003660:	bf18      	it	ne
 8003662:	2500      	movne	r5, #0
 8003664:	6832      	ldr	r2, [r6, #0]
 8003666:	f04f 0600 	mov.w	r6, #0
 800366a:	68a3      	ldr	r3, [r4, #8]
 800366c:	bf08      	it	eq
 800366e:	1aad      	subeq	r5, r5, r2
 8003670:	6922      	ldr	r2, [r4, #16]
 8003672:	bf08      	it	eq
 8003674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003678:	4293      	cmp	r3, r2
 800367a:	bfc4      	itt	gt
 800367c:	1a9b      	subgt	r3, r3, r2
 800367e:	18ed      	addgt	r5, r5, r3
 8003680:	341a      	adds	r4, #26
 8003682:	42b5      	cmp	r5, r6
 8003684:	d11a      	bne.n	80036bc <_printf_common+0xcc>
 8003686:	2000      	movs	r0, #0
 8003688:	e008      	b.n	800369c <_printf_common+0xac>
 800368a:	2301      	movs	r3, #1
 800368c:	4652      	mov	r2, sl
 800368e:	4649      	mov	r1, r9
 8003690:	4638      	mov	r0, r7
 8003692:	47c0      	blx	r8
 8003694:	3001      	adds	r0, #1
 8003696:	d103      	bne.n	80036a0 <_printf_common+0xb0>
 8003698:	f04f 30ff 	mov.w	r0, #4294967295
 800369c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a0:	3501      	adds	r5, #1
 80036a2:	e7c4      	b.n	800362e <_printf_common+0x3e>
 80036a4:	2030      	movs	r0, #48	; 0x30
 80036a6:	18e1      	adds	r1, r4, r3
 80036a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036b2:	4422      	add	r2, r4
 80036b4:	3302      	adds	r3, #2
 80036b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036ba:	e7c5      	b.n	8003648 <_printf_common+0x58>
 80036bc:	2301      	movs	r3, #1
 80036be:	4622      	mov	r2, r4
 80036c0:	4649      	mov	r1, r9
 80036c2:	4638      	mov	r0, r7
 80036c4:	47c0      	blx	r8
 80036c6:	3001      	adds	r0, #1
 80036c8:	d0e6      	beq.n	8003698 <_printf_common+0xa8>
 80036ca:	3601      	adds	r6, #1
 80036cc:	e7d9      	b.n	8003682 <_printf_common+0x92>
	...

080036d0 <_printf_i>:
 80036d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036d4:	7e0f      	ldrb	r7, [r1, #24]
 80036d6:	4691      	mov	r9, r2
 80036d8:	2f78      	cmp	r7, #120	; 0x78
 80036da:	4680      	mov	r8, r0
 80036dc:	460c      	mov	r4, r1
 80036de:	469a      	mov	sl, r3
 80036e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80036e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80036e6:	d807      	bhi.n	80036f8 <_printf_i+0x28>
 80036e8:	2f62      	cmp	r7, #98	; 0x62
 80036ea:	d80a      	bhi.n	8003702 <_printf_i+0x32>
 80036ec:	2f00      	cmp	r7, #0
 80036ee:	f000 80d9 	beq.w	80038a4 <_printf_i+0x1d4>
 80036f2:	2f58      	cmp	r7, #88	; 0x58
 80036f4:	f000 80a4 	beq.w	8003840 <_printf_i+0x170>
 80036f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003700:	e03a      	b.n	8003778 <_printf_i+0xa8>
 8003702:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003706:	2b15      	cmp	r3, #21
 8003708:	d8f6      	bhi.n	80036f8 <_printf_i+0x28>
 800370a:	a101      	add	r1, pc, #4	; (adr r1, 8003710 <_printf_i+0x40>)
 800370c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003710:	08003769 	.word	0x08003769
 8003714:	0800377d 	.word	0x0800377d
 8003718:	080036f9 	.word	0x080036f9
 800371c:	080036f9 	.word	0x080036f9
 8003720:	080036f9 	.word	0x080036f9
 8003724:	080036f9 	.word	0x080036f9
 8003728:	0800377d 	.word	0x0800377d
 800372c:	080036f9 	.word	0x080036f9
 8003730:	080036f9 	.word	0x080036f9
 8003734:	080036f9 	.word	0x080036f9
 8003738:	080036f9 	.word	0x080036f9
 800373c:	0800388b 	.word	0x0800388b
 8003740:	080037ad 	.word	0x080037ad
 8003744:	0800386d 	.word	0x0800386d
 8003748:	080036f9 	.word	0x080036f9
 800374c:	080036f9 	.word	0x080036f9
 8003750:	080038ad 	.word	0x080038ad
 8003754:	080036f9 	.word	0x080036f9
 8003758:	080037ad 	.word	0x080037ad
 800375c:	080036f9 	.word	0x080036f9
 8003760:	080036f9 	.word	0x080036f9
 8003764:	08003875 	.word	0x08003875
 8003768:	682b      	ldr	r3, [r5, #0]
 800376a:	1d1a      	adds	r2, r3, #4
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	602a      	str	r2, [r5, #0]
 8003770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003778:	2301      	movs	r3, #1
 800377a:	e0a4      	b.n	80038c6 <_printf_i+0x1f6>
 800377c:	6820      	ldr	r0, [r4, #0]
 800377e:	6829      	ldr	r1, [r5, #0]
 8003780:	0606      	lsls	r6, r0, #24
 8003782:	f101 0304 	add.w	r3, r1, #4
 8003786:	d50a      	bpl.n	800379e <_printf_i+0xce>
 8003788:	680e      	ldr	r6, [r1, #0]
 800378a:	602b      	str	r3, [r5, #0]
 800378c:	2e00      	cmp	r6, #0
 800378e:	da03      	bge.n	8003798 <_printf_i+0xc8>
 8003790:	232d      	movs	r3, #45	; 0x2d
 8003792:	4276      	negs	r6, r6
 8003794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003798:	230a      	movs	r3, #10
 800379a:	485e      	ldr	r0, [pc, #376]	; (8003914 <_printf_i+0x244>)
 800379c:	e019      	b.n	80037d2 <_printf_i+0x102>
 800379e:	680e      	ldr	r6, [r1, #0]
 80037a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037a4:	602b      	str	r3, [r5, #0]
 80037a6:	bf18      	it	ne
 80037a8:	b236      	sxthne	r6, r6
 80037aa:	e7ef      	b.n	800378c <_printf_i+0xbc>
 80037ac:	682b      	ldr	r3, [r5, #0]
 80037ae:	6820      	ldr	r0, [r4, #0]
 80037b0:	1d19      	adds	r1, r3, #4
 80037b2:	6029      	str	r1, [r5, #0]
 80037b4:	0601      	lsls	r1, r0, #24
 80037b6:	d501      	bpl.n	80037bc <_printf_i+0xec>
 80037b8:	681e      	ldr	r6, [r3, #0]
 80037ba:	e002      	b.n	80037c2 <_printf_i+0xf2>
 80037bc:	0646      	lsls	r6, r0, #25
 80037be:	d5fb      	bpl.n	80037b8 <_printf_i+0xe8>
 80037c0:	881e      	ldrh	r6, [r3, #0]
 80037c2:	2f6f      	cmp	r7, #111	; 0x6f
 80037c4:	bf0c      	ite	eq
 80037c6:	2308      	moveq	r3, #8
 80037c8:	230a      	movne	r3, #10
 80037ca:	4852      	ldr	r0, [pc, #328]	; (8003914 <_printf_i+0x244>)
 80037cc:	2100      	movs	r1, #0
 80037ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037d2:	6865      	ldr	r5, [r4, #4]
 80037d4:	2d00      	cmp	r5, #0
 80037d6:	bfa8      	it	ge
 80037d8:	6821      	ldrge	r1, [r4, #0]
 80037da:	60a5      	str	r5, [r4, #8]
 80037dc:	bfa4      	itt	ge
 80037de:	f021 0104 	bicge.w	r1, r1, #4
 80037e2:	6021      	strge	r1, [r4, #0]
 80037e4:	b90e      	cbnz	r6, 80037ea <_printf_i+0x11a>
 80037e6:	2d00      	cmp	r5, #0
 80037e8:	d04d      	beq.n	8003886 <_printf_i+0x1b6>
 80037ea:	4615      	mov	r5, r2
 80037ec:	fbb6 f1f3 	udiv	r1, r6, r3
 80037f0:	fb03 6711 	mls	r7, r3, r1, r6
 80037f4:	5dc7      	ldrb	r7, [r0, r7]
 80037f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80037fa:	4637      	mov	r7, r6
 80037fc:	42bb      	cmp	r3, r7
 80037fe:	460e      	mov	r6, r1
 8003800:	d9f4      	bls.n	80037ec <_printf_i+0x11c>
 8003802:	2b08      	cmp	r3, #8
 8003804:	d10b      	bne.n	800381e <_printf_i+0x14e>
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	07de      	lsls	r6, r3, #31
 800380a:	d508      	bpl.n	800381e <_printf_i+0x14e>
 800380c:	6923      	ldr	r3, [r4, #16]
 800380e:	6861      	ldr	r1, [r4, #4]
 8003810:	4299      	cmp	r1, r3
 8003812:	bfde      	ittt	le
 8003814:	2330      	movle	r3, #48	; 0x30
 8003816:	f805 3c01 	strble.w	r3, [r5, #-1]
 800381a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800381e:	1b52      	subs	r2, r2, r5
 8003820:	6122      	str	r2, [r4, #16]
 8003822:	464b      	mov	r3, r9
 8003824:	4621      	mov	r1, r4
 8003826:	4640      	mov	r0, r8
 8003828:	f8cd a000 	str.w	sl, [sp]
 800382c:	aa03      	add	r2, sp, #12
 800382e:	f7ff fedf 	bl	80035f0 <_printf_common>
 8003832:	3001      	adds	r0, #1
 8003834:	d14c      	bne.n	80038d0 <_printf_i+0x200>
 8003836:	f04f 30ff 	mov.w	r0, #4294967295
 800383a:	b004      	add	sp, #16
 800383c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003840:	4834      	ldr	r0, [pc, #208]	; (8003914 <_printf_i+0x244>)
 8003842:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003846:	6829      	ldr	r1, [r5, #0]
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	f851 6b04 	ldr.w	r6, [r1], #4
 800384e:	6029      	str	r1, [r5, #0]
 8003850:	061d      	lsls	r5, r3, #24
 8003852:	d514      	bpl.n	800387e <_printf_i+0x1ae>
 8003854:	07df      	lsls	r7, r3, #31
 8003856:	bf44      	itt	mi
 8003858:	f043 0320 	orrmi.w	r3, r3, #32
 800385c:	6023      	strmi	r3, [r4, #0]
 800385e:	b91e      	cbnz	r6, 8003868 <_printf_i+0x198>
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	f023 0320 	bic.w	r3, r3, #32
 8003866:	6023      	str	r3, [r4, #0]
 8003868:	2310      	movs	r3, #16
 800386a:	e7af      	b.n	80037cc <_printf_i+0xfc>
 800386c:	6823      	ldr	r3, [r4, #0]
 800386e:	f043 0320 	orr.w	r3, r3, #32
 8003872:	6023      	str	r3, [r4, #0]
 8003874:	2378      	movs	r3, #120	; 0x78
 8003876:	4828      	ldr	r0, [pc, #160]	; (8003918 <_printf_i+0x248>)
 8003878:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800387c:	e7e3      	b.n	8003846 <_printf_i+0x176>
 800387e:	0659      	lsls	r1, r3, #25
 8003880:	bf48      	it	mi
 8003882:	b2b6      	uxthmi	r6, r6
 8003884:	e7e6      	b.n	8003854 <_printf_i+0x184>
 8003886:	4615      	mov	r5, r2
 8003888:	e7bb      	b.n	8003802 <_printf_i+0x132>
 800388a:	682b      	ldr	r3, [r5, #0]
 800388c:	6826      	ldr	r6, [r4, #0]
 800388e:	1d18      	adds	r0, r3, #4
 8003890:	6961      	ldr	r1, [r4, #20]
 8003892:	6028      	str	r0, [r5, #0]
 8003894:	0635      	lsls	r5, r6, #24
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	d501      	bpl.n	800389e <_printf_i+0x1ce>
 800389a:	6019      	str	r1, [r3, #0]
 800389c:	e002      	b.n	80038a4 <_printf_i+0x1d4>
 800389e:	0670      	lsls	r0, r6, #25
 80038a0:	d5fb      	bpl.n	800389a <_printf_i+0x1ca>
 80038a2:	8019      	strh	r1, [r3, #0]
 80038a4:	2300      	movs	r3, #0
 80038a6:	4615      	mov	r5, r2
 80038a8:	6123      	str	r3, [r4, #16]
 80038aa:	e7ba      	b.n	8003822 <_printf_i+0x152>
 80038ac:	682b      	ldr	r3, [r5, #0]
 80038ae:	2100      	movs	r1, #0
 80038b0:	1d1a      	adds	r2, r3, #4
 80038b2:	602a      	str	r2, [r5, #0]
 80038b4:	681d      	ldr	r5, [r3, #0]
 80038b6:	6862      	ldr	r2, [r4, #4]
 80038b8:	4628      	mov	r0, r5
 80038ba:	f000 f82f 	bl	800391c <memchr>
 80038be:	b108      	cbz	r0, 80038c4 <_printf_i+0x1f4>
 80038c0:	1b40      	subs	r0, r0, r5
 80038c2:	6060      	str	r0, [r4, #4]
 80038c4:	6863      	ldr	r3, [r4, #4]
 80038c6:	6123      	str	r3, [r4, #16]
 80038c8:	2300      	movs	r3, #0
 80038ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038ce:	e7a8      	b.n	8003822 <_printf_i+0x152>
 80038d0:	462a      	mov	r2, r5
 80038d2:	4649      	mov	r1, r9
 80038d4:	4640      	mov	r0, r8
 80038d6:	6923      	ldr	r3, [r4, #16]
 80038d8:	47d0      	blx	sl
 80038da:	3001      	adds	r0, #1
 80038dc:	d0ab      	beq.n	8003836 <_printf_i+0x166>
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	079b      	lsls	r3, r3, #30
 80038e2:	d413      	bmi.n	800390c <_printf_i+0x23c>
 80038e4:	68e0      	ldr	r0, [r4, #12]
 80038e6:	9b03      	ldr	r3, [sp, #12]
 80038e8:	4298      	cmp	r0, r3
 80038ea:	bfb8      	it	lt
 80038ec:	4618      	movlt	r0, r3
 80038ee:	e7a4      	b.n	800383a <_printf_i+0x16a>
 80038f0:	2301      	movs	r3, #1
 80038f2:	4632      	mov	r2, r6
 80038f4:	4649      	mov	r1, r9
 80038f6:	4640      	mov	r0, r8
 80038f8:	47d0      	blx	sl
 80038fa:	3001      	adds	r0, #1
 80038fc:	d09b      	beq.n	8003836 <_printf_i+0x166>
 80038fe:	3501      	adds	r5, #1
 8003900:	68e3      	ldr	r3, [r4, #12]
 8003902:	9903      	ldr	r1, [sp, #12]
 8003904:	1a5b      	subs	r3, r3, r1
 8003906:	42ab      	cmp	r3, r5
 8003908:	dcf2      	bgt.n	80038f0 <_printf_i+0x220>
 800390a:	e7eb      	b.n	80038e4 <_printf_i+0x214>
 800390c:	2500      	movs	r5, #0
 800390e:	f104 0619 	add.w	r6, r4, #25
 8003912:	e7f5      	b.n	8003900 <_printf_i+0x230>
 8003914:	080043c9 	.word	0x080043c9
 8003918:	080043da 	.word	0x080043da

0800391c <memchr>:
 800391c:	4603      	mov	r3, r0
 800391e:	b510      	push	{r4, lr}
 8003920:	b2c9      	uxtb	r1, r1
 8003922:	4402      	add	r2, r0
 8003924:	4293      	cmp	r3, r2
 8003926:	4618      	mov	r0, r3
 8003928:	d101      	bne.n	800392e <memchr+0x12>
 800392a:	2000      	movs	r0, #0
 800392c:	e003      	b.n	8003936 <memchr+0x1a>
 800392e:	7804      	ldrb	r4, [r0, #0]
 8003930:	3301      	adds	r3, #1
 8003932:	428c      	cmp	r4, r1
 8003934:	d1f6      	bne.n	8003924 <memchr+0x8>
 8003936:	bd10      	pop	{r4, pc}

08003938 <memcpy>:
 8003938:	440a      	add	r2, r1
 800393a:	4291      	cmp	r1, r2
 800393c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003940:	d100      	bne.n	8003944 <memcpy+0xc>
 8003942:	4770      	bx	lr
 8003944:	b510      	push	{r4, lr}
 8003946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800394a:	4291      	cmp	r1, r2
 800394c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003950:	d1f9      	bne.n	8003946 <memcpy+0xe>
 8003952:	bd10      	pop	{r4, pc}

08003954 <memmove>:
 8003954:	4288      	cmp	r0, r1
 8003956:	b510      	push	{r4, lr}
 8003958:	eb01 0402 	add.w	r4, r1, r2
 800395c:	d902      	bls.n	8003964 <memmove+0x10>
 800395e:	4284      	cmp	r4, r0
 8003960:	4623      	mov	r3, r4
 8003962:	d807      	bhi.n	8003974 <memmove+0x20>
 8003964:	1e43      	subs	r3, r0, #1
 8003966:	42a1      	cmp	r1, r4
 8003968:	d008      	beq.n	800397c <memmove+0x28>
 800396a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800396e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003972:	e7f8      	b.n	8003966 <memmove+0x12>
 8003974:	4601      	mov	r1, r0
 8003976:	4402      	add	r2, r0
 8003978:	428a      	cmp	r2, r1
 800397a:	d100      	bne.n	800397e <memmove+0x2a>
 800397c:	bd10      	pop	{r4, pc}
 800397e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003982:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003986:	e7f7      	b.n	8003978 <memmove+0x24>

08003988 <_free_r>:
 8003988:	b538      	push	{r3, r4, r5, lr}
 800398a:	4605      	mov	r5, r0
 800398c:	2900      	cmp	r1, #0
 800398e:	d040      	beq.n	8003a12 <_free_r+0x8a>
 8003990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003994:	1f0c      	subs	r4, r1, #4
 8003996:	2b00      	cmp	r3, #0
 8003998:	bfb8      	it	lt
 800399a:	18e4      	addlt	r4, r4, r3
 800399c:	f000 f910 	bl	8003bc0 <__malloc_lock>
 80039a0:	4a1c      	ldr	r2, [pc, #112]	; (8003a14 <_free_r+0x8c>)
 80039a2:	6813      	ldr	r3, [r2, #0]
 80039a4:	b933      	cbnz	r3, 80039b4 <_free_r+0x2c>
 80039a6:	6063      	str	r3, [r4, #4]
 80039a8:	6014      	str	r4, [r2, #0]
 80039aa:	4628      	mov	r0, r5
 80039ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039b0:	f000 b90c 	b.w	8003bcc <__malloc_unlock>
 80039b4:	42a3      	cmp	r3, r4
 80039b6:	d908      	bls.n	80039ca <_free_r+0x42>
 80039b8:	6820      	ldr	r0, [r4, #0]
 80039ba:	1821      	adds	r1, r4, r0
 80039bc:	428b      	cmp	r3, r1
 80039be:	bf01      	itttt	eq
 80039c0:	6819      	ldreq	r1, [r3, #0]
 80039c2:	685b      	ldreq	r3, [r3, #4]
 80039c4:	1809      	addeq	r1, r1, r0
 80039c6:	6021      	streq	r1, [r4, #0]
 80039c8:	e7ed      	b.n	80039a6 <_free_r+0x1e>
 80039ca:	461a      	mov	r2, r3
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	b10b      	cbz	r3, 80039d4 <_free_r+0x4c>
 80039d0:	42a3      	cmp	r3, r4
 80039d2:	d9fa      	bls.n	80039ca <_free_r+0x42>
 80039d4:	6811      	ldr	r1, [r2, #0]
 80039d6:	1850      	adds	r0, r2, r1
 80039d8:	42a0      	cmp	r0, r4
 80039da:	d10b      	bne.n	80039f4 <_free_r+0x6c>
 80039dc:	6820      	ldr	r0, [r4, #0]
 80039de:	4401      	add	r1, r0
 80039e0:	1850      	adds	r0, r2, r1
 80039e2:	4283      	cmp	r3, r0
 80039e4:	6011      	str	r1, [r2, #0]
 80039e6:	d1e0      	bne.n	80039aa <_free_r+0x22>
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	4401      	add	r1, r0
 80039ee:	6011      	str	r1, [r2, #0]
 80039f0:	6053      	str	r3, [r2, #4]
 80039f2:	e7da      	b.n	80039aa <_free_r+0x22>
 80039f4:	d902      	bls.n	80039fc <_free_r+0x74>
 80039f6:	230c      	movs	r3, #12
 80039f8:	602b      	str	r3, [r5, #0]
 80039fa:	e7d6      	b.n	80039aa <_free_r+0x22>
 80039fc:	6820      	ldr	r0, [r4, #0]
 80039fe:	1821      	adds	r1, r4, r0
 8003a00:	428b      	cmp	r3, r1
 8003a02:	bf01      	itttt	eq
 8003a04:	6819      	ldreq	r1, [r3, #0]
 8003a06:	685b      	ldreq	r3, [r3, #4]
 8003a08:	1809      	addeq	r1, r1, r0
 8003a0a:	6021      	streq	r1, [r4, #0]
 8003a0c:	6063      	str	r3, [r4, #4]
 8003a0e:	6054      	str	r4, [r2, #4]
 8003a10:	e7cb      	b.n	80039aa <_free_r+0x22>
 8003a12:	bd38      	pop	{r3, r4, r5, pc}
 8003a14:	2000033c 	.word	0x2000033c

08003a18 <sbrk_aligned>:
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	4e0e      	ldr	r6, [pc, #56]	; (8003a54 <sbrk_aligned+0x3c>)
 8003a1c:	460c      	mov	r4, r1
 8003a1e:	6831      	ldr	r1, [r6, #0]
 8003a20:	4605      	mov	r5, r0
 8003a22:	b911      	cbnz	r1, 8003a2a <sbrk_aligned+0x12>
 8003a24:	f000 f8bc 	bl	8003ba0 <_sbrk_r>
 8003a28:	6030      	str	r0, [r6, #0]
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	f000 f8b7 	bl	8003ba0 <_sbrk_r>
 8003a32:	1c43      	adds	r3, r0, #1
 8003a34:	d00a      	beq.n	8003a4c <sbrk_aligned+0x34>
 8003a36:	1cc4      	adds	r4, r0, #3
 8003a38:	f024 0403 	bic.w	r4, r4, #3
 8003a3c:	42a0      	cmp	r0, r4
 8003a3e:	d007      	beq.n	8003a50 <sbrk_aligned+0x38>
 8003a40:	1a21      	subs	r1, r4, r0
 8003a42:	4628      	mov	r0, r5
 8003a44:	f000 f8ac 	bl	8003ba0 <_sbrk_r>
 8003a48:	3001      	adds	r0, #1
 8003a4a:	d101      	bne.n	8003a50 <sbrk_aligned+0x38>
 8003a4c:	f04f 34ff 	mov.w	r4, #4294967295
 8003a50:	4620      	mov	r0, r4
 8003a52:	bd70      	pop	{r4, r5, r6, pc}
 8003a54:	20000340 	.word	0x20000340

08003a58 <_malloc_r>:
 8003a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a5c:	1ccd      	adds	r5, r1, #3
 8003a5e:	f025 0503 	bic.w	r5, r5, #3
 8003a62:	3508      	adds	r5, #8
 8003a64:	2d0c      	cmp	r5, #12
 8003a66:	bf38      	it	cc
 8003a68:	250c      	movcc	r5, #12
 8003a6a:	2d00      	cmp	r5, #0
 8003a6c:	4607      	mov	r7, r0
 8003a6e:	db01      	blt.n	8003a74 <_malloc_r+0x1c>
 8003a70:	42a9      	cmp	r1, r5
 8003a72:	d905      	bls.n	8003a80 <_malloc_r+0x28>
 8003a74:	230c      	movs	r3, #12
 8003a76:	2600      	movs	r6, #0
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	4630      	mov	r0, r6
 8003a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a80:	4e2e      	ldr	r6, [pc, #184]	; (8003b3c <_malloc_r+0xe4>)
 8003a82:	f000 f89d 	bl	8003bc0 <__malloc_lock>
 8003a86:	6833      	ldr	r3, [r6, #0]
 8003a88:	461c      	mov	r4, r3
 8003a8a:	bb34      	cbnz	r4, 8003ada <_malloc_r+0x82>
 8003a8c:	4629      	mov	r1, r5
 8003a8e:	4638      	mov	r0, r7
 8003a90:	f7ff ffc2 	bl	8003a18 <sbrk_aligned>
 8003a94:	1c43      	adds	r3, r0, #1
 8003a96:	4604      	mov	r4, r0
 8003a98:	d14d      	bne.n	8003b36 <_malloc_r+0xde>
 8003a9a:	6834      	ldr	r4, [r6, #0]
 8003a9c:	4626      	mov	r6, r4
 8003a9e:	2e00      	cmp	r6, #0
 8003aa0:	d140      	bne.n	8003b24 <_malloc_r+0xcc>
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	4631      	mov	r1, r6
 8003aa6:	4638      	mov	r0, r7
 8003aa8:	eb04 0803 	add.w	r8, r4, r3
 8003aac:	f000 f878 	bl	8003ba0 <_sbrk_r>
 8003ab0:	4580      	cmp	r8, r0
 8003ab2:	d13a      	bne.n	8003b2a <_malloc_r+0xd2>
 8003ab4:	6821      	ldr	r1, [r4, #0]
 8003ab6:	3503      	adds	r5, #3
 8003ab8:	1a6d      	subs	r5, r5, r1
 8003aba:	f025 0503 	bic.w	r5, r5, #3
 8003abe:	3508      	adds	r5, #8
 8003ac0:	2d0c      	cmp	r5, #12
 8003ac2:	bf38      	it	cc
 8003ac4:	250c      	movcc	r5, #12
 8003ac6:	4638      	mov	r0, r7
 8003ac8:	4629      	mov	r1, r5
 8003aca:	f7ff ffa5 	bl	8003a18 <sbrk_aligned>
 8003ace:	3001      	adds	r0, #1
 8003ad0:	d02b      	beq.n	8003b2a <_malloc_r+0xd2>
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	442b      	add	r3, r5
 8003ad6:	6023      	str	r3, [r4, #0]
 8003ad8:	e00e      	b.n	8003af8 <_malloc_r+0xa0>
 8003ada:	6822      	ldr	r2, [r4, #0]
 8003adc:	1b52      	subs	r2, r2, r5
 8003ade:	d41e      	bmi.n	8003b1e <_malloc_r+0xc6>
 8003ae0:	2a0b      	cmp	r2, #11
 8003ae2:	d916      	bls.n	8003b12 <_malloc_r+0xba>
 8003ae4:	1961      	adds	r1, r4, r5
 8003ae6:	42a3      	cmp	r3, r4
 8003ae8:	6025      	str	r5, [r4, #0]
 8003aea:	bf18      	it	ne
 8003aec:	6059      	strne	r1, [r3, #4]
 8003aee:	6863      	ldr	r3, [r4, #4]
 8003af0:	bf08      	it	eq
 8003af2:	6031      	streq	r1, [r6, #0]
 8003af4:	5162      	str	r2, [r4, r5]
 8003af6:	604b      	str	r3, [r1, #4]
 8003af8:	4638      	mov	r0, r7
 8003afa:	f104 060b 	add.w	r6, r4, #11
 8003afe:	f000 f865 	bl	8003bcc <__malloc_unlock>
 8003b02:	f026 0607 	bic.w	r6, r6, #7
 8003b06:	1d23      	adds	r3, r4, #4
 8003b08:	1af2      	subs	r2, r6, r3
 8003b0a:	d0b6      	beq.n	8003a7a <_malloc_r+0x22>
 8003b0c:	1b9b      	subs	r3, r3, r6
 8003b0e:	50a3      	str	r3, [r4, r2]
 8003b10:	e7b3      	b.n	8003a7a <_malloc_r+0x22>
 8003b12:	6862      	ldr	r2, [r4, #4]
 8003b14:	42a3      	cmp	r3, r4
 8003b16:	bf0c      	ite	eq
 8003b18:	6032      	streq	r2, [r6, #0]
 8003b1a:	605a      	strne	r2, [r3, #4]
 8003b1c:	e7ec      	b.n	8003af8 <_malloc_r+0xa0>
 8003b1e:	4623      	mov	r3, r4
 8003b20:	6864      	ldr	r4, [r4, #4]
 8003b22:	e7b2      	b.n	8003a8a <_malloc_r+0x32>
 8003b24:	4634      	mov	r4, r6
 8003b26:	6876      	ldr	r6, [r6, #4]
 8003b28:	e7b9      	b.n	8003a9e <_malloc_r+0x46>
 8003b2a:	230c      	movs	r3, #12
 8003b2c:	4638      	mov	r0, r7
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	f000 f84c 	bl	8003bcc <__malloc_unlock>
 8003b34:	e7a1      	b.n	8003a7a <_malloc_r+0x22>
 8003b36:	6025      	str	r5, [r4, #0]
 8003b38:	e7de      	b.n	8003af8 <_malloc_r+0xa0>
 8003b3a:	bf00      	nop
 8003b3c:	2000033c 	.word	0x2000033c

08003b40 <_realloc_r>:
 8003b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b44:	4680      	mov	r8, r0
 8003b46:	4614      	mov	r4, r2
 8003b48:	460e      	mov	r6, r1
 8003b4a:	b921      	cbnz	r1, 8003b56 <_realloc_r+0x16>
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b52:	f7ff bf81 	b.w	8003a58 <_malloc_r>
 8003b56:	b92a      	cbnz	r2, 8003b64 <_realloc_r+0x24>
 8003b58:	f7ff ff16 	bl	8003988 <_free_r>
 8003b5c:	4625      	mov	r5, r4
 8003b5e:	4628      	mov	r0, r5
 8003b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b64:	f000 f838 	bl	8003bd8 <_malloc_usable_size_r>
 8003b68:	4284      	cmp	r4, r0
 8003b6a:	4607      	mov	r7, r0
 8003b6c:	d802      	bhi.n	8003b74 <_realloc_r+0x34>
 8003b6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003b72:	d812      	bhi.n	8003b9a <_realloc_r+0x5a>
 8003b74:	4621      	mov	r1, r4
 8003b76:	4640      	mov	r0, r8
 8003b78:	f7ff ff6e 	bl	8003a58 <_malloc_r>
 8003b7c:	4605      	mov	r5, r0
 8003b7e:	2800      	cmp	r0, #0
 8003b80:	d0ed      	beq.n	8003b5e <_realloc_r+0x1e>
 8003b82:	42bc      	cmp	r4, r7
 8003b84:	4622      	mov	r2, r4
 8003b86:	4631      	mov	r1, r6
 8003b88:	bf28      	it	cs
 8003b8a:	463a      	movcs	r2, r7
 8003b8c:	f7ff fed4 	bl	8003938 <memcpy>
 8003b90:	4631      	mov	r1, r6
 8003b92:	4640      	mov	r0, r8
 8003b94:	f7ff fef8 	bl	8003988 <_free_r>
 8003b98:	e7e1      	b.n	8003b5e <_realloc_r+0x1e>
 8003b9a:	4635      	mov	r5, r6
 8003b9c:	e7df      	b.n	8003b5e <_realloc_r+0x1e>
	...

08003ba0 <_sbrk_r>:
 8003ba0:	b538      	push	{r3, r4, r5, lr}
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	4d05      	ldr	r5, [pc, #20]	; (8003bbc <_sbrk_r+0x1c>)
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	4608      	mov	r0, r1
 8003baa:	602b      	str	r3, [r5, #0]
 8003bac:	f7fd fa12 	bl	8000fd4 <_sbrk>
 8003bb0:	1c43      	adds	r3, r0, #1
 8003bb2:	d102      	bne.n	8003bba <_sbrk_r+0x1a>
 8003bb4:	682b      	ldr	r3, [r5, #0]
 8003bb6:	b103      	cbz	r3, 8003bba <_sbrk_r+0x1a>
 8003bb8:	6023      	str	r3, [r4, #0]
 8003bba:	bd38      	pop	{r3, r4, r5, pc}
 8003bbc:	20000344 	.word	0x20000344

08003bc0 <__malloc_lock>:
 8003bc0:	4801      	ldr	r0, [pc, #4]	; (8003bc8 <__malloc_lock+0x8>)
 8003bc2:	f000 b811 	b.w	8003be8 <__retarget_lock_acquire_recursive>
 8003bc6:	bf00      	nop
 8003bc8:	20000348 	.word	0x20000348

08003bcc <__malloc_unlock>:
 8003bcc:	4801      	ldr	r0, [pc, #4]	; (8003bd4 <__malloc_unlock+0x8>)
 8003bce:	f000 b80c 	b.w	8003bea <__retarget_lock_release_recursive>
 8003bd2:	bf00      	nop
 8003bd4:	20000348 	.word	0x20000348

08003bd8 <_malloc_usable_size_r>:
 8003bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bdc:	1f18      	subs	r0, r3, #4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	bfbc      	itt	lt
 8003be2:	580b      	ldrlt	r3, [r1, r0]
 8003be4:	18c0      	addlt	r0, r0, r3
 8003be6:	4770      	bx	lr

08003be8 <__retarget_lock_acquire_recursive>:
 8003be8:	4770      	bx	lr

08003bea <__retarget_lock_release_recursive>:
 8003bea:	4770      	bx	lr

08003bec <_init>:
 8003bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bee:	bf00      	nop
 8003bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf2:	bc08      	pop	{r3}
 8003bf4:	469e      	mov	lr, r3
 8003bf6:	4770      	bx	lr

08003bf8 <_fini>:
 8003bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfa:	bf00      	nop
 8003bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfe:	bc08      	pop	{r3}
 8003c00:	469e      	mov	lr, r3
 8003c02:	4770      	bx	lr
